{"file_contents":{"QLMRegistration.cs":{"content":"\nusing System;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing Microsoft.Win32;\n\n/// <summary>\n/// Classe per la registrazione automatica software presso QLM Register\n/// </summary>\npublic class QLMRegistration\n{\n    private readonly string _apiBaseUrl;\n    private readonly string _nomeAzienda;\n    private readonly string _partitaIva;\n    private readonly string _nomeSoftware;\n    private readonly string _versione;\n    private readonly string _installationPath;\n    private readonly HttpClient _httpClient;\n\n    public QLMRegistration(string apiBaseUrl, string nomeAzienda, string partitaIva, \n                          string nomeSoftware, string versione, string installationPath)\n    {\n        _apiBaseUrl = apiBaseUrl;\n        _nomeAzienda = nomeAzienda;\n        _partitaIva = partitaIva;\n        _nomeSoftware = nomeSoftware;\n        _versione = versione;\n        _installationPath = installationPath;\n        _httpClient = new HttpClient();\n    }\n\n    /// <summary>\n    /// Genera una chiave univoca per il dispositivo\n    /// </summary>\n    private string GenerateComputerKey()\n    {\n        var timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();\n        var random = Guid.NewGuid().ToString(\"N\")[..9].ToUpper();\n        var machineId = GetMachineIdentifier();\n        return $\"{_nomeSoftware.Replace(\" \", \"\")}-{machineId}-{random}\";\n    }\n\n    /// <summary>\n    /// Ottiene l'identificativo della macchina Windows\n    /// </summary>\n    private string GetMachineIdentifier()\n    {\n        try\n        {\n            // Usa il Machine GUID di Windows\n            using var key = Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\Cryptography\");\n            var machineGuid = key?.GetValue(\"MachineGuid\")?.ToString();\n            return machineGuid?[..8] ?? \"UNKNOWN\";\n        }\n        catch\n        {\n            return Environment.MachineName[..Math.Min(8, Environment.MachineName.Length)];\n        }\n    }\n\n    /// <summary>\n    /// Ottiene informazioni sul sistema\n    /// </summary>\n    private string GetMachineInfo()\n    {\n        return $\"{Environment.OSVersion} - {Environment.MachineName}\";\n    }\n\n    /// <summary>\n    /// Registra il software presso QLM\n    /// </summary>\n    public async Task<RegistrationResult> RegisterSoftwareAsync()\n    {\n        var computerKey = GenerateComputerKey();\n        \n        var payload = new\n        {\n            nomeAzienda = _nomeAzienda,\n            partitaIva = _partitaIva,\n            nomeSoftware = _nomeSoftware,\n            versione = _versione,\n            computerKey = computerKey,\n            installationPath = _installationPath,\n            machineInfo = GetMachineInfo(),\n            registrationDate = DateTime.UtcNow.ToString(\"O\")\n        };\n\n        try\n        {\n            Console.WriteLine($\"üîÑ Registrando {_nomeSoftware} presso QLM...\");\n\n            var json = JsonSerializer.Serialize(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            _httpClient.DefaultRequestHeaders.Add(\"User-Agent\", $\"{_nomeSoftware}-Registration/1.0\");\n\n            var response = await _httpClient.PostAsync($\"{_apiBaseUrl}/api/software/register\", content);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseText = await response.Content.ReadAsStringAsync();\n                var result = JsonSerializer.Deserialize<QLMResponse>(responseText);\n                \n                Console.WriteLine(\"‚úÖ Registrazione QLM completata!\");\n                \n                // Salva la computer key nel registry\n                SaveComputerKey(computerKey);\n                \n                return new RegistrationResult\n                {\n                    Success = true,\n                    ComputerKey = computerKey,\n                    Response = result\n                };\n            }\n            else\n            {\n                var error = await response.Content.ReadAsStringAsync();\n                Console.WriteLine($\"‚ùå Errore registrazione QLM: {response.StatusCode} - {error}\");\n                \n                return new RegistrationResult\n                {\n                    Success = false,\n                    Error = $\"HTTP {(int)response.StatusCode}: {error}\"\n                };\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"üö® Errore durante registrazione QLM: {ex.Message}\");\n            \n            return new RegistrationResult\n            {\n                Success = false,\n                Error = ex.Message\n            };\n        }\n    }\n\n    /// <summary>\n    /// Salva la computer key nel registry Windows\n    /// </summary>\n    private void SaveComputerKey(string computerKey)\n    {\n        try\n        {\n            using var key = Registry.CurrentUser.CreateSubKey($@\"SOFTWARE\\{_nomeSoftware}\\QLM\");\n            key.SetValue(\"ComputerKey\", computerKey);\n            Console.WriteLine(\"üíæ Computer key salvata nel registry\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"‚ö†Ô∏è Impossibile salvare computer key: {ex.Message}\");\n        }\n    }\n\n    /// <summary>\n    /// Carica la computer key dal registry\n    /// </summary>\n    private string LoadComputerKey()\n    {\n        try\n        {\n            using var key = Registry.CurrentUser.OpenSubKey($@\"SOFTWARE\\{_nomeSoftware}\\QLM\");\n            return key?.GetValue(\"ComputerKey\")?.ToString();\n        }\n        catch\n        {\n            return null;\n        }\n    }\n\n    /// <summary>\n    /// Valida la licenza presso il server QLM\n    /// </summary>\n    public async Task<ValidationResult> ValidateLicenseAsync()\n    {\n        var computerKey = LoadComputerKey();\n        if (string.IsNullOrEmpty(computerKey))\n        {\n            Console.WriteLine(\"‚ö†Ô∏è Computer key non trovata, registrazione necessaria\");\n            return new ValidationResult\n            {\n                Success = false,\n                DeviceAuthorized = false,\n                NeedsRegistration = true,\n                Message = \"Computer key non trovata\"\n            };\n        }\n\n        var payload = new\n        {\n            partitaIva = _partitaIva,\n            nomeSoftware = _nomeSoftware,\n            computerKey = computerKey,\n            machineInfo = GetMachineInfo()\n        };\n\n        try\n        {\n            Console.WriteLine($\"üîç Validazione licenza per computer key: {computerKey}\");\n\n            var json = JsonSerializer.Serialize(payload);\n            var content = new StringContent(json, Encoding.UTF8, \"application/json\");\n            \n            _httpClient.DefaultRequestHeaders.Clear();\n            _httpClient.DefaultRequestHeaders.Add(\"User-Agent\", $\"{_nomeSoftware}-Validation/1.0\");\n\n            var response = await _httpClient.PostAsync($\"{_apiBaseUrl}/api/software/validate\", content);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseText = await response.Content.ReadAsStringAsync();\n                var result = JsonSerializer.Deserialize<QLMValidationResponse>(responseText);\n                \n                if (result.success && result.deviceAuthorized)\n                {\n                    Console.WriteLine($\"‚úÖ Licenza valida: {result.message}\");\n                    \n                    return new ValidationResult\n                    {\n                        Success = true,\n                        DeviceAuthorized = true,\n                        ValidityDays = result.licenseValidityDays,\n                        LicenseType = result.licenseType,\n                        MaxDevices = result.maxDevices,\n                        MaxUsers = result.maxUsers,\n                        Message = result.message\n                    };\n                }\n                else\n                {\n                    Console.WriteLine($\"‚ùå Licenza non valida: {result.message}\");\n                    \n                    return new ValidationResult\n                    {\n                        Success = false,\n                        DeviceAuthorized = false,\n                        Message = result.message\n                    };\n                }\n            }\n            else\n            {\n                var error = await response.Content.ReadAsStringAsync();\n                Console.WriteLine($\"‚ùå Errore validazione: {response.StatusCode} - {error}\");\n                \n                return new ValidationResult\n                {\n                    Success = false,\n                    DeviceAuthorized = false,\n                    Message = $\"HTTP {(int)response.StatusCode}: {error}\"\n                };\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"üö® Errore durante validazione licenza: {ex.Message}\");\n            \n            return new ValidationResult\n            {\n                Success = false,\n                DeviceAuthorized = false,\n                Message = ex.Message\n            };\n        }\n    }\n\n    public void Dispose()\n    {\n        _httpClient?.Dispose();\n    }\n}\n\n/// <summary>\n/// Risultato della registrazione\n/// </summary>\npublic class RegistrationResult\n{\n    public bool Success { get; set; }\n    public string ComputerKey { get; set; }\n    public string Error { get; set; }\n    public QLMResponse Response { get; set; }\n}\n\n/// <summary>\n/// Risposta dalla API QLM\n/// </summary>\npublic class QLMResponse\n{\n    public bool success { get; set; }\n    public string message { get; set; }\n    public bool deviceAuthorized { get; set; }\n    public int licenseValidityDays { get; set; }\n}\n\n/// <summary>\n/// Risposta dalla API di validazione QLM\n/// </summary>\npublic class QLMValidationResponse\n{\n    public bool success { get; set; }\n    public string message { get; set; }\n    public bool deviceAuthorized { get; set; }\n    public int licenseValidityDays { get; set; }\n    public string licenseType { get; set; }\n    public int maxDevices { get; set; }\n    public int maxUsers { get; set; }\n    public string activationKey { get; set; }\n}\n\n/// <summary>\n/// Risultato della validazione licenza\n/// </summary>\npublic class ValidationResult\n{\n    public bool Success { get; set; }\n    public bool DeviceAuthorized { get; set; }\n    public bool NeedsRegistration { get; set; }\n    public int ValidityDays { get; set; }\n    public string LicenseType { get; set; }\n    public int MaxDevices { get; set; }\n    public int MaxUsers { get; set; }\n    public string Message { get; set; }\n}\n\n// Esempio di utilizzo\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var qlm = new QLMRegistration(\n            apiBaseUrl: \"https://your-qlm-platform.replit.app\",\n            nomeAzienda: \"Esempio SRL\",\n            partitaIva: \"12345678901\",\n            nomeSoftware: \"MioSoftware Pro\",\n            versione: \"2.1.0\",\n            installationPath: @\"C:\\Program Files\\MioSoftware\\\"\n        );\n\n        // Prima registrazione (se non gi√† fatto)\n        var registrationResult = await qlm.RegisterSoftwareAsync();\n        \n        if (registrationResult.Success)\n        {\n            Console.WriteLine($\"üéâ Registrazione completata! Computer Key: {registrationResult.ComputerKey}\");\n        }\n\n        // Poi validazione licenza (da fare periodicamente)\n        var validationResult = await qlm.ValidateLicenseAsync();\n        \n        if (validationResult.Success && validationResult.DeviceAuthorized)\n        {\n            Console.WriteLine($\"‚úÖ Licenza valida! Giorni rimanenti: {validationResult.ValidityDays}\");\n            Console.WriteLine($\"üìã Tipo licenza: {validationResult.LicenseType}\");\n            Console.WriteLine($\"üîß Max dispositivi: {validationResult.MaxDevices}, Max utenti: {validationResult.MaxUsers}\");\n        }\n        else\n        {\n            Console.WriteLine($\"‚ùå Licenza non valida: {validationResult.Message}\");\n            \n            if (validationResult.NeedsRegistration)\n            {\n                Console.WriteLine(\"üîÑ Registrazione necessaria\");\n            }\n        }\n\n        qlm.Dispose();\n    }\n}\n","size_bytes":12135},"create-demo-registrations.js":{"content":"\nimport axios from 'axios';\n\n// Configurazione dell'endpoint API\nconst API_BASE_URL = 'http://localhost:5000';\n\n// Dati demo per le registrazioni software\nconst demoRegistrations = [\n  {\n    partitaIva: '01234567890',\n    nomeAzienda: 'Tech Solutions SRL',\n    prodotto: 'CassaWow',\n    versione: '4.2.1',\n    modulo: 'standard',\n    uidDispositivo: 'WS-001-MAIN',\n    sistemaOperativo: 'Windows 11 Pro',\n    note: 'Installazione principale su workstation'\n  },\n  {\n    partitaIva: '01234567890',\n    nomeAzienda: 'Tech Solutions SRL',\n    prodotto: 'CassaWow',\n    versione: '4.2.1',\n    modulo: 'standard',\n    uidDispositivo: 'TAB-002-MOBILE',\n    sistemaOperativo: 'Android 12',\n    note: 'Tablet per vendite mobile'\n  },\n  {\n    partitaIva: '98765432109',\n    nomeAzienda: 'Restaurant Bella Vista',\n    prodotto: 'JollyMag',\n    versione: '3.8.5',\n    modulo: 'restaurant',\n    uidDispositivo: 'POS-001-CASSA1',\n    sistemaOperativo: 'Linux Ubuntu 22.04',\n    note: 'POS principale sala ristorante'\n  },\n  {\n    partitaIva: '98765432109',\n    nomeAzienda: 'Restaurant Bella Vista',\n    prodotto: 'JollyMag',\n    versione: '3.8.5',\n    modulo: 'restaurant',\n    uidDispositivo: 'POS-002-CASSA2',\n    sistemaOperativo: 'Linux Ubuntu 22.04',\n    note: 'POS secondario per picchi di lavoro'\n  },\n  {\n    partitaIva: '11223344556',\n    nomeAzienda: 'Fashion Store Milano',\n    prodotto: 'Videcomoda',\n    versione: '2.3.0',\n    modulo: 'fashion',\n    uidDispositivo: 'DESK-001-VENDITE',\n    sistemaOperativo: 'Windows 11',\n    note: 'Postazione vendite principale'\n  },\n  {\n    partitaIva: '11223344556',\n    nomeAzienda: 'Fashion Store Milano',\n    prodotto: 'Videcomoda',\n    versione: '2.3.0',\n    modulo: 'fashion',\n    uidDispositivo: 'DESK-002-MAGAZZINO',\n    sistemaOperativo: 'Windows 10',\n    note: 'Postazione gestione magazzino'\n  },\n  {\n    partitaIva: '55667788990',\n    nomeAzienda: 'Alimentari del Centro',\n    prodotto: 'CassaWow',\n    versione: '4.1.8',\n    modulo: 'grocery',\n    uidDispositivo: 'REG-001-PRINCIPALE',\n    sistemaOperativo: 'Windows 10',\n    note: 'Registratore principale'\n  },\n  {\n    partitaIva: '33445566778',\n    nomeAzienda: 'Libreria Moderna',\n    prodotto: 'JollyMag',\n    versione: '3.9.2',\n    modulo: 'bookstore',\n    uidDispositivo: 'BOOK-001-COUNTER',\n    sistemaOperativo: 'macOS Monterey',\n    note: 'Banco principale libreria'\n  },\n  {\n    partitaIva: '77889900112',\n    nomeAzienda: 'Farmacia San Marco',\n    prodotto: 'CassaWow',\n    versione: '4.3.0',\n    modulo: 'pharmacy',\n    uidDispositivo: 'PHARM-001-MAIN',\n    sistemaOperativo: 'Windows 11 Pro',\n    note: 'Sistema principale farmacia'\n  },\n  {\n    partitaIva: '77889900112',\n    nomeAzienda: 'Farmacia San Marco',\n    prodotto: 'CassaWow',\n    versione: '4.3.0',\n    modulo: 'pharmacy',\n    uidDispositivo: 'PHARM-002-BACKUP',\n    sistemaOperativo: 'Windows 10',\n    note: 'Sistema di backup emergenze'\n  },\n  {\n    partitaIva: '99887766554',\n    nomeAzienda: 'Bar Centrale',\n    prodotto: 'JollyMag',\n    versione: '3.7.1',\n    modulo: 'bar',\n    uidDispositivo: 'BAR-001-CASSA',\n    sistemaOperativo: 'Linux Mint 21',\n    note: 'Cassa bar principale'\n  },\n  {\n    partitaIva: '22334455667',\n    nomeAzienda: 'Profumeria Elegante',\n    prodotto: 'Videcomoda',\n    versione: '2.4.1',\n    modulo: 'beauty',\n    uidDispositivo: 'BEAUTY-001-SALES',\n    sistemaOperativo: 'Windows 10 Pro',\n    note: 'Postazione vendite profumeria'\n  },\n  {\n    partitaIva: '44556677889',\n    nomeAzienda: 'Ferramenta Rossi',\n    prodotto: 'CassaWow',\n    versione: '4.0.5',\n    modulo: 'hardware',\n    uidDispositivo: 'HARD-001-REGISTER',\n    sistemaOperativo: 'Windows 10',\n    note: 'Registratore ferramenta'\n  },\n  {\n    partitaIva: '66778899001',\n    nomeAzienda: 'Pasticceria Dolce Vita',\n    prodotto: 'JollyMag',\n    versione: '3.8.8',\n    modulo: 'bakery',\n    uidDispositivo: 'CAKE-001-FRONT',\n    sistemaOperativo: 'Ubuntu 22.04',\n    note: 'POS banco vendite pasticceria'\n  }\n];\n\n// Funzione per creare una registrazione tramite API\nasync function createRegistration(registration) {\n  try {\n    console.log(`Creando registrazione per ${registration.nomeAzienda} - ${registration.uidDispositivo}...`);\n    \n    const response = await axios.post(`${API_BASE_URL}/api/device-registration`, registration, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      timeout: 10000\n    });\n    \n    console.log(`‚úÖ Registrazione creata con successo: ${response.data.message}`);\n    return response.data;\n  } catch (error) {\n    if (error.response) {\n      console.error(`‚ùå Errore API (${error.response.status}):`, error.response.data.message);\n    } else if (error.request) {\n      console.error('‚ùå Errore di connessione:', error.message);\n    } else {\n      console.error('‚ùå Errore generico:', error.message);\n    }\n    return null;\n  }\n}\n\n// Funzione principale per creare tutte le registrazioni demo\nasync function generateAllDemoRegistrations() {\n  console.log('üöÄ SCRIPT GENERAZIONE REGISTRAZIONI DEMO SOFTWARE');\n  console.log('==================================================\\n');\n  \n  // Verifica connessione al server\n  try {\n    console.log('üîç Verificando connessione al server...');\n    await axios.get(`${API_BASE_URL}/api/products`, { timeout: 5000 });\n    console.log('‚úÖ Server raggiungibile\\n');\n  } catch (error) {\n    console.error('‚ùå Server non raggiungibile. Assicurati che il server sia avviato.');\n    console.error('üí° Suggerimento: Il server deve essere in esecuzione sulla porta 5000.');\n    return;\n  }\n\n  let successCount = 0;\n  let errorCount = 0;\n  \n  console.log(`üìã Creando ${demoRegistrations.length} registrazioni demo...\\n`);\n  \n  for (const registration of demoRegistrations) {\n    const result = await createRegistration(registration);\n    \n    if (result) {\n      successCount++;\n    } else {\n      errorCount++;\n    }\n    \n    // Pausa di 300ms tra le registrazioni per evitare sovraccarico\n    await new Promise(resolve => setTimeout(resolve, 300));\n  }\n  \n  console.log('\\nüìä RIEPILOGO CREAZIONE REGISTRAZIONI:');\n  console.log(`   ‚úÖ Registrazioni completate: ${successCount}`);\n  console.log(`   ‚ùå Registrazioni fallite: ${errorCount}`);\n  console.log(`   üìà Totale tentativi: ${demoRegistrations.length}`);\n  \n  // Raggruppamento per azienda\n  const companiesMap = {};\n  for (const registration of demoRegistrations) {\n    if (!companiesMap[registration.nomeAzienda]) {\n      companiesMap[registration.nomeAzienda] = {\n        partitaIva: registration.partitaIva,\n        prodotto: registration.prodotto,\n        devices: 0\n      };\n    }\n    companiesMap[registration.nomeAzienda].devices++;\n  }\n  \n  console.log('\\nüè¢ AZIENDE CREATE:');\n  Object.entries(companiesMap).forEach(([azienda, info]) => {\n    console.log(`   ‚Ä¢ ${azienda} (${info.partitaIva}) - ${info.prodotto} - ${info.devices} dispositivi`);\n  });\n  \n  if (successCount > 0) {\n    console.log('\\nüéâ SCRIPT COMPLETATO CON SUCCESSO!');\n    console.log('üìã Le registrazioni demo sono state create nelle tabelle:');\n    console.log('   - Testa_Reg_Azienda (informazioni aziende)');\n    console.log('   - Dett_Reg_Azienda (dettagli dispositivi)');\n    console.log('\\nüí° Vai nella sezione \"Registrazioni Software\" per visualizzarle.');\n  } else {\n    console.log('\\n‚ö†Ô∏è  Nessuna registrazione creata. Controlla i logs per maggiori dettagli.');\n  }\n}\n\n// Avvia lo script\ngenerateAllDemoRegistrations().catch(error => {\n  console.error('\\nüí• ERRORE FATALE:', error.message);\n  process.exit(1);\n});\n","size_bytes":7555},"create-test-wallets.js":{"content":"// Script per creare wallet di test via API\nasync function createTestWallets() {\n  console.log('üîß Creazione wallet di test...');\n  \n  try {\n    // Get auth token - simulate login\n    const loginResponse = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username: 'admin', password: 'admin123' })\n    });\n    \n    if (!loginResponse.ok) {\n      throw new Error('Login failed');\n    }\n    \n    const loginData = await loginResponse.json();\n    const token = loginData.token;\n    console.log('‚úÖ Autenticazione completata');\n    \n    // Get companies\n    const companiesResponse = await fetch('http://localhost:5000/api/companies', {\n      headers: { 'Authorization': `Bearer ${token}` }\n    });\n    \n    if (!companiesResponse.ok) {\n      throw new Error('Failed to get companies');\n    }\n    \n    const companies = await companiesResponse.json();\n    console.log(`üìã Trovate ${companies.length} aziende`);\n    \n    // Create wallets for first 3 companies\n    const testCompanies = companies.slice(0, 3);\n    \n    for (const company of testCompanies) {\n      const amount = Math.floor(Math.random() * 400) + 100; // Random between 100-500\n      \n      const rechargeResponse = await fetch(`http://localhost:5000/api/wallet/${company.id}/recharge`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ amount })\n      });\n      \n      if (rechargeResponse.ok) {\n        console.log(`üí∞ Wallet creato per ${company.name}: ${amount} crediti`);\n      } else {\n        console.log(`‚ùå Errore creazione wallet per ${company.name}`);\n      }\n    }\n    \n    console.log('‚úÖ Creazione wallet completata!');\n    \n  } catch (error) {\n    console.error('‚ùå Errore:', error.message);\n  }\n}\n\ncreateTestWallets();","size_bytes":1945},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"fix-shadow-token.js":{"content":"// Script per aggiornare il token di shadow nel browser\n// Esegui questo comando nella console del browser per aggiornare il token\n\nconsole.log('üîß Aggiornamento token utente shadow...');\n\n// Token corretto e aggiornato\nconst correctToken = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRiMjdmNTYzLWU4OTgtNGUwZC05ZjA1LTdlOTg0YzIwYjM1ZiIsInVzZXJuYW1lIjoic2hhZG93Iiwicm9sZSI6ImFkbWluIiwiY29tcGFueUlkIjoiMTRjMWQ4MjMtNjI2ZC00YWRlLWFkMWQtNjFhZjA2NzEwMzRmIiwiaWF0IjoxNzU0MzIyMjAwLCJleHAiOjE3NTQ0MDg2MDB9.AZPk4Zxj_mkuebFRX4gcn139akMgV_7MIv36R_ZdnzM\";\n\nlocalStorage.setItem('qlm_token', correctToken);\nconsole.log('‚úÖ Token aggiornato! La pagina si ricaricher√† automaticamente...');\nconsole.log('üìä Dopo il ricaricamento vedrai solo i dati filtrati per admin.');\n\n// Ricarica automatica della pagina\nwindow.location.reload();","size_bytes":825},"fix-shadow-transactions.js":{"content":"import mysql from 'mysql2/promise';\n\nasync function fixShadowTransactions() {\n  const connection = await mysql.createConnection({\n    host: 'localhost',\n    user: 'root',\n    password: '',\n    database: 'license_management'\n  });\n\n  try {\n    console.log('üîß Creating historical transaction for Shadow company...');\n    \n    // Inserisci transazione storica per Shadow\n    const transactionId = 'shadow-historical-' + Date.now();\n    \n    await connection.execute(`\n      INSERT INTO wallet_transactions (\n        id, company_id, type, amount, balance_before, balance_after, \n        description, related_entity_type, created_by, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())\n    `, [\n      transactionId,\n      '14c1d823-626d-4ade-ad1d-61af0671034f', // Shadow company ID\n      'ricarica',\n      180,\n      0,\n      180,\n      'Ricarica storica - saldo esistente importato nel sistema',\n      'historical',\n      'system'\n    ]);\n\n    console.log('‚úÖ Historical transaction created successfully!');\n    \n    // Verifica la transazione\n    const [rows] = await connection.execute(\n      'SELECT * FROM wallet_transactions WHERE company_id = ? ORDER BY created_at DESC',\n      ['14c1d823-626d-4ade-ad1d-61af0671034f']\n    );\n    \n    console.log(`üìä Total transactions for Shadow: ${rows.length}`);\n    rows.forEach(tx => {\n      console.log(`- ${tx.type}: ‚Ç¨${tx.amount} - ${tx.description}`);\n    });\n\n  } catch (error) {\n    console.error('‚ùå Error:', error);\n  } finally {\n    await connection.end();\n  }\n}\n\nfixShadowTransactions();","size_bytes":1557},"fix-wallet-demo.js":{"content":"// Script per inserire dati wallet di demo direttamente  \nimport { createConnection } from 'mysql2/promise';\n\nasync function createDemoWallets() {\n  console.log('üîß Creazione dati wallet di demo...');\n  \n  // Usa le stesse credenziali del server\n  const connection = await createConnection({\n    host: 'srv1382.hstgr.io',\n    user: 'u790654745_replit', \n    password: 'System2024!',\n    database: 'u790654745_replit_license'\n  });\n\n  try {\n    // Inserisci wallet di demo\n    const walletData = [\n      { companyId: '308adb19-7977-48fc-9667-2a104a56d981', companyName: 'Cmh', balance: 150 },\n      { companyId: 'cf41b7dc-c2f6-4974-907f-ae2d0df9cfc6', companyName: 'Dylog', balance: 320 },\n      { companyId: '14c1d823-626d-4ade-ad1d-61af0671034f', companyName: 'Shadow', balance: 75 }\n    ];\n\n    for (const wallet of walletData) {\n      // Inserisci wallet\n      await connection.execute(`\n        INSERT INTO company_wallets (company_id, balance, total_recharges, created_at, updated_at) \n        VALUES (?, ?, ?, NOW(), NOW())\n        ON DUPLICATE KEY UPDATE \n          balance = VALUES(balance), \n          total_recharges = VALUES(total_recharges),\n          updated_at = NOW()\n      `, [wallet.companyId, wallet.balance, wallet.balance]);\n\n      // Inserisci transazione iniziale \n      await connection.execute(`\n        INSERT INTO wallet_transactions (\n          company_id, type, amount, balance_before, balance_after,\n          description, created_by, created_at\n        ) VALUES (?, 'ricarica', ?, 0, ?, ?, '-6sQhFmE-PqZD2qoRXcw4', NOW())\n      `, [\n        wallet.companyId, \n        wallet.balance, \n        wallet.balance,\n        `Ricarica iniziale wallet ${wallet.companyName}`\n      ]);\n\n      console.log(`üí∞ Wallet creato: ${wallet.companyName} - ${wallet.balance} crediti`);\n    }\n\n    console.log('‚úÖ Wallet demo creati con successo!');\n  } catch (error) {\n    console.error('‚ùå Errore:', error.message);\n  } finally {\n    await connection.end();\n  }\n}\n\ncreateDemoWallets();","size_bytes":2003},"init-wallets.js":{"content":"// Script per inizializzare wallet di test\nimport mysql from 'mysql2/promise';\n\nasync function initWallets() {\n  const connection = await mysql.createConnection({\n    host: 'srv1382.hstgr.io',\n    user: 'u790654745_replit',\n    password: 'System2024!',\n    database: 'u790654745_replit_license'\n  });\n\n  try {\n    console.log('üîß Inizializzazione wallet aziendali...');\n\n    // Get companies\n    const [companies] = await connection.execute('SELECT id, name FROM companies ORDER BY name');\n    console.log(`üìã Trovate ${companies.length} aziende`);\n\n    // Create wallets for all companies\n    for (const company of companies) {\n      const initialBalance = Math.floor(Math.random() * 500) + 50; // Random balance between 50-550\n      \n      // Create wallet\n      await connection.execute(`\n        INSERT INTO company_wallets (company_id, balance, created_at, updated_at) \n        VALUES (?, ?, NOW(), NOW())\n        ON DUPLICATE KEY UPDATE balance = VALUES(balance), updated_at = NOW()\n      `, [company.id, initialBalance]);\n\n      // Create initial transaction\n      await connection.execute(`\n        INSERT INTO wallet_transactions (company_id, amount, transaction_type, description, created_by, created_at)\n        VALUES (?, ?, 'ricarica', ?, '-6sQhFmE-PqZD2qoRXcw4', NOW())\n      `, [company.id, initialBalance, `Ricarica iniziale wallet ${company.name}`]);\n\n      console.log(`üí∞ Wallet creato per ${company.name}: ${initialBalance} crediti`);\n    }\n\n    console.log('‚úÖ Inizializzazione wallet completata!');\n  } catch (error) {\n    console.error('‚ùå Errore inizializzazione:', error);\n  } finally {\n    await connection.end();\n  }\n}\n\ninitWallets();","size_bytes":1669},"manual-wallet-init.js":{"content":"// Script per inizializzare wallet usando le API interne\nasync function initWallets() {\n  console.log('üîß Inizializzazione wallet via API interne...');\n  \n  try {\n    // Login come admin\n    const response = await fetch('http://localhost:5000/api/auth/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username: 'admin', password: 'admin123' })\n    });\n    \n    const { token } = await response.json();\n    console.log('‚úÖ Login effettuato');\n    \n    // Lista aziende per creare wallet\n    const companies = [\n      { id: '308adb19-7977-48fc-9667-2a104a56d981', name: 'Cmh', credits: 150 },\n      { id: 'cf41b7dc-c2f6-4974-907f-ae2d0df9cfc6', name: 'Dylog', credits: 320 },\n      { id: '14c1d823-626d-4ade-ad1d-61af0671034f', name: 'Shadow', credits: 75 }\n    ];\n    \n    for (const company of companies) {\n      // Crea wallet con ricarica\n      const rechargeRes = await fetch(`http://localhost:5000/api/wallet/${company.id}/recharge`, {\n        method: 'POST',\n        headers: { \n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ amount: company.credits })\n      });\n      \n      if (rechargeRes.ok) {\n        console.log(`üí∞ Wallet ${company.name}: ${company.credits} crediti`);\n      } else {\n        const error = await rechargeRes.text();\n        console.log(`‚ùå Errore ${company.name}: ${error}`);\n      }\n    }\n    \n    console.log('‚úÖ Inizializzazione completata!');\n  } catch (error) {\n    console.error('‚ùå Errore:', error.message);\n  }\n}\n\ninitWallets();","size_bytes":1625},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"qlm-registration-example.js":{"content":"\n/**\n * Esempio di implementazione per la registrazione automatica\n * del software nella piattaforma QLM Register\n */\n\nclass QLMRegistration {\n  constructor(config) {\n    this.apiBaseUrl = config.apiBaseUrl || 'https://your-qlm-platform.replit.app';\n    this.nomeAzienda = config.nomeAzienda;\n    this.partitaIva = config.partitaIva;\n    this.nomeSoftware = config.nomeSoftware;\n    this.versione = config.versione;\n    this.installationPath = config.installationPath;\n  }\n\n  /**\n   * Genera una chiave univoca per il dispositivo\n   */\n  generateComputerKey() {\n    const timestamp = Date.now();\n    const random = Math.random().toString(36).substr(2, 9).toUpperCase();\n    const machineId = this.getMachineIdentifier();\n    return `${this.nomeSoftware.replace(/\\s/g, '')}-${machineId}-${random}`;\n  }\n\n  /**\n   * Ottiene un identificativo del dispositivo\n   */\n  getMachineIdentifier() {\n    // Implementa la logica per ottenere un ID univoco del dispositivo\n    // Esempi: MAC address, Windows Machine GUID, etc.\n    return 'MACHINE001'; // Placeholder\n  }\n\n  /**\n   * Ottiene informazioni sul sistema\n   */\n  getMachineInfo() {\n    // Implementa la logica per ottenere info sul sistema\n    return `${process.platform} - ${process.arch}`;\n  }\n\n  /**\n   * Registra il software nella piattaforma QLM\n   */\n  async registerSoftware() {\n    const computerKey = this.generateComputerKey();\n    \n    const payload = {\n      nomeAzienda: this.nomeAzienda,\n      partitaIva: this.partitaIva,\n      nomeSoftware: this.nomeSoftware,\n      versione: this.versione,\n      computerKey: computerKey,\n      installationPath: this.installationPath,\n      machineInfo: this.getMachineInfo(),\n      registrationDate: new Date().toISOString()\n    };\n\n    try {\n      console.log('üîÑ Registrando software presso QLM...', {\n        software: this.nomeSoftware,\n        azienda: this.nomeAzienda,\n        computerKey: computerKey\n      });\n\n      const response = await fetch(`${this.apiBaseUrl}/api/software/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': `${this.nomeSoftware}-Registration/1.0`\n        },\n        body: JSON.stringify(payload)\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        console.log('‚úÖ Registrazione QLM completata:', result);\n        \n        // Salva la computer key per usi futuri\n        this.saveComputerKey(computerKey);\n        \n        return {\n          success: true,\n          data: result,\n          computerKey: computerKey\n        };\n      } else {\n        const error = await response.text();\n        console.error('‚ùå Errore registrazione QLM:', response.status, error);\n        \n        return {\n          success: false,\n          error: `HTTP ${response.status}: ${error}`\n        };\n      }\n    } catch (error) {\n      console.error('üö® Errore di rete durante registrazione QLM:', error);\n      \n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\n   * Salva la computer key per utilizzi futuri\n   */\n  saveComputerKey(computerKey) {\n    // Implementa la logica per salvare la chiave\n    // Esempi: registry di Windows, file di configurazione, etc.\n    console.log('üíæ Salvataggio computer key:', computerKey);\n  }\n\n  /**\n   * Carica la computer key salvata\n   */\n  loadComputerKey() {\n    // Implementa la logica per caricare la chiave salvata\n    return null; // Placeholder\n  }\n\n  /**\n   * Valida la licenza presso QLM (chiamata separata dopo registrazione)\n   */\n  async validateLicense() {\n    const computerKey = this.loadComputerKey();\n    if (!computerKey) {\n      console.log('‚ö†Ô∏è Computer key non trovata, registrazione necessaria');\n      return { authorized: false, needsRegistration: true };\n    }\n\n    try {\n      console.log('üîç Verifica stato licenza per computer key:', computerKey);\n\n      const response = await fetch(`${this.apiBaseUrl}/api/software/validate`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'User-Agent': `${this.nomeSoftware}-Validation/1.0`\n        },\n        body: JSON.stringify({\n          partitaIva: this.partitaIva,\n          nomeSoftware: this.nomeSoftware,\n          computerKey: computerKey,\n          machineInfo: this.getMachineInfo()\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        \n        if (result.success && result.deviceAuthorized) {\n          console.log('‚úÖ Licenza valida:', {\n            validityDays: result.licenseValidityDays,\n            licenseType: result.licenseType,\n            message: result.message\n          });\n          \n          return {\n            authorized: true,\n            validityDays: result.licenseValidityDays,\n            licenseType: result.licenseType,\n            maxDevices: result.maxDevices,\n            maxUsers: result.maxUsers,\n            needsRegistration: false,\n            message: result.message\n          };\n        } else {\n          console.log('‚ùå Licenza non valida:', result.message);\n          \n          return {\n            authorized: false,\n            validityDays: 0,\n            needsRegistration: false,\n            message: result.message\n          };\n        }\n      } else {\n        console.error('‚ùå Errore validazione licenza:', response.status);\n        return {\n          authorized: false,\n          validityDays: 0,\n          needsRegistration: false,\n          message: `Errore HTTP ${response.status}`\n        };\n      }\n    } catch (error) {\n      console.error('üö® Errore di rete durante validazione:', error);\n      return {\n        authorized: false,\n        validityDays: 0,\n        needsRegistration: false,\n        message: 'Errore di connessione al server di validazione'\n      };\n    }\n  }\n}\n\n// Esempio di utilizzo\nasync function initializeQLMRegistration() {\n  const qlm = new QLMRegistration({\n    apiBaseUrl: 'https://your-qlm-platform.replit.app',\n    nomeAzienda: 'Esempio SRL',\n    partitaIva: '12345678901',\n    nomeSoftware: 'MioSoftware Pro',\n    versione: '2.1.0',\n    installationPath: 'C:\\\\Program Files\\\\MioSoftware\\\\'\n  });\n\n  // Verifica se √® gi√† registrato\n  const licenseStatus = await qlm.checkLicenseStatus();\n  \n  if (licenseStatus.needsRegistration) {\n    // Esegui registrazione\n    const registrationResult = await qlm.registerSoftware();\n    \n    if (registrationResult.success) {\n      console.log('üéâ Software registrato con successo!');\n      console.log('Computer Key:', registrationResult.computerKey);\n    } else {\n      console.error('üí• Registrazione fallita:', registrationResult.error);\n    }\n  } else {\n    console.log('‚ÑπÔ∏è Software gi√† registrato');\n  }\n}\n\n// Avvia la registrazione all'avvio del software\ninitializeQLMRegistration().catch(console.error);\n\nmodule.exports = QLMRegistration;\n","size_bytes":6889},"qlm-validation-api-docs.md":{"content":"\n# QLM License Validation API\n\n## Endpoint di Validazione Licenza\n\n### POST /api/software/validate\n\nVerifica la validit√† di una licenza e l'autorizzazione del dispositivo.\n\n#### Headers\n```\nContent-Type: application/json\nUser-Agent: NomeSoftware-Validation/1.0\n```\n\n#### Request Body\n```json\n{\n  \"partitaIva\": \"12345678901\",\n  \"nomeSoftware\": \"MioSoftware Pro\", \n  \"computerKey\": \"COMP-1234567890-ABC123DEF\",\n  \"machineInfo\": \"Windows 10 Pro - DESKTOP-ABC123\"\n}\n```\n\n#### Parametri Richiesti\n- `partitaIva`: Partita IVA dell'azienda registrata\n- `nomeSoftware`: Nome del software che richiede validazione\n- `computerKey`: Chiave univoca del dispositivo (ottenuta durante registrazione)\n- `machineInfo`: Informazioni sul sistema operativo e hardware (opzionale)\n\n---\n\n## Risposte API\n\n### 1. Licenza Valida e Dispositivo Autorizzato ‚úÖ\n```json\n{\n  \"success\": true,\n  \"deviceAuthorized\": true,\n  \"licenseValidityDays\": 365,\n  \"licenseType\": \"abbonamento_annuale\",\n  \"maxDevices\": 5,\n  \"maxUsers\": 10,\n  \"activationKey\": \"LIC-12345678-ABCDEF12\",\n  \"message\": \"Licenza valida per 365 giorni\"\n}\n```\n\n### 2. Licenza Permanente Valida ‚úÖ\n```json\n{\n  \"success\": true,\n  \"deviceAuthorized\": true,\n  \"licenseValidityDays\": -1,\n  \"licenseType\": \"permanente\",\n  \"maxDevices\": 1,\n  \"maxUsers\": 1,\n  \"activationKey\": \"LIC-87654321-FEDCBA98\",\n  \"message\": \"Licenza permanente valida\"\n}\n```\n\n### 3. Dispositivo Non Autorizzato ‚ùå\n```json\n{\n  \"success\": false,\n  \"deviceAuthorized\": false,\n  \"licenseValidityDays\": 0,\n  \"message\": \"Dispositivo non autorizzato per questa licenza\"\n}\n```\n\n### 4. Licenza Scaduta ‚ùå\n```json\n{\n  \"success\": false,\n  \"deviceAuthorized\": false,\n  \"licenseValidityDays\": 0,\n  \"message\": \"Licenza scaduta\"\n}\n```\n\n### 5. Azienda Non Registrata ‚ùå\n```json\n{\n  \"success\": false,\n  \"deviceAuthorized\": false,\n  \"licenseValidityDays\": 0,\n  \"message\": \"Azienda non registrata nel sistema\"\n}\n```\n\n### 6. Nessuna Licenza Assegnata ‚ùå\n```json\n{\n  \"success\": false,\n  \"deviceAuthorized\": false,\n  \"licenseValidityDays\": 0,\n  \"message\": \"Nessuna licenza assegnata per questa azienda\"\n}\n```\n\n### 7. Licenza Non Attiva ‚ùå\n```json\n{\n  \"success\": false,\n  \"deviceAuthorized\": false,\n  \"licenseValidityDays\": 0,\n  \"message\": \"Licenza non attiva (stato: sospesa)\"\n}\n```\n\n---\n\n## Codici di Stato HTTP\n\n- **200 OK**: Richiesta elaborata correttamente (controllare `success` nel body)\n- **400 Bad Request**: Parametri mancanti o non validi\n- **500 Internal Server Error**: Errore del server\n\n---\n\n## Logica di Validazione\n\n1. **Verifica Registrazione**: Controlla se l'azienda √® registrata\n2. **Verifica Licenza**: Controlla se c'√® una licenza assegnata\n3. **Verifica Stato**: Controlla se la licenza √® attiva\n4. **Verifica Dispositivo**: Controlla se il computerKey √® autorizzato\n5. **Verifica Scadenza**: Calcola i giorni rimanenti di validit√†\n6. **Aggiorna Accesso**: Registra l'ultimo accesso del dispositivo\n\n---\n\n## Note Implementative\n\n- Le licenze permanenti restituiscono `licenseValidityDays: -1`\n- Il campo `deviceAuthorized` indica se il dispositivo specifico pu√≤ usare la licenza\n- `maxDevices` e `maxUsers` indicano i limiti della licenza\n- La validazione aggiorna automaticamente il `dataUltimoAccesso` del dispositivo\n- Usa HTTPS in produzione per proteggere le chiavi di licenza\n\n---\n\n## Frequenza Consigliata\n\n- **All'avvio**: Sempre validare all'avvio del software\n- **Periodica**: Ogni 24 ore per licenze attive\n- **Prima di funzioni critiche**: Per funzionalit√† che richiedono licenza valida\n- **Dopo lungo periodo offline**: Se il software √® stato offline per pi√π di 7 giorni\n","size_bytes":3603},"replit.md":{"content":"# License Management Platform (QLM-Style)\n\n## Overview\nThis is a software license management platform inspired by Quick License Manager (QLM), designed to handle license activation, client management, and multi-tier organizational structures. The system provides a comprehensive solution for managing software licenses with support for different license types (permanent, trial, subscription), device binding, and hierarchical user roles (superadmin, resellers, agents, clients). The platform features a React-based frontend with a clean dashboard interface and an Express.js backend with RESTful APIs for license operations, client management, and analytics. The business vision is to provide a robust, scalable license management solution, enabling centralized control over product pricing and consistent license provisioning for companies, with market potential in various software industries.\n\n## User Preferences\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React with TypeScript**: Modern component-based UI using functional components and hooks.\n- **Styling**: Tailwind CSS with shadcn/ui components for a consistent design system.\n- **State Management**: TanStack Query for server state management and caching.\n- **Routing**: Wouter for lightweight client-side routing.\n- **Authentication**: JWT token-based authentication with localStorage persistence.\n- **Form Handling**: React Hook Form with Zod validation schemas.\n\n### Backend Architecture\n- **Express.js Server**: RESTful API server with middleware for authentication and logging.\n- **Authentication**: JWT tokens with bcrypt password hashing.\n- **Database Layer**: Custom database abstraction over MySQL with connection pooling.\n- **API Structure**: Organized routes for licenses, clients, products, and dashboard analytics.\n- **Error Handling**: Centralized error middleware with proper HTTP status codes.\n\n### Database Design\nThe system uses a relational database structure with key entities including:\n- **Users**: Authentication and role management (superadmin, rivenditore, agente, cliente).\n- **Companies**: Hierarchical organization structure with parent-child relationships.\n- **Products**: Software products with version and license type support, now including product-level pricing (price, discount, license_type, max_users, max_devices, trial_days).\n- **Modules**: Product features/modules for granular licensing.\n- **Clients**: End-user client management.\n- **Licenses**: Core license records with activation keys and device binding, inheriting pricing from products.\n- **Transactions**: Financial transaction tracking for renewals and purchases.\n- **Logs**: Activity and access logging.\n- **Agents**: Company representatives/salespeople.\n- **Testa_Reg_Azienda**: Company registration header with license assignment capability.\n- **Dett_Reg_Azienda**: Device registration details with individual Computer Key authorization per device.\n- **Wallet**: Company wallet system for credit-based license renewals and transactions.\n\n### Key Features\n- **Multi-tier Role System**: Supports superadmin, resellers, agents, and end clients with appropriate data visibility, including hierarchical filtering for admin users.\n- **License Types**: Permanent, trial/demo, and subscription licenses with comprehensive expiration handling and automatic renewal processing.\n- **Device Management**: One-to-many relationship between licenses and devices with individual Computer Key authorization.\n- **Centralized Product Pricing**: Pricing configuration is managed at the product level by superadmins, ensuring consistency across all licenses.\n- **Wallet System**: Credit-based system for license renewals, integrated with Stripe for recharging, and comprehensive transaction tracking.\n- **Automatic Renewal System**: Processes active subscription licenses daily, generating renewal transactions and updating expiry dates.\n- **Activation System**: Online and offline license activation with device-specific computer key generation.\n- **Hierarchical Company Tree**: Visual tree structure showing parent-child company relationships.\n- **Software Registration System**: Anonymous endpoint for automatic software registration from client installations, with an admin interface for viewing, filtering, and classifying registrations and authorizing devices.\n- **Payment Management**: Ability to generate payment links, manage payment status, and filter/report payments.\n\n### Security Considerations\n- JWT-based authentication with configurable secret.\n- Password hashing using bcrypt.\n- Role-based access control with middleware protection.\n- SQL injection protection through parameterized queries.\n- CORS and security headers implementation.\n\n## External Dependencies\n\n### Database\n- **MySQL**: Primary database using mysql2 driver with connection pooling.\n- **Drizzle ORM**: Used for schema definition and migration management.\n\n### Authentication & Security\n- **bcrypt**: Password hashing and verification.\n- **jsonwebtoken**: JWT token generation and validation.\n- **express-session**: Session management capabilities.\n\n### Payment Gateway\n- **Stripe**: Integrated for wallet recharging functionality and payment processing.\n\n### Frontend Libraries\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives.\n- **@tanstack/react-query**: Server state management and caching.\n- **tailwindcss**: Utility-first CSS framework.\n- **wouter**: Lightweight routing library.\n- **date-fns**: Date manipulation utilities.\n\n### Development Tools\n- **Vite**: Fast build tool and development server.\n- **TypeScript**: Type safety across the entire stack.\n- **ESBuild**: Fast JavaScript bundler for production builds.\n- **@replit/vite-plugin-***: Replit-specific development enhancements.","size_bytes":5813},"simulate_software_registrations.js":{"content":"#!/usr/bin/env node\n\n/**\n * Script per simulare registrazioni software tramite API QLM\n * Popola le tabelle Testa_Reg_Azienda e Dett_Reg_Azienda\n */\n\nimport fetch from 'node-fetch';\n\n// Configurazione\nconst API_BASE = 'http://localhost:5000';\nconst ENDPOINT = '/api/software/register';\n\n// Dati di test per simulare diverse aziende e software\nconst testData = [\n  {\n    nomeAzienda: 'TechCorp Italia SpA',\n    partitaIva: '12345678901',\n    nomeSoftware: 'QLM Management Suite',\n    versione: '3.2.1',\n    installationPath: 'C:\\\\Program Files\\\\QLM\\\\Management',\n    devices: [\n      { computerKey: 'TCORP-WS001-ABC123', machineInfo: 'Windows 11 Pro - Workstation Marketing' },\n      { computerKey: 'TCORP-SRV001-DEF456', machineInfo: 'Windows Server 2022 - Database Server' }\n    ]\n  },\n  {\n    nomeAzienda: 'Innovazione Digitale Srl',\n    partitaIva: '09876543210',\n    nomeSoftware: 'CAD Professional',\n    versione: '2024.1',\n    installationPath: 'C:\\\\Program Files\\\\AutoCAD\\\\2024',\n    devices: [\n      { computerKey: 'INNOV-CAD01-GHI789', machineInfo: 'Windows 10 Pro - CAD Workstation 1' },\n      { computerKey: 'INNOV-CAD02-JKL012', machineInfo: 'Windows 10 Pro - CAD Workstation 2' },\n      { computerKey: 'INNOV-LAP01-MNO345', machineInfo: 'Windows 11 Pro - Laptop Designer' }\n    ]\n  },\n  {\n    nomeAzienda: 'Studio Legale Rossi & Associati',\n    partitaIva: '11223344556',\n    nomeSoftware: 'LegalSoft Pro',\n    versione: '8.5.2',\n    installationPath: 'C:\\\\Program Files\\\\LegalSoft\\\\Pro',\n    devices: [\n      { computerKey: 'LEGAL-PC01-PQR678', machineInfo: 'Windows 11 Pro - Avv. Rossi' },\n      { computerKey: 'LEGAL-PC02-STU901', machineInfo: 'Windows 10 Pro - Segreteria' }\n    ]\n  },\n  {\n    nomeAzienda: 'Manifattura Metalli SpA',\n    partitaIva: '55667788990',\n    nomeSoftware: 'Industrial Control System',\n    versione: '12.3',\n    installationPath: 'C:\\\\ICS\\\\Production',\n    devices: [\n      { computerKey: 'METAL-CTRL01-VWX234', machineInfo: 'Windows 10 IoT - Production Line 1' },\n      { computerKey: 'METAL-CTRL02-YZA567', machineInfo: 'Windows 10 IoT - Production Line 2' },\n      { computerKey: 'METAL-OFFICE-BCD890', machineInfo: 'Windows 11 Pro - Production Manager' }\n    ]\n  },\n  {\n    nomeAzienda: 'Farmacia Centrale',\n    partitaIva: '99887766554',\n    nomeSoftware: 'PharmacyManager Plus',\n    versione: '7.1.4',\n    installationPath: 'C:\\\\Program Files\\\\PharmacyManager',\n    devices: [\n      { computerKey: 'PHARM-POS01-EFG123', machineInfo: 'Windows 10 Pro - Cassa 1' },\n      { computerKey: 'PHARM-POS02-HIJ456', machineInfo: 'Windows 10 Pro - Cassa 2' },\n      { computerKey: 'PHARM-BACK-KLM789', machineInfo: 'Windows 11 Pro - Gestione Magazzino' }\n    ]\n  },\n  {\n    nomeAzienda: 'Costruzioni Moderne Srl',\n    partitaIva: '33445566778',\n    nomeSoftware: 'Building Information Modeling',\n    versione: '2024.2',\n    installationPath: 'C:\\\\Program Files\\\\Autodesk\\\\BIM',\n    devices: [\n      { computerKey: 'BUILD-ARCH01-NOP012', machineInfo: 'Windows 11 Pro - Architetto Capo' },\n      { computerKey: 'BUILD-ENG01-QRS345', machineInfo: 'Windows 10 Pro - Ingegnere Strutturale' }\n    ]\n  },\n  {\n    nomeAzienda: 'Logistica Express',\n    partitaIva: '77889900112',\n    nomeSoftware: 'Fleet Management System',\n    versione: '5.8.1',\n    installationPath: 'C:\\\\FleetMgmt\\\\System',\n    devices: [\n      { computerKey: 'FLEET-HQ01-TUV678', machineInfo: 'Windows 11 Pro - Centrale Operativa' },\n      { computerKey: 'FLEET-TAB01-WXY901', machineInfo: 'Windows 10 Pro - Tablet Dispatcher' }\n    ]\n  },\n  {\n    nomeAzienda: 'Agenzia Marketing Plus',\n    partitaIva: '22334455667',\n    nomeSoftware: 'Creative Suite Professional',\n    versione: '2024.1.1',\n    installationPath: 'C:\\\\Program Files\\\\Adobe\\\\CreativeSuite',\n    devices: [\n      { computerKey: 'MKTG-DES01-ZAB234', machineInfo: 'Windows 11 Pro - Graphic Designer' },\n      { computerKey: 'MKTG-DES02-CDE567', machineInfo: 'Windows 11 Pro - Video Editor' },\n      { computerKey: 'MKTG-LAP01-FGH890', machineInfo: 'MacBook Pro M3 - Creative Director' }\n    ]\n  }\n];\n\n// Funzione per effettuare una registrazione software\nasync function registerSoftware(companyData, device) {\n  const payload = {\n    nomeAzienda: companyData.nomeAzienda,\n    partitaIva: companyData.partitaIva,\n    nomeSoftware: companyData.nomeSoftware,\n    versione: companyData.versione,\n    computerKey: device.computerKey,\n    installationPath: companyData.installationPath,\n    machineInfo: device.machineInfo,\n    registrationDate: new Date().toISOString()\n  };\n\n  try {\n    console.log(`üì° Registrando: ${companyData.nomeAzienda} - ${device.computerKey}`);\n    \n    const response = await fetch(`${API_BASE}${ENDPOINT}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'QLM-Software-Registration-Simulator/1.0'\n      },\n      body: JSON.stringify(payload)\n    });\n\n    if (response.ok) {\n      const result = await response.json();\n      console.log(`‚úÖ Registrazione completata: ID ${result.testaId}/${result.dettId}`);\n      return { success: true, data: result };\n    } else {\n      const error = await response.text();\n      console.log(`‚ùå Errore registrazione: ${response.status} - ${error}`);\n      return { success: false, error: `${response.status}: ${error}` };\n    }\n  } catch (error) {\n    console.log(`üö® Errore di rete: ${error.message}`);\n    return { success: false, error: error.message };\n  }\n}\n\n// Funzione principale per eseguire tutte le registrazioni\nasync function simulateRegistrations() {\n  console.log('üöÄ Avvio simulazione registrazioni software...\\n');\n  console.log(`üìç Server: ${API_BASE}${ENDPOINT}\\n`);\n\n  let totalRegistrations = 0;\n  let successfulRegistrations = 0;\n  let failedRegistrations = 0;\n\n  // Conta il totale delle registrazioni\n  testData.forEach(company => {\n    totalRegistrations += company.devices.length;\n  });\n\n  console.log(`üìä Totale registrazioni da processare: ${totalRegistrations}\\n`);\n\n  // Esegui le registrazioni\n  for (const company of testData) {\n    console.log(`üè¢ Processando: ${company.nomeAzienda} (P.IVA: ${company.partitaIva})`);\n    console.log(`   Software: ${company.nomeSoftware} v${company.versione}`);\n    console.log(`   Dispositivi: ${company.devices.length}\\n`);\n\n    for (const device of company.devices) {\n      const result = await registerSoftware(company, device);\n      \n      if (result.success) {\n        successfulRegistrations++;\n      } else {\n        failedRegistrations++;\n      }\n\n      // Pausa di 500ms tra le registrazioni per non sovraccaricare il server\n      await new Promise(resolve => setTimeout(resolve, 500));\n    }\n    \n    console.log(''); // Riga vuota tra aziende\n  }\n\n  // Riassunto finale\n  console.log('‚ïê'.repeat(60));\n  console.log('üìà RIASSUNTO SIMULAZIONE');\n  console.log('‚ïê'.repeat(60));\n  console.log(`‚úÖ Registrazioni riuscite: ${successfulRegistrations}`);\n  console.log(`‚ùå Registrazioni fallite: ${failedRegistrations}`);\n  console.log(`üìä Totale processate: ${totalRegistrations}`);\n  console.log(`üéØ Tasso di successo: ${((successfulRegistrations / totalRegistrations) * 100).toFixed(1)}%`);\n  \n  if (successfulRegistrations > 0) {\n    console.log('\\nüéâ Simulazione completata! Puoi ora visualizzare le registrazioni nell\\'interfaccia QLM.');\n    console.log('üìã Le registrazioni sono state salvate nelle tabelle:');\n    console.log('   ‚Ä¢ Testa_Reg_Azienda (informazioni azienda/software)');\n    console.log('   ‚Ä¢ Dett_Reg_Azienda (dettagli dispositivi)');\n  }\n}\n\n// Avvia la simulazione\nsimulateRegistrations().catch(error => {\n  console.error('üö® Errore fatale durante la simulazione:', error);\n  process.exit(1);\n});\n\nexport { simulateRegistrations, registerSoftware };","size_bytes":7764},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/database.ts":{"content":"import mysql from 'mysql2/promise';\n\nconst dbConfig = {\n  host: process.env.DATABASE_HOST || '87.106.247.35',\n  user: process.env.DATABASE_USER || 'ext_replit',\n  password: process.env.DATABASE_PASSWORD || 'Replit@2025',\n  database: process.env.DATABASE_NAME || 'replit_license',\n  charset: 'utf8mb4',\n  timezone: '+00:00',\n  acquireTimeout: 60000,\n  timeout: 60000,\n};\n\nclass Database {\n  private pool: mysql.Pool;\n\n  constructor() {\n    this.pool = mysql.createPool({\n      ...dbConfig,\n      waitForConnections: true,\n      connectionLimit: 10,\n      queueLimit: 0,\n    });\n  }\n\n  async query(sql: string, values?: any[]): Promise<any> {\n    try {\n      const [rows] = await this.pool.execute(sql, values);\n      return rows;\n    } catch (error) {\n      console.error('Database query error:', error);\n      throw error;\n    }\n  }\n\n  async beginTransaction(): Promise<mysql.PoolConnection> {\n    const connection = await this.pool.getConnection();\n    await connection.beginTransaction();\n    return connection;\n  }\n\n  async commitTransaction(connection: mysql.PoolConnection) {\n    await connection.commit();\n    connection.release();\n  }\n\n  async rollbackTransaction(connection: mysql.PoolConnection) {\n    await connection.rollback();\n    connection.release();\n  }\n\n  async initTables() {\n    try {\n      // Create tables if they don't exist\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS users (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          username VARCHAR(255) NOT NULL UNIQUE,\n          password VARCHAR(255) NOT NULL,\n          role VARCHAR(50) NOT NULL,\n          company_id VARCHAR(36),\n          name VARCHAR(255) NOT NULL,\n          email VARCHAR(255) NOT NULL,\n          is_active BOOLEAN DEFAULT TRUE,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS companies (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          name VARCHAR(255) NOT NULL,\n          type VARCHAR(50) NOT NULL,\n          parent_id VARCHAR(36),\n          status VARCHAR(50) DEFAULT 'active',\n          contact_info JSON,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS agents (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          company_id VARCHAR(36) NOT NULL,\n          name VARCHAR(255) NOT NULL,\n          email VARCHAR(255) NOT NULL,\n          phone VARCHAR(50),\n          role VARCHAR(100) DEFAULT 'agente',\n          is_active BOOLEAN DEFAULT TRUE,\n          permissions JSON,\n          territory TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE\n        )\n      `);\n\n      // Create categories table\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS categories (\n          id VARCHAR(36) PRIMARY KEY,\n          name VARCHAR(255) NOT NULL,\n          description TEXT,\n          color VARCHAR(7) DEFAULT '#3B82F6',\n          is_active BOOLEAN DEFAULT TRUE,\n          company_id VARCHAR(36),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE SET NULL\n        )\n      `);\n\n      // Check and add company_id column to categories table if it doesn't exist\n      try {\n        const columnExists = await this.query(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'categories' AND COLUMN_NAME = 'company_id'`);\n        if (columnExists.length === 0) {\n          await this.query(`ALTER TABLE categories ADD COLUMN company_id VARCHAR(36)`);\n          console.log('‚úÖ Added company_id column to categories table');\n        }\n      } catch (e: any) { \n\n      }\n\n      // Remove old unique constraint if it exists and add proper unique constraint\n      try {\n        // Check if the old constraint exists\n        const constraintExists = await this.query(`\n          SELECT CONSTRAINT_NAME \n          FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE \n          WHERE TABLE_NAME = 'categories' \n          AND CONSTRAINT_NAME = 'unique_name_per_company'\n        `);\n        \n        if (constraintExists.length > 0) {\n          await this.query(`ALTER TABLE categories DROP INDEX unique_name_per_company`);\n          console.log('‚úÖ Removed old unique constraint from categories table');\n        }\n      } catch (e: any) { \n        console.log('‚ö†Ô∏è  Error removing old constraint:', e.message);\n      }\n\n      // Create products table with new pricing fields and category reference\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS products (\n          id VARCHAR(36) PRIMARY KEY,\n          name TEXT NOT NULL,\n          version TEXT NOT NULL,\n          description TEXT,\n          category_id VARCHAR(36),\n          price DECIMAL(10, 2) NOT NULL DEFAULT 0,\n          discount DECIMAL(5, 2) DEFAULT 0,\n          license_type VARCHAR(50) NOT NULL DEFAULT 'permanente',\n          max_users INT DEFAULT 1,\n          max_devices INT DEFAULT 1,\n          trial_days INT DEFAULT 30,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE SET NULL\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS modules (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          product_id VARCHAR(36) NOT NULL,\n          name VARCHAR(255) NOT NULL,\n          description TEXT,\n          base_price DECIMAL(10,2)\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS clients (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          company_id VARCHAR(36),\n          name VARCHAR(255) NOT NULL,\n          email VARCHAR(255) NOT NULL,\n          status VARCHAR(50) DEFAULT 'pending',\n          contact_info JSON,\n          is_multi_site BOOLEAN DEFAULT FALSE,\n          is_multi_user BOOLEAN DEFAULT FALSE,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS licenses (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          client_id VARCHAR(36) NOT NULL,\n          product_id VARCHAR(36) NOT NULL,\n          activation_key VARCHAR(255) NOT NULL UNIQUE,\n          computer_key VARCHAR(255),\n          activation_date TIMESTAMP,\n          expiry_date TIMESTAMP,\n          license_type VARCHAR(50) NOT NULL,\n          status VARCHAR(50) DEFAULT 'pending',\n          max_users INT DEFAULT 1,\n          max_devices INT DEFAULT 1,\n          price DECIMAL(10,2),\n          discount DECIMAL(5,2) DEFAULT 0,\n          active_modules JSON,\n          assigned_company VARCHAR(36),\n          assigned_agent VARCHAR(36),\n          renewal_enabled BOOLEAN DEFAULT FALSE,\n          renewal_period VARCHAR(20),\n          trial_days INT DEFAULT 30,\n          notes TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS transactions (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          license_id VARCHAR(36) NOT NULL,\n          client_id VARCHAR(36),\n          company_id VARCHAR(36),\n          type VARCHAR(50) NOT NULL,\n          amount DECIMAL(10,2) NOT NULL,\n          discount DECIMAL(10,2) DEFAULT 0.00,\n          final_amount DECIMAL(10,2) NOT NULL,\n          payment_method VARCHAR(100),\n          status VARCHAR(50) DEFAULT 'in_attesa',\n          payment_link TEXT,\n          payment_date TIMESTAMP NULL,\n          notes TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        )\n      `);\n\n      // Check and add columns to transactions table only if they don't exist\n      const transactionColumns = ['client_id', 'company_id', 'discount', 'final_amount', 'payment_link', 'payment_date', 'updated_at', 'modified_by', 'credits_used'];\n      for (const column of transactionColumns) {\n        try {\n          const columnExists = await this.query(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transactions' AND COLUMN_NAME = ?`, [column]);\n          if (columnExists.length === 0) {\n            switch (column) {\n              case 'client_id':\n                await this.query(`ALTER TABLE transactions ADD COLUMN client_id VARCHAR(36)`);\n                break;\n              case 'company_id':\n                await this.query(`ALTER TABLE transactions ADD COLUMN company_id VARCHAR(36)`);\n                break;\n              case 'discount':\n                await this.query(`ALTER TABLE transactions ADD COLUMN discount DECIMAL(10,2) DEFAULT 0.00`);\n                break;\n              case 'final_amount':\n                await this.query(`ALTER TABLE transactions ADD COLUMN final_amount DECIMAL(10,2) NOT NULL DEFAULT 0.00`);\n                break;\n              case 'payment_link':\n                await this.query(`ALTER TABLE transactions ADD COLUMN payment_link TEXT`);\n                break;\n              case 'payment_date':\n                await this.query(`ALTER TABLE transactions ADD COLUMN payment_date TIMESTAMP NULL`);\n                break;\n              case 'updated_at':\n                await this.query(`ALTER TABLE transactions ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP`);\n                break;\n              case 'modified_by':\n                await this.query(`ALTER TABLE transactions ADD COLUMN modified_by VARCHAR(36)`);\n                break;\n              case 'credits_used':\n                await this.query(`ALTER TABLE transactions ADD COLUMN credits_used DECIMAL(10,2) DEFAULT 0.00`);\n                break;\n            }\n          }\n        } catch (e: any) { \n          console.log(`Error checking/adding column ${column}:`, e.message);\n        }\n      }\n\n      // Check and add columns to licenses table only if they don't exist\n      const licenseColumns = ['renewal_enabled', 'renewal_period', 'trial_days', 'notes'];\n      for (const column of licenseColumns) {\n        try {\n          const columnExists = await this.query(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'licenses' AND COLUMN_NAME = ?`, [column]);\n          if (columnExists.length === 0) {\n            switch (column) {\n              case 'renewal_enabled':\n                await this.query(`ALTER TABLE licenses ADD COLUMN renewal_enabled BOOLEAN DEFAULT FALSE`);\n                break;\n              case 'renewal_period':\n                await this.query(`ALTER TABLE licenses ADD COLUMN renewal_period VARCHAR(20)`);\n                break;\n              case 'trial_days':\n                await this.query(`ALTER TABLE licenses ADD COLUMN trial_days INT DEFAULT 30`);\n                break;\n              case 'notes':\n                await this.query(`ALTER TABLE licenses ADD COLUMN notes TEXT`);\n                break;\n            }\n          }\n        } catch (e: any) { \n          console.log(`Error checking/adding license column ${column}:`, e.message);\n        }\n      }\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS activation_logs (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          license_id VARCHAR(36) NOT NULL,\n          key_type VARCHAR(50) NOT NULL,\n          device_info JSON,\n          ip_address VARCHAR(45),\n          user_agent TEXT,\n          result VARCHAR(50) NOT NULL,\n          error_message TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS access_logs (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          user_id VARCHAR(36) NOT NULL,\n          action VARCHAR(255) NOT NULL,\n          resource VARCHAR(255),\n          ip_address VARCHAR(45),\n          user_agent TEXT,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n        )\n      `);\n\n      // New device registration tables\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS Testa_Reg_Azienda (\n          PartitaIva VARCHAR(20) NOT NULL PRIMARY KEY,\n          NomeAzienda VARCHAR(255) NOT NULL,\n          Prodotto VARCHAR(255) NOT NULL,\n          Versione VARCHAR(50),\n          Modulo VARCHAR(255),\n          Utenti INT DEFAULT 0,\n          TotDispositivi INT DEFAULT 0,\n          ID_Licenza VARCHAR(36),\n          TotOrdini INT DEFAULT 0,\n          TotVendite DECIMAL(15,2) DEFAULT 0.00,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP\n        )\n      `);\n\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS Dett_Reg_Azienda (\n          ID INT AUTO_INCREMENT PRIMARY KEY,\n          PartitaIva VARCHAR(20) NOT NULL,\n          UID_Dispositivo VARCHAR(255) NOT NULL,\n          SistemaOperativo VARCHAR(100),\n          Note TEXT,\n          DataAttivazione DATE,\n          DataUltimoAccesso DATETIME,\n          Ordini INT DEFAULT 0,\n          Vendite DECIMAL(15,2) DEFAULT 0.00,\n          Computer_Key VARCHAR(255),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          FOREIGN KEY (PartitaIva) REFERENCES Testa_Reg_Azienda(PartitaIva) ON DELETE CASCADE ON UPDATE CASCADE\n        )\n      `);\n\n      // Remove old software_registrations table if it exists\n      await this.query(`DROP TABLE IF EXISTS software_registrations`).catch(() => {\n        // Table might not exist, ignore error\n      });\n\n      // üí≥ WALLET SYSTEM - Create company wallets table\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS company_wallets (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          company_id VARCHAR(36) NOT NULL UNIQUE,\n          balance DECIMAL(10,2) DEFAULT 0.00,\n          total_recharges DECIMAL(10,2) DEFAULT 0.00,\n          total_spent DECIMAL(10,2) DEFAULT 0.00,\n          last_recharge_date TIMESTAMP NULL,\n          stripe_customer_id VARCHAR(255),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE\n        )\n      `);\n\n      // üìä WALLET TRANSACTIONS - Create wallet transactions table\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS wallet_transactions (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          company_id VARCHAR(36) NOT NULL,\n          type VARCHAR(50) NOT NULL,\n          amount DECIMAL(10,2) NOT NULL,\n          balance_before DECIMAL(10,2) NOT NULL,\n          balance_after DECIMAL(10,2) NOT NULL,\n          description TEXT NOT NULL,\n          related_entity_type VARCHAR(50),\n          related_entity_id VARCHAR(36),\n          from_company_id VARCHAR(36),\n          to_company_id VARCHAR(36),\n          stripe_payment_intent_id VARCHAR(255),\n          created_by VARCHAR(36),\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          FOREIGN KEY (company_id) REFERENCES companies(id) ON DELETE CASCADE,\n          FOREIGN KEY (from_company_id) REFERENCES companies(id) ON DELETE SET NULL,\n          FOREIGN KEY (to_company_id) REFERENCES companies(id) ON DELETE SET NULL,\n          FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL\n        )\n      `);\n\n      // Credits support already handled above in the column check loop\n\n      // Check if supported_license_types column exists before dropping it\n      try {\n        const columnExists = await this.query(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'products' AND COLUMN_NAME = 'supported_license_types'`);\n        if (columnExists.length > 0) {\n          await this.query(`ALTER TABLE products DROP COLUMN supported_license_types`);\n          console.log('‚úÖ Rimossa colonna supported_license_types dalla tabella products');\n        } else {\n  \n        }\n      } catch (e: any) { \n        console.log('‚ö†Ô∏è  Errore controllo/rimozione colonna supported_license_types:', e.message);\n      }\n\n      // üèóÔ∏è ARCHITECTURAL MIGRATION: Add pricing fields and category_id to products\n      const productColumns = ['price', 'discount', 'license_type', 'max_users', 'max_devices', 'trial_days', 'category_id'];\n      for (const column of productColumns) {\n        try {\n          const columnExists = await this.query(`SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'products' AND COLUMN_NAME = ?`, [column]);\n          if (columnExists.length === 0) {\n            switch (column) {\n              case 'price':\n                await this.query(`ALTER TABLE products ADD COLUMN price DECIMAL(10,2) NOT NULL DEFAULT 0.00`);\n                break;\n              case 'discount':\n                await this.query(`ALTER TABLE products ADD COLUMN discount DECIMAL(5,2) DEFAULT 0.00`);\n                break;\n              case 'license_type':\n                await this.query(`ALTER TABLE products ADD COLUMN license_type VARCHAR(50) NOT NULL DEFAULT 'permanente'`);\n                break;\n              case 'max_users':\n                await this.query(`ALTER TABLE products ADD COLUMN max_users INT DEFAULT 1`);\n                break;\n              case 'max_devices':\n                await this.query(`ALTER TABLE products ADD COLUMN max_devices INT DEFAULT 1`);\n                break;\n              case 'trial_days':\n                await this.query(`ALTER TABLE products ADD COLUMN trial_days INT DEFAULT 30`);\n                break;\n              case 'category_id':\n                await this.query(`ALTER TABLE products ADD COLUMN category_id VARCHAR(36)`);\n                break;\n            }\n          }\n        } catch (e: any) { \n          console.log(`Error checking/adding product column ${column}:`, e.message);\n        }\n      }\n\n      // üîß SYSTEM CONFIG - Create system configuration table\n      await this.query(`\n        CREATE TABLE IF NOT EXISTS system_config (\n          id VARCHAR(36) PRIMARY KEY DEFAULT (UUID()),\n          config_key VARCHAR(255) UNIQUE NOT NULL,\n          config_value TEXT NOT NULL,\n          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n          updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          created_by VARCHAR(36),\n          updated_by VARCHAR(36),\n          FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL,\n          FOREIGN KEY (updated_by) REFERENCES users(id) ON DELETE SET NULL\n        )\n      `);\n\n\n    } catch (error) {\n      console.error('Error initializing database tables:', error);\n      throw error;\n    }\n  }\n}\n\nexport const database = new Database();","size_bytes":18750},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport registerRoutes from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { database } from \"./database\";\nimport { startAutomaticRenewalScheduler } from \"./license-utils\";\nimport { storage } from \"./storage\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Request logging middleware (simplified for production)\napp.use((req, res, next) => {\n  const start = Date.now();\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.path.startsWith(\"/api\") && process.env.NODE_ENV === 'development') {\n      log(`${req.method} ${req.path} ${res.statusCode} ${duration}ms`);\n    }\n  });\n  next();\n});\n\n(async () => {\n  // Initialize database tables\n  try {\n    await database.initTables();\n  } catch (error) {\n    throw error;\n  }\n\n  // Register API routes\n  registerRoutes(app);\n\n  // Start automatic license renewal scheduler\n  startAutomaticRenewalScheduler(storage);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  const server = app.listen(port, \"0.0.0.0\", () => {\n    if (process.env.NODE_ENV === 'development') {\n      log(`serving on port ${port}`);\n    }\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n})();\n","size_bytes":2036},"server/license-utils.ts":{"content":"import type { License, InsertTransaction } from '@shared/schema';\nimport { DatabaseStorage } from './storage';\nimport cron from 'node-cron';\n\n/**\n * Calcola la data di scadenza per una licenza basata sul tipo\n */\nexport function calculateExpiryDate(licenseType: string, trialDays: number = 30, fromDate?: Date): Date | null {\n  const baseDate = fromDate || new Date();\n  \n  switch (licenseType) {\n    case 'permanente':\n      return null; // No expiry for permanent licenses\n    \n    case 'trial':\n      const trialExpiry = new Date(baseDate);\n      trialExpiry.setDate(trialExpiry.getDate() + trialDays);\n      return trialExpiry;\n    \n    case 'abbonamento_mensile':\n    case 'mensile':\n      const monthlyExpiry = new Date(baseDate);\n      monthlyExpiry.setMonth(monthlyExpiry.getMonth() + 1);\n      monthlyExpiry.setDate(monthlyExpiry.getDate() - 1);\n      return monthlyExpiry;\n    \n    case 'abbonamento_annuale':\n    case 'annuale':\n      const yearlyExpiry = new Date(baseDate);\n      yearlyExpiry.setFullYear(yearlyExpiry.getFullYear() + 1);\n      yearlyExpiry.setDate(yearlyExpiry.getDate() - 1);\n      return yearlyExpiry;\n    \n    default:\n      return null;\n  }\n}\n\n/**\n * Genera una transazione per il rinnovo di una licenza\n */\nexport async function generateRenewalTransaction(\n  storage: DatabaseStorage,\n  license: License,\n  renewalType: 'rinnovo' | 'attivazione' = 'rinnovo'\n): Promise<void> {\n  try {\n    // Calcola l'importo per il rinnovo\n    const amount = parseFloat(license.price?.toString() || '0');\n    const discount = parseFloat(license.discount?.toString() || '0');\n    const finalAmount = Math.max(0, amount - discount);\n    \n    // Ottieni i dati del cliente\n    const client = await storage.getClientById(license.clientId);\n    if (!client) {\n      throw new Error(`Cliente non trovato per la licenza ${license.id}`);\n    }\n    \n    // Crea la transazione\n    const transactionData: InsertTransaction = {\n      licenseId: license.id,\n      clientId: client.id,\n      companyId: client.companyId,\n      type: renewalType,\n      amount: amount.toString(),\n      discount: discount.toString(),\n      finalAmount: finalAmount.toString(),\n      status: 'in_attesa',\n      notes: `Transazione generata automaticamente per ${renewalType === 'rinnovo' ? 'rinnovo' : 'attivazione'} licenza ${license.activationKey}`\n    };\n    \n    await storage.createTransaction(transactionData);\n    console.log(`Transazione di ${renewalType} generata per licenza ${license.activationKey}: ${finalAmount}‚Ç¨`);\n    \n  } catch (error) {\n    console.error(`Errore nella generazione della transazione di rinnovo per licenza ${license.id}:`, error);\n    throw error;\n  }\n}\n\n/**\n * Processa i rinnovi automatici per le licenze scadute usando i crediti del wallet aziendale\n */\nexport async function processAutomaticRenewals(storage: DatabaseStorage): Promise<void> {\n  try {\n    console.log('üîÑ Inizio processo rinnovi automatici con sistema crediti...');\n    \n    // Oggi (data corrente)\n    const today = new Date();\n    const todayDateOnly = new Date(today.getFullYear(), today.getMonth(), today.getDate());\n    \n    const licenses = await storage.getLicenses();\n    const renewalCandidates = licenses.filter(license => {\n      // Solo licenze con rinnovo automatico abilitato\n      if (!license.renewalEnabled) return false;\n      \n      // Solo licenze attive \n      if (license.status !== 'attiva') return false;\n      \n      // Solo abbonamenti (non permanenti o trial)\n      if (license.licenseType === 'permanente' || license.licenseType === 'trial') return false;\n      \n      // Solo licenze che scadono oggi o sono gi√† scadute\n      if (!license.expiryDate) return false;\n      \n      const expiryDate = new Date(license.expiryDate);\n      const expiryDateOnly = new Date(expiryDate.getFullYear(), expiryDate.getMonth(), expiryDate.getDate());\n      \n      // Licenza scade oggi o √® gi√† scaduta\n      return expiryDateOnly <= todayDateOnly;\n    });\n    \n    console.log(`üìã Trovate ${renewalCandidates.length} licenze con rinnovo automatico da processare`);\n    \n    if (renewalCandidates.length === 0) {\n      console.log('‚úÖ Nessuna licenza da rinnovare oggi');\n      return;\n    }\n    \n    let successfulRenewals = 0;\n    let failedRenewals = 0;\n    let walletPayments = 0;\n    let insufficientFunds = 0;\n    \n    for (const license of renewalCandidates) {\n      try {\n        console.log(`üîÑ Processando rinnovo per licenza ${license.activationKey}...`);\n        \n        // Ottieni i dati del cliente per l'azienda\n        const client = await storage.getClientById(license.clientId);\n        if (!client) {\n          console.error(`‚ùå Cliente non trovato per licenza ${license.activationKey}`);\n          failedRenewals++;\n          continue;\n        }\n        \n        // Calcola l'importo del rinnovo (convertito in crediti - 1 euro = 1 credito)\n        const amount = parseFloat(license.price?.toString() || '0');\n        const discount = parseFloat(license.discount?.toString() || '0');\n        const creditsRequired = Math.max(0, amount - discount);\n        \n        console.log(`üí≥ Rinnovo licenza ${license.activationKey}: richiesti ${creditsRequired} crediti`);\n        \n        // Tenta il pagamento con crediti del wallet aziendale\n        const walletPaymentSuccess = await storage.chargeWalletForLicense(\n          client.companyId,\n          license.id,\n          creditsRequired,\n          'sistema_automatico'\n        );\n        \n        if (walletPaymentSuccess) {\n          // Pagamento con crediti riuscito - procedi con il rinnovo\n          console.log(`üí≥ Pagamento con crediti riuscito per licenza ${license.activationKey}`);\n          walletPayments++;\n          \n          // Calcola la nuova data di scadenza partendo da oggi\n          const newExpiryDate = calculateExpiryDate(\n            license.licenseType,\n            license.trialDays || 30,\n            new Date() // Parte da oggi per evitare arretrati\n          );\n          \n          if (newExpiryDate) {\n            // Aggiorna la data di scadenza della licenza\n            const currentNotes = license.notes || '';\n            const renewalNote = `Rinnovo automatico con crediti (${creditsRequired}) effettuato il ${new Date().toLocaleDateString('it-IT')}`;\n            const updatedNotes = currentNotes ? `${currentNotes}\\n${renewalNote}` : renewalNote;\n            \n            await storage.updateLicense(license.id, {\n              expiryDate: newExpiryDate,\n              notes: updatedNotes,\n              status: 'attiva' // Assicura che rimanga attiva\n            });\n            \n            console.log(`‚úÖ Licenza ${license.activationKey} rinnovata automaticamente con crediti fino al ${newExpiryDate.toLocaleDateString('it-IT')}`);\n            successfulRenewals++;\n          } else {\n            console.error(`‚ùå Errore nel calcolo data scadenza per licenza ${license.activationKey}`);\n            failedRenewals++;\n          }\n        } else {\n          // Saldo insufficiente - genera solo transazione per pagamento manuale\n          console.log(`‚ö†Ô∏è Saldo insufficiente per licenza ${license.activationKey}, generazione transazione per pagamento manuale`);\n          insufficientFunds++;\n          \n          await generateRenewalTransaction(storage, license, 'rinnovo');\n          \n          // Aggiorna le note della licenza per indicare il problema\n          const currentNotes = license.notes || '';\n          const warningNote = `ATTENZIONE: Rinnovo automatico fallito per saldo insufficiente il ${new Date().toLocaleDateString('it-IT')} - Transazione generata per pagamento manuale`;\n          const updatedNotes = currentNotes ? `${currentNotes}\\n${warningNote}` : warningNote;\n          \n          await storage.updateLicense(license.id, {\n            notes: updatedNotes\n            // Non aggiornare la data di scadenza - rimane scaduta fino al pagamento manuale\n          });\n        }\n        \n      } catch (error) {\n        console.error(`‚ùå Errore nel rinnovo automatico della licenza ${license.id}:`, error);\n        failedRenewals++;\n      }\n    }\n    \n    console.log(`üéØ Processo rinnovi automatici completato:`);\n    console.log(`   üí≥ ${walletPayments} licenze rinnovate con crediti wallet`);\n    console.log(`   ‚ö†Ô∏è ${insufficientFunds} licenze con saldo insufficiente (transazioni generate)`);\n    console.log(`   ‚úÖ ${successfulRenewals} rinnovi completati`);\n    console.log(`   ‚ùå ${failedRenewals} errori`);\n    \n  } catch (error) {\n    console.error('‚ùå Errore nel processo rinnovi automatici:', error);\n    throw error;\n  }\n}\n\n/**\n * Avvia il sistema di rinnovo automatico con schedulazione a mezzanotte\n */\nexport function startAutomaticRenewalScheduler(storage: DatabaseStorage): void {\n  console.log('üïí Avvio sistema di rinnovo automatico licenze...');\n  \n  // Schedula il rinnovo automatico ogni giorno alle 00:00 (mezzanotte)\n  cron.schedule('0 0 * * *', async () => {\n    console.log('üåÖ Esecuzione rinnovi automatici programmata alle 00:00');\n    try {\n      await processAutomaticRenewals(storage);\n    } catch (error) {\n      console.error('‚ùå Errore nell\\'esecuzione programmata dei rinnovi automatici:', error);\n    }\n  }, {\n    scheduled: true,\n    timezone: \"Europe/Rome\" // Fuso orario italiano\n  });\n  \n  console.log('‚úÖ Sistema di rinnovo automatico attivato - esecuzione giornaliera alle 00:00 (Europe/Rome)');\n  \n  // Test immediato opzionale (solo in sviluppo)\n  if (process.env.NODE_ENV === 'development') {\n    console.log('üîß Modalit√† sviluppo: esecuzione test rinnovi...');\n    // Uncomment per test immediato in sviluppo:\n    // processAutomaticRenewals(storage).catch(console.error);\n  }\n}\n\n/**\n * Aggiorna le scadenze per tutte le licenze che non hanno ancora una data di scadenza\n */\nexport async function updateMissingExpiryDates(storage: DatabaseStorage): Promise<void> {\n  try {\n    console.log('Aggiornamento date scadenza mancanti...');\n    \n    const licenses = await storage.getLicenses();\n    let updatedCount = 0;\n    \n    console.log(`Controllando ${licenses.length} licenze...`);\n    \n    for (const license of licenses) {\n      try {\n        const updates: any = {};\n        let needsUpdate = false;\n        \n        // Aggiorna data di attivazione se mancante per licenze attive\n        if (!license.activationDate && license.status === 'attiva') {\n          updates.activationDate = new Date();\n          needsUpdate = true;\n          console.log(`Aggiornando data attivazione per licenza ${license.activationKey}`);\n        }\n        \n        // Aggiorna data di scadenza se mancante per licenze non permanenti\n        if (!license.expiryDate && license.licenseType !== 'permanente') {\n          const expiryDate = calculateExpiryDate(\n            license.licenseType,\n            license.trialDays || 30,\n            license.activationDate || license.createdAt || new Date()\n          );\n          \n          if (expiryDate) {\n            updates.expiryDate = expiryDate;\n            needsUpdate = true;\n            console.log(`Aggiornando scadenza licenza ${license.activationKey}: ${expiryDate.toLocaleDateString('it-IT')}`);\n          }\n        }\n        \n        if (needsUpdate) {\n          await storage.updateLicense(license.id, updates);\n          updatedCount++;\n        }\n        \n      } catch (error) {\n        console.error(`Errore nell'aggiornamento licenza ${license.id}:`, error);\n      }\n    }\n    \n    console.log(`Aggiornamento completato: ${updatedCount} licenze aggiornate`);\n    \n  } catch (error) {\n    console.error('Errore nell\\'aggiornamento date scadenza:', error);\n    throw error;\n  }\n}","size_bytes":11655},"server/routes.ts":{"content":"import express, { type Request, type Response, type NextFunction } from \"express\";\nimport { nanoid } from \"nanoid\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport { database } from \"./database\";\nimport { storage } from \"./storage\";\nimport { calculateExpiryDate, generateRenewalTransaction, processAutomaticRenewals, updateMissingExpiryDates, startAutomaticRenewalScheduler } from \"./license-utils\";\nimport Stripe from \"stripe\";\n\nconst router = express.Router();\n\n// JWT Secret - Use environment variable\nconst JWT_SECRET = process.env.JWT_SECRET || \"qlm-jwt-secret-key-2024-fixed\";\nif (!process.env.JWT_SECRET) {\n  console.warn('‚ö†Ô∏è  JWT_SECRET not set in environment, using default (not secure for production)');\n}\n\n// Initialize Stripe\nconst stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n  apiVersion: '2023-10-16',\n});\n\n// Middleware to verify JWT token\nfunction authenticateToken(req: Request, res: Response, next: NextFunction) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.sendStatus(401);\n  }\n\n  jwt.verify(token, JWT_SECRET, (err: any, user: any) => {\n    if (err) {\n      return res.sendStatus(403);\n    }\n    (req as any).user = user;\n    next();\n  });\n}\n\n// Auth routes\nrouter.post(\"/api/register\", async (req: Request, res: Response) => {\n  try {\n    const { username, email, password, name, role, companyId } = req.body;\n\n    // Check if user already exists\n    const existingUser = await storage.getUserByUsername(username);\n    if (existingUser) {\n      return res.status(400).json({ message: \"Username already exists\" });\n    }\n\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    const user = await storage.createUser({\n      id: nanoid(),\n      username,\n      email,\n      password: hashedPassword,\n      name,\n      role: role || 'cliente',\n      companyId: companyId || null,\n      createdAt: new Date().toISOString()\n    });\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { \n        id: user.id, \n        username: user.username, \n        role: user.role,\n        companyId: user.companyId \n      },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n    res.json({ \n      message: \"User registered successfully\", \n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        role: user.role,\n        companyId: user.companyId\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n  try {\n    const { username, password } = req.body;\n\n    const user = await storage.getUserByUsername(username);\n    if (!user) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    const validPassword = await bcrypt.compare(password, user.password);\n    if (!validPassword) {\n      return res.status(401).json({ message: \"Invalid credentials\" });\n    }\n\n    // Generate JWT token\n    const token = jwt.sign(\n      { \n        id: user.id, \n        username: user.username, \n        role: user.role,\n        companyId: user.companyId \n      },\n      JWT_SECRET,\n      { expiresIn: '24h' }\n    );\n\n\n\n    res.json({ \n      token,\n      user: {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        role: user.role,\n        companyId: user.companyId\n      }\n    });\n  } catch (error) {\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Stripe test endpoint\nrouter.post('/api/stripe/test', authenticateToken, async (req: Request, res: Response) => {\n  try {\n    // Test connection by retrieving account info\n    const account = await stripe.accounts.retrieve();\n\n    res.json({ \n      success: true,\n      message: 'Connessione Stripe testata con successo',\n      accountId: account.id,\n      country: account.country\n    });\n  } catch (error: any) {\n    console.error('Stripe test error:', error);\n    res.status(500).json({ \n      success: false,\n      message: 'Errore nella connessione Stripe: ' + error.message \n    });\n  }\n});\n\n// Get Stripe configuration endpoint\nrouter.get('/api/stripe/config', authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Allow both superadmin and admin to access Stripe configuration for wallet recharging\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Solo superadmin e admin possono visualizzare la configurazione Stripe\" });\n    }\n\n    const config = await storage.getStripeConfiguration();\n\n    if (!config) {\n      return res.json({ \n        success: true,\n        publicKey: '',\n        secretKey: '',\n        configured: false\n      });\n    }\n\n    res.json({ \n      success: true,\n      publicKey: config.publicKey,\n      secretKey: config.secretKey,\n      configured: true\n    });\n  } catch (error: any) {\n    res.status(500).json({ \n      success: false,\n      message: 'Errore nel recupero configurazione Stripe: ' + error.message \n    });\n  }\n});\n\n// Save Stripe configuration endpoint\nrouter.post('/api/stripe/config', authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Only superadmin can save Stripe configuration\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo superadmin pu√≤ salvare la configurazione Stripe\" });\n    }\n\n    const { publicKey, secretKey } = req.body;\n\n    // Validate keys format\n    if (publicKey && !publicKey.startsWith('pk_')) {\n      return res.status(400).json({ message: \"La chiave pubblica deve iniziare con pk_\" });\n    }\n\n    if (secretKey && !secretKey.startsWith('sk_')) {\n      return res.status(400).json({ message: \"La chiave segreta deve iniziare con sk_\" });\n    }\n\n    // Save Stripe configuration to database\n    console.log('Stripe configuration updated by:', user.username);\n    console.log('Public key updated:', publicKey ? 'Yes' : 'No');\n    console.log('Secret key updated:', secretKey ? 'Yes' : 'No');\n\n    // Actually save the configuration to the database\n    if (publicKey && secretKey) {\n      await storage.saveStripeConfiguration(publicKey, secretKey, user.id);\n      console.log('‚úÖ Stripe configuration saved to system_config table');\n    }\n\n    res.json({ \n      success: true,\n      message: 'Configurazione Stripe salvata con successo'\n    });\n  } catch (error: any) {\n    console.error('Save Stripe config error:', error);\n    res.status(500).json({ \n      success: false,\n      message: 'Errore nel salvataggio configurazione Stripe: ' + error.message \n    });\n  }\n});\n\nrouter.get(\"/api/auth/validate\", authenticateToken, async (req: Request, res: Response) => {\n  res.json({ isValid: true });\n});\n\nrouter.get(\"/api/user\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const userId = (req as any).user.id;\n    const user = await storage.getUserById(userId);\n\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n\n    res.json({\n      id: user.id,\n      username: user.username,\n      name: user.name,\n      role: user.role,\n      companyId: user.companyId\n    });\n  } catch (error) {\n    console.error('Get user error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Protected routes\nrouter.get(\"/api/companies\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n\n    let companies;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all companies\n      companies = await storage.getAllCompanies();\n\n    } else if (user.role === 'admin') {\n      // Admin can see their company and all subsidiaries\n      companies = await storage.getCompaniesInHierarchy(user.companyId);\n\n    } else {\n      // Other roles can only see their own company\n      const company = await storage.getCompanyById(user.companyId);\n      companies = company ? [company] : [];\n\n    }\n\n    res.json(companies);\n  } catch (error) {\n    console.error('Get companies error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/companies\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const companyData = {\n      ...req.body,\n      id: nanoid(),\n      createdAt: new Date().toISOString()\n    };\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to create companies\" });\n    }\n\n    const company = await storage.createCompany(companyData);\n    res.json(company);\n  } catch (error) {\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/api/companies/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const companyId = req.params.id;\n    const { name, type, parentId, status, contactInfo } = req.body;\n\n\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to update companies\" });\n    }\n\n    const existingCompany = await storage.getCompany(companyId);\n    if (!existingCompany) {\n      return res.status(404).json({ message: \"Company not found\" });\n    }\n\n    // Admin can only update companies in their hierarchy\n    if (user.role === 'admin' && user.companyId) {\n      const companyIds = await storage.getCompanyHierarchy(user.companyId);\n      if (!companyIds.includes(companyId)) {\n        return res.status(403).json({ message: \"Not authorized to update this company\" });\n      }\n    }\n\n    const updatedCompany = await storage.updateCompany(companyId, {\n      name,\n      type,\n      parentId: parentId || null,\n      status,\n      contactInfo\n    });\n\n    console.log('Company updated successfully:', updatedCompany);\n    res.json(updatedCompany);\n  } catch (error) {\n    console.error('Update company error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/api/companies/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const companyId = req.params.id;\n\n\n\n    // Only superadmin can delete companies\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can delete companies\" });\n    }\n\n    const existingCompany = await storage.getCompany(companyId);\n    if (!existingCompany) {\n      return res.status(404).json({ message: \"Company not found\" });\n    }\n\n\n\n    // Check if company has clients before attempting deletion\n    const clients = await storage.getClientsByCompany(companyId);\n    if (clients.length > 0) {\n      return res.status(400).json({ \n        message: `Cannot delete company \"${existingCompany.name}\" because it has ${clients.length} associated clients. Please move or remove all clients first.` \n      });\n    }\n\n    // Get subcompanies info for logging\n    const allCompanies = await storage.getAllCompanies();\n    const subcompanies = allCompanies.filter((company: any) => \n      (company.parent_id === companyId || company.parentId === companyId)\n    );\n\n    if (subcompanies.length > 0) {\n      console.log(`Company ${existingCompany.name} has ${subcompanies.length} subcompanies that will be moved to parent`);\n    }\n\n    await storage.deleteCompany(companyId);\n    console.log(`Company ${existingCompany.name} deleted successfully`);\n\n    res.json({ \n      message: \"Company deleted successfully\",\n      details: {\n        deletedCompany: existingCompany.name,\n        movedSubcompanies: subcompanies.length\n      }\n    });\n  } catch (error) {\n    if (error instanceof Error) {\n      return res.status(400).json({ message: error.message });\n    }\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n\nrouter.get(\"/api/clients\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    console.log('Fetching clients for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n\n    let clients;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all clients\n      clients = await storage.getAllClients();\n      console.log('Superadmin: fetched all', clients.length, 'clients');\n    } else if (user.role === 'admin') {\n      // Admin can see clients from their company hierarchy\n      clients = await storage.getClientsByCompanyHierarchy(user.companyId);\n      console.log('Admin: fetched', clients.length, 'clients in company hierarchy', user.companyId);\n    } else {\n      // Other roles can only see clients from their own company\n      clients = await storage.getClientsByCompany(user.companyId);\n      console.log('User role', user.role, ': fetched', clients.length, 'clients from company', user.companyId);\n    }\n\n    console.log('Raw clients data received:', clients.length, 'clients');\n    console.log(`Clients API returned ${clients.length} clients for user ${user.username} (${user.role})`);\n\n    res.json(clients);\n  } catch (error) {\n    console.error('Get clients error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/licenses\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    console.log('Fetching licenses for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n\n    let licenses;\n    let whereClause = '';\n    const queryParams: any[] = [];\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all licenses\n      console.log('Superadmin: fetching all licenses');\n    } else if (user.role === 'admin') {\n      // Admin can see licenses from their company hierarchy\n      whereClause = 'WHERE c.company_id IN (?) OR comp.parent_id IN (?) OR comp.id IN (?)';\n      queryParams.push(user.companyId, user.companyId, user.companyId);\n      console.log('Admin: fetching licenses for company hierarchy', user.companyId);\n    } else {\n      // Other roles can only see licenses from their own company\n      whereClause = 'WHERE c.company_id = ?';\n      queryParams.push(user.companyId);\n      console.log('User role', user.role, ': fetching licenses for company', user.companyId);\n    }\n\n    // Use a database query that joins clients, companies, and products\n    const query = `\n      SELECT \n        l.*,\n        c.name as clientName,\n        c.email as clientEmail,\n        c.company_id as clientCompanyId,\n        comp.name as companyName,\n        comp.parent_id as parentCompanyId,\n        parent_comp.name as parentCompanyName,\n        p.name as productName,\n        p.version as productVersion\n      FROM licenses l\n      LEFT JOIN clients c ON l.client_id = c.id\n      LEFT JOIN companies comp ON c.company_id = comp.id\n      LEFT JOIN companies parent_comp ON comp.parent_id = parent_comp.id\n      LEFT JOIN products p ON l.product_id = p.id\n      ${whereClause}\n      ORDER BY l.created_at DESC\n    `;\n\n    const rows = await database.query(query, queryParams);\n\n    const mappedLicenses = rows.map((row: any) => {\n      const license = {\n        id: row.id,\n        activationKey: row.activation_key,\n        client: {\n          id: row.client_id,\n          name: row.clientName,\n          email: row.clientEmail,\n          company_id: row.clientCompanyId\n        },\n        company: {\n          id: row.clientCompanyId,\n          name: row.companyName,\n          parent_id: row.parentCompanyId\n        },\n        product: {\n          id: row.product_id,\n          name: row.productName,\n          version: row.productVersion\n        },\n        status: row.status,\n        licenseType: row.license_type,\n        maxDevices: row.max_devices,\n        maxUsers: row.max_users,\n        expirationDate: row.expiry_date,\n        expiryDate: row.expiry_date,\n        activationDate: row.activation_date,\n        isActive: row.is_active,\n        lastActivation: row.last_activation,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        price: row.price,\n        discount: row.discount,\n        notes: row.notes,\n        activeModules: row.active_modules ? JSON.parse(row.active_modules) : ['core'],\n        renewalEnabled: row.renewal_enabled,\n        renewalPeriod: row.renewal_period,\n        // Additional fields for fallback display\n        clientName: row.clientName,\n        clientEmail: row.clientEmail,\n        companyName: row.companyName,\n        parentCompanyId: row.parentCompanyId,\n        parentCompanyName: row.parentCompanyName\n      };\n\n      return license;\n    });\n\n    licenses = mappedLicenses;\n\n\n    res.json(licenses);\n  } catch (error) {\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/licenses/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const licenseId = req.params.id;\n\n\n\n    // Enhanced query to get complete license details with client and company info\n    const query = `\n      SELECT \n        l.*,\n        c.id as client_id,\n        c.name as clientName,\n        c.email as clientEmail,\n        c.company_id as clientCompanyId,\n        comp.id as company_id,\n        comp.name as companyName,\n        comp.parent_id as parentCompanyId,\n        parent_comp.name as parentCompanyName,\n        p.id as product_id,\n        p.name as productName,\n        p.version as productVersion\n      FROM licenses l\n      LEFT JOIN clients c ON l.client_id = c.id\n      LEFT JOIN companies comp ON c.company_id = comp.id\n      LEFT JOIN companies parent_comp ON comp.parent_id = parent_comp.id\n      LEFT JOIN products p ON l.product_id = p.id\n      WHERE l.id = ?\n    `;\n\n    const rows = await database.query(query, [licenseId]);\n\n    if (rows.length === 0) {\n      return res.status(404).json({ message: \"License not found\" });\n    }\n\n    const row = rows[0];\n    const licenseWithDetails = {\n      id: row.id,\n      activationKey: row.activation_key,\n      client: {\n        id: row.client_id,\n        name: row.clientName,\n        email: row.clientEmail,\n        company_id: row.clientCompanyId\n      },\n      company: {\n        id: row.company_id,\n        name: row.companyName,\n        parent_id: row.parentCompanyId\n      },\n      product: {\n        id: row.product_id,\n        name: row.productName,\n        version: row.productVersion\n      },\n      status: row.status,\n      licenseType: row.license_type,\n      maxDevices: row.max_devices,\n      maxUsers: row.max_users,\n      expirationDate: row.expiry_date,\n      expiryDate: row.expiry_date,\n      activationDate: row.activation_date,\n      isActive: row.is_active,\n      lastActivation: row.last_activation,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      price: row.price,\n      discount: row.discount,\n      notes: row.notes,\n      activeModules: row.active_modules ? JSON.parse(row.active_modules) : ['core'],\n      renewalEnabled: row.renewal_enabled,\n      renewalPeriod: row.renewal_period,\n      // Additional fields for fallback display\n      clientName: row.clientName,\n      clientEmail: row.clientEmail,\n      companyName: row.companyName,\n      parentCompanyId: row.parentCompanyId,\n      parentCompanyName: row.parentCompanyName\n    };\n\n    console.log('License details retrieved:', licenseWithDetails.activationKey);\n    res.json(licenseWithDetails);\n  } catch (error) {\n    console.error('Get license details error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/licenses/expiring\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    console.log('Fetching expiring licenses for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n\n    let licenses;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all expiring licenses\n      licenses = await storage.getExpiringLicenses();\n      console.log('Superadmin: fetched all', licenses.length, 'expiring licenses');\n    } else if (user.role === 'admin') {\n      // Admin can see expiring licenses from their company hierarchy\n      licenses = await storage.getExpiringLicensesByCompanyHierarchy(user.companyId);\n      console.log('Admin: fetched', licenses.length, 'expiring licenses in company hierarchy', user.companyId);\n    } else {\n      // Other roles can only see expiring licenses from their own company\n      licenses = await storage.getExpiringLicensesByCompany(user.companyId);\n      console.log('User role', user.role, ': fetched', licenses.length, 'expiring licenses from company', user.companyId);\n    }\n\n    console.log(`Expiring licenses API returned ${licenses.length} licenses for user ${user.username}`);\n\n    res.json(licenses);\n  } catch (error) {\n    console.error('Get expiring licenses error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/licenses/active/count\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    console.log('Fetching active licenses count for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n\n    let count;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see count of all active licenses\n      count = await storage.getActiveLicensesCount();\n      console.log('Superadmin: active licenses count =', count);\n    } else if (user.role === 'admin') {\n      // Admin can see count of active licenses from their company hierarchy\n      count = await storage.getActiveLicensesCountByCompanyHierarchy(user.companyId);\n      console.log('Admin: active licenses count in company hierarchy', user.companyId, '=', count);\n    } else {\n      // Other roles can only see count of active licenses from their own company\n      count = await storage.getActiveLicensesCountByCompany(user.companyId);\n      console.log('User role', user.role, ': active licenses count from company', user.companyId, '=', count);\n    }\n\n    res.json({ count });\n  } catch (error) {\n    console.error('Get active licenses count error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Categories endpoints\nrouter.get(\"/api/categories\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    let categories;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all categories\n      categories = await storage.getAllCategories();\n    } else if (user.role === 'admin' && user.companyId) {\n      // Admin can see categories from their company hierarchy + global categories\n      categories = await storage.getCategoriesByCompanyHierarchy(user.companyId);\n    } else {\n      // Other roles see only global categories for now\n      categories = await storage.getAllCategories();\n    }\n\n    res.json(categories);\n  } catch (error) {\n    console.error('Get categories error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/categories\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { name, description, color, companyId } = req.body;\n\n    // Superadmin and admin can create categories\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Solo superadmin e admin possono creare categorie\" });\n    }\n\n    // Validate required fields\n    if (!name) {\n      return res.status(400).json({ message: \"Name is required\" });\n    }\n\n    // Determine category company assignment\n    let categoryCompanyId = null;\n    \n    if (user.role === 'superadmin') {\n      // Superadmin can create global categories (companyId = null) or assign to any company\n      categoryCompanyId = companyId || null;\n    } else if (user.role === 'admin') {\n      // Admin can only create categories for their company hierarchy\n      if (companyId) {\n        const companyIds = await storage.getCompanyHierarchy(user.companyId);\n        if (!companyIds.includes(companyId)) {\n          return res.status(403).json({ message: \"Non puoi creare categorie per aziende fuori dalla tua gerarchia\" });\n        }\n        categoryCompanyId = companyId;\n      } else {\n        // If no companyId specified, assign to admin's company\n        categoryCompanyId = user.companyId;\n      }\n    }\n\n    const categoryData = {\n      id: nanoid(),\n      name: name.trim(),\n      description: description?.trim() || null,\n      color: color || '#3B82F6',\n      companyId: categoryCompanyId\n    };\n\n    const category = await storage.createCategory(categoryData);\n    console.log('Category created successfully:', category.name, 'for company:', categoryCompanyId || 'global');\n    res.json(category);\n  } catch (error) {\n    console.error('Create category error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/api/categories/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const categoryId = req.params.id;\n    const { name, description, color } = req.body;\n\n    // Only superadmin can update categories\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo il superadmin pu√≤ modificare categorie\" });\n    }\n\n    const existingCategory = await storage.getCategoryById(categoryId);\n    if (!existingCategory) {\n      return res.status(404).json({ message: \"Category not found\" });\n    }\n\n    const updatedCategory = await storage.updateCategory(categoryId, {\n      name,\n      description,\n      color\n    });\n\n    res.json(updatedCategory);\n  } catch (error) {\n    console.error('Update category error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/api/categories/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const categoryId = req.params.id;\n\n    // Only superadmin can delete categories\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can delete categories\" });\n    }\n\n    const existingCategory = await storage.getCategoryById(categoryId);\n    if (!existingCategory) {\n      return res.status(404).json({ message: \"Category not found\" });\n    }\n\n    await storage.deleteCategory(categoryId);\n    res.json({ message: \"Category deleted successfully\" });\n  } catch (error) {\n    console.error('Delete category error:', error);\n    res.status(500).json({ message: error.message || \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/products\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    let products = await storage.getAllProducts();\n\n    // Se l'utente non √® superadmin, filtra i prodotti in base alle categorie aziendali\n    if (user.role !== 'superadmin' && user.companyId) {\n      // Ottieni tutte le categorie accessibili all'azienda dell'utente\n      const accessibleCategories = await storage.getCategoriesByCompanyHierarchy(user.companyId);\n      const accessibleCategoryIds = accessibleCategories.map(cat => cat.id);\n\n      // Filtra i prodotti:\n      // 1. Prodotti senza categoria (categoryId null/undefined) - sempre visibili\n      // 2. Prodotti con categoria accessibile all'azienda dell'utente\n      products = products.filter(product => {\n        const categoryId = product.categoryId || product.category_id;\n        \n        // Se il prodotto non ha categoria, √® sempre visibile\n        if (!categoryId) {\n          return true;\n        }\n        \n        // Se il prodotto ha una categoria, verifica che sia accessibile\n        return accessibleCategoryIds.includes(categoryId);\n      });\n\n      console.log(`User ${user.username} (${user.role}) from company ${user.companyId}: filtered ${products.length} products from original set`);\n    } else {\n      console.log(`Superadmin ${user.username}: returning all ${products.length} products`);\n    }\n\n    res.json(products);\n  } catch (error) {\n    console.error('Get products error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/products\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { name, version, description, supportedLicenseTypes } = req.body;\n\n    // Only superadmin can create products\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo il superadmin pu√≤ creare prodotti\" });\n    }\n\n    // Validate required fields\n    if (!name || !version) {\n      return res.status(400).json({ message: \"Name and version are required\" });\n    }\n\n    if (!supportedLicenseTypes || supportedLicenseTypes.length === 0) {\n      return res.status(400).json({ message: \"At least one supported license type is required\" });\n    }\n\n    const productData = {\n      id: nanoid(),\n      name: name.trim(),\n      version: version.trim(),\n      description: description?.trim() || null,\n      categoryId: req.body.categoryId || null,\n      licenseType: req.body.licenseType || 'permanente',\n      price: parseFloat(req.body.price) || 0,\n      discount: parseFloat(req.body.discount) || 0,\n      maxUsers: parseInt(req.body.maxUsers) || 1,\n      maxDevices: parseInt(req.body.maxDevices) || 1,\n      trialDays: parseInt(req.body.trialDays) || 30,\n      supportedLicenseTypes: supportedLicenseTypes,\n      createdAt: new Date().toISOString()\n    };\n\n    const product = await storage.createProduct(productData);\n    console.log('Product created successfully:', product.name);\n    res.json(product);\n  } catch (error) {\n    console.error('Create product error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/software/registrazioni\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { status, nomeSoftware, search } = req.query;\n\n    console.log('Fetching device registrations for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n    console.log('Search parameters:', { status, nomeSoftware, search });\n\n    // Get company registrations based on user role and company hierarchy\n    let companies;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all registrations\n      companies = await storage.getAllTestaRegAzienda();\n      console.log('Superadmin: fetched all', companies.length, 'company registrations');\n    } else if (user.role === 'admin' && user.companyId) {\n      // Admin can only see registrations from their company hierarchy\n      const companyHierarchy = await storage.getCompanyHierarchy(user.companyId);\n      console.log('Admin: company hierarchy for', user.companyId, ':', companyHierarchy);\n\n      // Get all registrations and filter strictly by company hierarchy  \n      const allCompanies = await storage.getAllTestaRegAzienda();\n      companies = [];\n\n      for (const company of allCompanies) {\n        let shouldInclude = false;\n\n        // Only include if there's a direct license assignment to companies in hierarchy\n        if (company.idLicenza) {\n          const license = await storage.getLicense(company.idLicenza);\n          if (license && license.client) {\n            const clientCompanyId = license.client.company_id || license.client.companyId;\n            if (clientCompanyId && companyHierarchy.includes(clientCompanyId)) {\n              shouldInclude = true;\n            }\n          }\n        }\n\n        if (shouldInclude) {\n          companies.push(company);\n        }\n      }\n      console.log('Admin: filtered to', companies.length, 'company registrations in hierarchy');\n    } else {\n      // Other roles get empty results for now\n      companies = [];\n      console.log('User role', user.role, 'has no access to registrations');\n    }\n\n    // Filter based on query parameters\n    let filteredCompanies = companies;\n\n    // Legacy nomeSoftware filter (manteniamo per compatibilit√†)\n    if (nomeSoftware) {\n      filteredCompanies = companies.filter(company => \n        company.prodotto?.toLowerCase().includes((nomeSoftware as string).toLowerCase())\n      );\n    }\n\n    // New unified search filter\n    if (search) {\n      const searchTerm = (search as string).toLowerCase().trim();\n      console.log('Applying comprehensive search for term:', searchTerm);\n      console.log('Total companies before filter:', companies.length);\n\n      // Search in multiple phases: direct fields, then related entities\n      const directMatches = [];\n      const relatedMatches = [];\n\n      for (const company of companies) {\n        // Phase 1: Search in direct company fields\n        const matchCompany = company.nomeAzienda?.toLowerCase().includes(searchTerm) ||\n                           company.partitaIva?.toLowerCase().includes(searchTerm) ||\n                           company.prodotto?.toLowerCase().includes(searchTerm) ||\n                           company.versione?.toLowerCase().includes(searchTerm) ||\n                           company.modulo?.toLowerCase().includes(searchTerm);\n\n        if (matchCompany) {\n          console.log('Direct match found:', {\n            nomeAzienda: company.nomeAzienda,\n            prodotto: company.prodotto,\n            searchTerm: searchTerm\n          });\n          directMatches.push(company);\n          continue; // Skip related search if direct match found\n        }\n\n        // Phase 2: Search in related entities\n        let hasRelatedMatch = false;\n\n        // Search in license data if assigned\n        if (company.idLicenza && !hasRelatedMatch) {\n          try {\n            const license = await storage.getLicense(company.idLicenza);\n            if (license) {\n              const matchLicense = license.activationKey?.toLowerCase().includes(searchTerm) ||\n                                license.client?.name?.toLowerCase().includes(searchTerm) ||\n                                license.client?.email?.toLowerCase().includes(searchTerm) ||\n                                license.product?.name?.toLowerCase().includes(searchTerm) ||\n                                license.product?.version?.toLowerCase().includes(searchTerm) ||\n                                license.company?.name?.toLowerCase().includes(searchTerm);\n\n              if (matchLicense) {\n                console.log('License match found:', {\n                  companyName: company.nomeAzienda,\n                  clientName: license.client?.name,\n                  productName: license.product?.name,\n                  systemCompany: license.company?.name,\n                  activationKey: license.activationKey,\n                  searchTerm: searchTerm\n                });\n                hasRelatedMatch = true;\n              }\n            }\n          } catch (error) {\n            console.error('Error searching license for company:', company.nomeAzienda, error);\n          }\n        }\n\n        // Search in specific related entities only if this company has connections\n        if (!hasRelatedMatch && (company.idCliente || company.idAzienda)) {\n          try {\n            // Check if company is linked to a matching system company\n            if (company.idAzienda) {\n              const systemCompany = await storage.getCompany(company.idAzienda);\n              if (systemCompany && systemCompany.name?.toLowerCase().includes(searchTerm)) {\n                console.log('Linked system company match:', {\n                  registrationCompany: company.nomeAzienda,\n                  linkedSystemCompany: systemCompany.name,\n                  searchTerm: searchTerm\n                });\n                hasRelatedMatch = true;\n              }\n            }\n\n            // Check if company is linked to a matching client\n            if (!hasRelatedMatch && company.idCliente) {\n              const client = await storage.getClient(company.idCliente);\n              if (client && (client.name?.toLowerCase().includes(searchTerm) || \n                           client.email?.toLowerCase().includes(searchTerm))) {\n                console.log('Linked client match:', {\n                  registrationCompany: company.nomeAzienda,\n                  linkedClient: client.name,\n                  searchTerm: searchTerm\n                });\n                hasRelatedMatch = true;\n              }\n            }\n          } catch (error) {\n            console.error('Error searching linked entities:', error);\n          }\n        }\n\n        if (hasRelatedMatch) {\n          relatedMatches.push(company);\n        }\n      }\n\n      filteredCompanies = [...directMatches, ...relatedMatches];\n      console.log(`Search results: Direct matches: ${directMatches.length}, Related matches: ${relatedMatches.length}, Total: ${filteredCompanies.length}`);\n    }\n\n    // Build response with device details\n    const registrations = [];\n    for (const company of filteredCompanies) {\n      const devices = await storage.getDettRegAziendaByPartitaIva(company.partitaIva);\n\n      // Create a registration entry for each device\n      for (const device of devices) {\n        // Additional device-level filtering for search terms that might appear in device-specific fields\n        let includeDevice = true;\n        if (search) {\n          const searchTerm = (search as string).toLowerCase().trim();\n\n          // If no match at company level, check device-specific fields\n          const companyAlreadyMatched = true; // Since company is already in filteredCompanies\n\n          // For now, include all devices from matched companies, but could add device-level filtering logic here\n          includeDevice = companyAlreadyMatched;\n        }\n\n        if (!includeDevice) continue;\n        const hasLicense = company.idLicenza !== null;\n        const hasComputerKey = device.computerKey !== null && device.computerKey !== '';\n\n        // Determina lo stato del dispositivo\n        let deviceStatus = 'non_assegnato';\n        if (hasLicense) {\n          if (hasComputerKey) {\n            deviceStatus = 'classificato'; // Licenza assegnata E computer_key presente\n          } else {\n            deviceStatus = 'in_attesa_computer_key'; // Licenza assegnata ma computer_key mancante\n          }\n        }\n\n        const registration = {\n          id: `${company.partitaIva}-${device.id}`,\n          partitaIva: company.partitaIva,\n          nomeSoftware: company.prodotto,\n          versione: company.versione,\n          modulo: company.modulo,\n          ragioneSociale: company.nomeAzienda,\n          uidDispositivo: device.uidDispositivo,\n          sistemaOperativo: device.sistemaOperativo,\n          computerKey: device.computerKey,\n          totaleOrdini: device.ordini,\n          totaleVenduto: parseFloat(device.vendite || '0'),\n          status: deviceStatus,\n          clienteAssegnato: null, // Will be populated when license is assigned\n          licenzaAssegnata: company.idLicenza,\n          prodottoAssegnato: company.prodotto,\n          note: device.note,\n          primaRegistrazione: device.dataAttivazione,\n          ultimaAttivita: device.dataUltimoAccesso,\n          createdAt: device.createdAt,\n          updatedAt: device.updatedAt\n        };\n\n        // Filter by status if specified\n        if (!status || status === 'all' || registration.status === status) {\n          registrations.push(registration);\n        }\n      }\n    }\n\n    console.log('Device registrations API returned', registrations.length, 'registrations for user', user.username);\n    res.json(registrations);\n  } catch (error) {\n    console.error('Get device registrations error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.get(\"/api/software/registrazioni/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const registrationId = req.params.id;\n    // ID format: \"partitaIva-deviceId\"\n    const [partitaIva, deviceId] = registrationId.split('-');\n\n    if (!partitaIva || !deviceId) {\n      return res.status(400).json({ message: \"Invalid registration ID format\" });\n    }\n\n    const company = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n    const device = await storage.getDettRegAziendaById(parseInt(deviceId));\n\n    if (!company || !device) {\n      return res.status(404).json({ message: \"Registration not found\" });\n    }\n\n    const hasLicense = company.idLicenza !== null;\n    const hasComputerKey = device.computerKey !== null && device.computerKey !== '';\n\n    // Determina lo stato del dispositivo\n    let deviceStatus = 'non_assegnato';\n    if (hasLicense) {\n      if (hasComputerKey) {\n        deviceStatus = 'classificato'; // Licenza assegnata E computer_key presente\n      } else {\n        deviceStatus = 'in_attesa_computer_key'; // Licenza assegnata ma computer_key mancante\n      }\n    }\n\n    const registration = {\n      id: registrationId,\n      partitaIva: company.partitaIva,\n      nomeSoftware: company.prodotto,\n      versione: company.versione,\n      modulo: company.modulo,\n      ragioneSociale: company.nomeAzienda,\n      uidDispositivo: device.uidDispositivo,\n      sistemaOperativo: device.sistemaOperativo,\n      computerKey: device.computerKey,\n      totaleOrdini: device.ordini,\n      totaleVenduto: parseFloat(device.vendite || '0'),\n      status: deviceStatus,\n      clienteAssegnato: null,\n      licenzaAssegnata: company.idLicenza,\n      prodottoAssegnato: company.prodotto,\n      note: device.note,\n      primaRegistrazione: device.dataAttivazione,\n      ultimaAttivita: device.dataUltimoAccesso,\n      createdAt: device.createdAt,\n      updatedAt: device.updatedAt\n    };\n\n    res.json(registration);\n  } catch (error) {\n    console.error('Get device registration error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.patch(\"/api/software/registrazioni/:id/classifica\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const registrationId = req.params.id;\n    const { aziendaAssegnata, clienteAssegnato, licenzaAssegnata, prodottoAssegnato, note, authorizeDevice = false } = req.body;\n\n    console.log(`${user.role === 'admin' ? 'Computer key validation' : 'Classifying registration'} ${registrationId} with data:`, req.body);\n\n    // Admin can only authorize/deauthorize devices for existing license assignments\n    if (user.role === 'admin') {\n      // Admin cannot change license assignments, client assignments, or notes\n      if (clienteAssegnato !== undefined || licenzaAssegnata !== undefined || prodottoAssegnato !== undefined || note !== undefined) {\n        return res.status(403).json({ \n          message: \"Gli admin possono solo convalidare computer keys per licenze gi√† assegnate\" \n        });\n      }\n    }\n\n    // ID format: \"partitaIva-deviceId\"\n    const [partitaIva, deviceId] = registrationId.split('-');\n\n    if (!partitaIva || !deviceId) {\n      return res.status(400).json({ message: \"Invalid registration ID format\" });\n    }\n\n    // Handle license assignment or removal\n    if (licenzaAssegnata) {\n      console.log(`Activating license ${licenzaAssegnata} for registration ${registrationId}`);\n\n      // Get license details for transaction creation and activation\n      const license = await storage.getLicense(licenzaAssegnata);\n      if (!license) {\n        return res.status(404).json({ message: \"License not found\" });\n      }\n\n      // Always activate the license when it's assigned through classification\n      // Calculate expiry date based on license type\n      const activationDate = new Date();\n      const updateData: any = { \n        status: 'attiva',\n        activationDate: activationDate\n      };\n\n      // Calculate expiry date ALWAYS when activating a license, regardless of current status\n      const now = new Date();\n      let expiryDate: Date | null = null;\n\n      switch (license.licenseType) {\n        case 'trial':\n          expiryDate = new Date(now);\n          expiryDate.setDate(expiryDate.getDate() + (license.trialDays || 30));\n          break;\n        case 'abbonamento_mensile':\n        case 'mensile':\n          expiryDate = new Date(now);\n          expiryDate.setMonth(expiryDate.getMonth() + 1);\n          expiryDate.setDate(expiryDate.getDate() - 1);\n          break;\n        case 'abbonamento_annuale':\n        case 'annuale':\n          expiryDate = new Date(now);\n          expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n          expiryDate.setDate(expiryDate.getDate() - 1);\n          break;\n        case 'permanente':\n          expiryDate = null; // No expiry for permanent licenses\n          break;\n        default:\n          // For any other license types, treat as monthly\n          expiryDate = new Date(now);\n          expiryDate.setMonth(expiryDate.getMonth() + 1);\n          expiryDate.setDate(expiryDate.getDate() - 1);\n          break;\n      }\n\n      if (expiryDate) {\n        updateData.expiryDate = expiryDate;\n      }\n\n      console.log(`Setting expiry date for license ${licenzaAssegnata} (${license.licenseType}): ${expiryDate ? expiryDate.toISOString() : 'never'}`);\n      console.log(`updateData before storage update:`, updateData);\n\n      await storage.updateLicense(licenzaAssegnata, updateData);\n\n      console.log(`License ${licenzaAssegnata} updated successfully`);\n\n      // Update company record with license assignment\n      await storage.updateTestaRegAzienda(partitaIva, {\n        idLicenza: licenzaAssegnata\n      });\n\n      // Check if this license already has a transaction from software registration classification\n      const existingTransactions = await storage.getTransactionsByLicense(licenzaAssegnata);\n      const hasClassificationTransaction = existingTransactions.some(tx => \n        tx.notes && tx.notes.includes('registrazione software')\n      );\n\n      // Generate automatic transaction and process payment for license assignment ONLY if no classification transaction exists\n      if (!hasClassificationTransaction) {\n        try {\n          // Ottieni informazioni del client e dell'azienda per la transazione\n          // Priorit√†: client esplicito -> client dalla licenza -> null\n          let client = null;\n          let clientCompanyId = null;\n          \n          if (clienteAssegnato) {\n            // Cliente esplicitamente assegnato\n            client = await storage.getClientById(clienteAssegnato);\n            clientCompanyId = client?.companyId || client?.company_id;\n          } else if (license.client && license.client.id) {\n            // Usa il cliente dalla licenza se disponibile\n            client = await storage.getClientById(license.client.id);\n            clientCompanyId = client?.companyId || client?.company_id || license.client.company_id;\n          }\n          \n          // Se non abbiamo un'azienda dal cliente, usa quella dalla licenza\n          if (!clientCompanyId && license.assignedCompany) {\n            clientCompanyId = license.assignedCompany;\n          }\n\n          // Calcola l'importo finale\n          const transactionAmount = parseFloat(license.price?.toString() || '0');\n          const discountPercent = parseFloat(license.discount?.toString() || '0');\n          const discountAmount = transactionAmount * (discountPercent / 100);\n          const finalAmount = Math.max(0, transactionAmount - discountAmount);\n\n          console.log(`üí≥ Software registration classification: Processing payment for license ${licenzaAssegnata}, Amount: ${finalAmount} crediti`);\n          console.log(`üí≥ Transaction will be assigned to: Client ID: ${client?.id || 'null'}, Company ID: ${clientCompanyId || 'null'}`);\n\n          if (finalAmount > 0 && clientCompanyId) {\n            // Tenta il pagamento automatico con crediti wallet\n            const walletPaymentSuccess = await storage.chargeWalletForLicense(\n              clientCompanyId,\n              licenzaAssegnata,\n              finalAmount,\n              user.id\n            );\n\n            if (walletPaymentSuccess) {\n              // Pagamento con crediti riuscito - crea transazione pagata\n              const transaction = await storage.createTransaction({\n                licenseId: licenzaAssegnata,\n                clientId: client?.id || null,\n                companyId: clientCompanyId,\n                type: 'attivazione',\n                amount: transactionAmount,\n                discount: discountAmount,\n                finalAmount: finalAmount,\n                paymentMethod: 'crediti',\n                status: 'pagato_crediti',\n                creditsUsed: finalAmount,\n                paymentDate: new Date(),\n                modifiedBy: user.id,\n                notes: `Pagamento automatico con crediti per classificazione licenza ${license.activationKey} da registrazione software`\n              });\n\n              console.log(`üí≥ Wallet payment successful for software registration: License ${licenzaAssegnata}, Amount ${finalAmount} crediti, Transaction ${transaction.id}`);\n            } else {\n              // Saldo insufficiente - crea transazione in attesa\n              const transaction = await storage.createTransaction({\n                licenseId: licenzaAssegnata,\n                clientId: client?.id || null,\n                companyId: clientCompanyId,\n                type: 'attivazione',\n                amount: transactionAmount,\n                discount: discountAmount,\n                finalAmount: finalAmount,\n                paymentMethod: 'manuale',\n                status: 'in_attesa',\n                notes: `Transazione per classificazione licenza ${license.activationKey} da registrazione software - Saldo wallet insufficiente`\n              });\n\n              console.log(`‚ö†Ô∏è Wallet payment failed (insufficient funds) for software registration: License ${licenzaAssegnata}, Transaction ${transaction.id} created as pending`);\n            }\n          } else if (finalAmount === 0) {\n            // Licenza gratuita\n            const transaction = await storage.createTransaction({\n              licenseId: licenzaAssegnata,\n              clientId: client?.id || null,\n              companyId: clientCompanyId || null,\n              type: 'attivazione',\n              amount: transactionAmount,\n              discount: discountAmount,\n              finalAmount: finalAmount,\n              paymentMethod: 'gratis',\n              status: 'completed',\n              paymentDate: new Date(),\n              notes: `Licenza gratuita per classificazione da registrazione software ${license.activationKey}`\n            });\n\n            console.log(`‚úÖ Free license transaction created for software registration: License ${licenzaAssegnata}, Transaction ${transaction.id}`);\n          } else {\n            console.log(`‚ö†Ô∏è No company ID found for automatic wallet payment - creating manual transaction`);\n\n            // Crea transazione manuale se non c'√® azienda\n            const transaction = await storage.createTransaction({\n              licenseId: licenzaAssegnata,\n              clientId: client?.id || null,\n              companyId: clientCompanyId || null,\n              type: 'attivazione',\n              amount: transactionAmount,\n              discount: discountAmount,\n              finalAmount: finalAmount,\n              paymentMethod: 'manuale',\n              status: 'in_attesa',\n              notes: `Transazione manuale per classificazione licenza ${license.activationKey} da registrazione software`\n            });\n\n            console.log(`üìã Manual transaction created for software registration: License ${licenzaAssegnata}, Transaction ${transaction.id}`);\n          }\n\n        } catch (transactionError) {\n          console.error('Error creating transaction for software registration:', transactionError);\n          // Continue with license assignment even if transaction creation fails\n        }\n      } else {\n        console.log(`üí° License ${licenzaAssegnata} already has a classification transaction - skipping duplicate creation`);\n      }\n\n      console.log(`License ${licenzaAssegnata} activated and assigned to company ${partitaIva}`);\n    } else if (licenzaAssegnata === null) {\n      // Remove license assignment - set company license to null and suspend any existing license\n      const company = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n\n      if (company && company.idLicenza) {\n        console.log(`Removing license assignment ${company.idLicenza} from registration ${registrationId}`);\n\n        // Get the license details for transaction creation\n        const license = await storage.getLicense(company.idLicenza);\n\n        // Get transactions to process refunds FIRST, then delete them\n        try {\n          const transactions = await storage.getTransactionsByLicense(company.idLicenza);\n          console.log(`üîç Found ${transactions.length} transactions for license ${company.idLicenza}`);\n\n          let totalRefunded = 0;\n          let refundCompanyId = null;\n\n          // STEP 1: Process all refunds BEFORE deleting transactions\n          for (const transaction of transactions) {\n            console.log(`üîç Processing transaction ${transaction.id}: status=${transaction.status}, creditsUsed=${transaction.creditsUsed || transaction.credits_used}, finalAmount=${transaction.finalAmount || transaction.final_amount}`);\n\n            // Check for credits to refund - look at multiple fields for paid transactions\n            let creditsToRefund = 0;\n\n            // For transactions paid with credits, try to find the refund amount from multiple sources\n            if (transaction.status === 'pagato_crediti' || transaction.paymentMethod === 'crediti') {\n              // Priority 1: creditsUsed field (exact credits used)\n              if (transaction.creditsUsed && parseFloat(transaction.creditsUsed.toString()) > 0) {\n                creditsToRefund = parseFloat(transaction.creditsUsed.toString());\n                console.log(`üí∞ Found creditsUsed: ${creditsToRefund}`);\n              } else if (transaction.credits_used && parseFloat(transaction.credits_used.toString()) > 0) {\n                creditsToRefund = parseFloat(transaction.credits_used.toString());\n                console.log(`üí∞ Found credits_used: ${creditsToRefund}`);\n              }\n              // Priority 2: finalAmount field (transaction total)\n              else if (transaction.finalAmount && parseFloat(transaction.finalAmount.toString()) > 0) {\n                creditsToRefund = parseFloat(transaction.finalAmount.toString());\n                console.log(`üí∞ Using finalAmount as refund: ${creditsToRefund}`);\n              } else if (transaction.final_amount && parseFloat(transaction.final_amount.toString()) > 0) {\n                creditsToRefund = parseFloat(transaction.final_amount.toString());\n                console.log(`üí∞ Using final_amount as refund: ${creditsToRefund}`);\n              }\n              // Priority 3: amount field minus discount (calculated total)\n              else if (transaction.amount && parseFloat(transaction.amount.toString()) > 0) {\n                const amount = parseFloat(transaction.amount.toString());\n                const discount = parseFloat(transaction.discount?.toString() || '0');\n                creditsToRefund = Math.max(0, amount - discount);\n                console.log(`üí∞ Calculated refund from amount-discount: ${creditsToRefund}`);\n              }\n            }\n\n            if (creditsToRefund > 0) {\n              // Find the company ID for refund (could be in transaction or from client)\n              let companyId = transaction.companyId;\n              if (!companyId && clienteAssegnato) {\n                const client = await storage.getClientById(clienteAssegnato);\n                companyId = client?.companyId || client?.company_id;\n              }\n\n              if (companyId) {\n                console.log(`üí∞ Processing refund: ${creditsToRefund} crediti to company ${companyId}`);\n\n                // FIRST: Create wallet transaction for refund\n                await storage.updateWalletBalance(\n                  companyId,\n                  creditsToRefund, // Positive amount to ADD back to wallet\n                  `Rimborso per rimozione licenza da registrazione software ${partitaIva}`,\n                  'rimborso',\n                  user.id\n                );\n\n                totalRefunded += creditsToRefund;\n                refundCompanyId = companyId;\n                console.log(`‚úÖ Refunded ${creditsToRefund} crediti to company ${companyId} for removed license ${company.idLicenza}`);\n              }\n            } else {\n              console.log(`‚ÑπÔ∏è No credits to refund for transaction ${transaction.id} - status: ${transaction.status}, amount: ${transaction.finalAmount || transaction.final_amount}`);\n            }\n          }\n\n          // STEP 2: ONLY NOW delete the original transactions (after all refunds are processed)\n          if (transactions.length > 0) {\n            await storage.deleteTransactionsByLicense(company.idLicenza);\n            console.log(`üóëÔ∏è Deleted ${transactions.length} original transactions for license ${company.idLicenza}. Total refunded: ${totalRefunded} crediti`);\n          }\n\n        } catch (error) {\n          console.error('Error processing refunds and deleting transactions:', error);\n        }\n\n        // Suspend the license and reset activation/expiry dates\n        await storage.updateLicense(company.idLicenza, {\n          status: 'sospesa',\n          activationDate: null,\n          expiryDate: null\n        });\n\n        // Remove license assignment from company\n        await storage.updateTestaRegAzienda(partitaIva, {\n          idLicenza: null\n        });\n\n        // Remove computer keys from all devices of this company when license is removed\n        const allDevices = await storage.getDettRegAziendaByPartitaIva(partitaIva);\n        for (const device of allDevices) {\n          if (device.computerKey) {\n            await storage.updateDettRegAzienda(device.id, {\n              computerKey: null\n            });\n            console.log(`Removed computer key from device ${device.id} of company ${partitaIva}`);\n          }\n        }\n\n        console.log(`License assignment, transactions (with refunds), and all computer keys removed from company ${partitaIva}`);\n      }\n    }\n\n    // Update device notes and computer key\n    if (deviceId) {\n      const deviceUpdates: any = {};\n\n      if (note !== undefined) {\n        deviceUpdates.note = note;\n      }\n\n      // Get current device to check if it already has a computer key\n      const currentDevice = await storage.getDettRegAziendaById(parseInt(deviceId));\n\n      // Handle device authorization\n      if (authorizeDevice && !currentDevice?.computerKey) {\n        // Check device limit before authorizing new device\n        if (licenzaAssegnata) {\n          const license = await storage.getLicense(licenzaAssegnata);\n          if (license) {\n            // Count currently authorized devices for this license\n            const authorizedDevicesCount = await storage.countAuthorizedDevicesForLicense(licenzaAssegnata);\n\n            console.log(`License ${licenzaAssegnata} allows ${license.maxDevices} devices, currently authorized: ${authorizedDevicesCount}`);\n\n            if (authorizedDevicesCount >= license.maxDevices) {\n              return res.status(400).json({ \n                message: `Limite dispositivi raggiunto. La licenza consente massimo ${license.maxDevices} dispositivo${license.maxDevices > 1 ? 'i' : ''}. Attualmente sono autorizzati ${authorizedDevicesCount} dispositivi. Rimuovi prima l'autorizzazione da un altro dispositivo.`,\n                code: 'DEVICE_LIMIT_EXCEEDED',\n                maxDevices: license.maxDevices,\n                currentDevices: authorizedDevicesCount\n              });\n            }\n          }\n        }\n\n        // Generate new computer key if device should be authorized and doesn't have one\n        const computerKey = `COMP-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n        deviceUpdates.computerKey = computerKey;\n        console.log(`Generated new computer key ${computerKey} for device ${deviceId}`);\n      } else if (!authorizeDevice) {\n        // Remove computer key if authorization is being removed or assignment is being cleared\n        if (currentDevice?.computerKey) {\n          deviceUpdates.computerKey = null;\n          console.log(`Removed computer key for device ${deviceId}`);\n        }\n      }\n\n      if (Object.keys(deviceUpdates).length > 0) {\n        await storage.updateDettRegAzienda(parseInt(deviceId), deviceUpdates);\n      }\n    }\n\n    // Get updated registration data to return\n    const company = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n    const device = await storage.getDettRegAziendaById(parseInt(deviceId));\n\n    if (!company || !device) {\n      return res.status(404).json({ message: \"Registration not found after update\" });\n    }\n\n    const hasLicense = company.idLicenza !== null;\n    const hasComputerKey = device.computerKey !== null && device.computerKey !== '';\n\n    // Determina lo stato del dispositivo\n    let deviceStatus = 'non_assegnato';\n    if (hasLicense) {\n      if (hasComputerKey) {\n        deviceStatus = 'classificato'; // Licenza assegnata E computer_key presente\n      } else {\n        deviceStatus = 'in_attesa_computer_key'; // Licenza assegnata ma computer_key mancante\n      }\n    }\n\n    const updatedRegistration = {\n      id: registrationId,\n      partitaIva: company.partitaIva,\n      nomeSoftware: company.prodotto,\n      versione: company.versione,\n      modulo: company.modulo,\n      ragioneSociale: company.nomeAzienda,\n      uidDispositivo: device.uidDispositivo,\n      sistemaOperativo: device.sistemaOperativo,\n      computerKey: device.computerKey,\n      totaleOrdini: device.ordini,\n      totaleVenduto: parseFloat(device.vendite || '0'),\n      status: deviceStatus,\n      clienteAssegnato: clienteAssegnato || null,\n      licenzaAssegnata: company.idLicenza,\n      prodottoAssegnato: company.prodotto,\n      note: device.note,\n      primaRegistrazione: device.dataAttivazione,\n      ultimaAttivita: device.dataUltimoAccesso,\n      createdAt: device.createdAt,\n      updatedAt: device.updatedAt\n    };\n\n    console.log('Device registration classified successfully:', updatedRegistration);\n    res.json(updatedRegistration);\n  } catch (error) {\n    console.error('Classify device registration error:', error);\n    res.status(500).json({ message: \"Internal server error\", error: error.message });\n  }\n});\n\nrouter.post(\"/api/licenses/from-registration\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const {\n      registrationId,\n      clientId,\n      productId,\n      licenseType,\n      maxUsers,\n      maxDevices,\n      price\n    } = req.body;\n\n    // Get the registration to validate\n    const registration = await storage.getSoftwareRegistration(registrationId);\n    if (!registration) {\n      return res.status(404).json({ message: \"Registration not found\" });\n    }\n\n    // Validate that the user can create licenses for the specified client\n    const client = await storage.getClientById(clientId);\n    if (!client) {\n      return res.status(404).json({ message: \"Client not found\" });\n    }\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin') {\n      let hasPermission = false;\n\n      if (user.role === 'admin') {\n        const companyIds = await storage.getCompanyHierarchy(user.companyId);\n        hasPermission = companyIds.includes(client.company_id || client.companyId);\n      } else {\n        hasPermission = (client.company_id || client.companyId) === user.companyId;\n      }\n\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Not authorized to create license for this client\" });\n      }\n    }\n\n    // For licenses created from software registrations, automatically use wallet payment if price > 0\n    const finalAmount = Math.max(0, (price || 0));\n\n    // Check wallet balance if price > 0\n    if (finalAmount > 0) {\n      const companyId = client.company_id || client.companyId;\n      const wallet = await storage.getCompanyWallet(companyId);\n      if (!wallet || wallet.balance < finalAmount) {\n        return res.status(400).json({ \n          message: `Saldo wallet insufficiente per la classificazione. Richiesto: ${finalAmount} crediti, Disponibile: ${wallet ? wallet.balance : 0} crediti` \n        });\n      }\n      console.log(`üí≥ Wallet payment for software registration: ${finalAmount} crediti from company ${companyId}`);\n    }\n\n    const licenseData = {\n      clientId,\n      productId,\n      licenseType: licenseType || 'abbonamento',\n      maxUsers: maxUsers || 1,\n      maxDevices: maxDevices || 1,\n      price: price || 0,\n      discount: 0,\n      status: 'attiva',\n      activeModules: ['core'],\n      assignedCompany: client.company_id || client.companyId,\n      assignedAgent: user.id,\n      computerKey: registration.computerKey || null,\n      notes: `Creata da registrazione software: ${registration.nomeSoftware} v${registration.versione}`\n    };\n\n    console.log('Creating license from registration with data:', licenseData);\n    const license = await storage.createLicense(licenseData);\n\n    // Deduct wallet credits if price > 0\n    if (finalAmount > 0) {\n      const companyId = client.company_id || client.companyId;\n      const success = await storage.chargeWalletForLicense(companyId, license.id, finalAmount, user.id);\n\n      if (!success) {\n        // If wallet charge fails, delete the created license\n        await storage.deleteLicense(license.id);\n        return res.status(400).json({ message: \"Errore durante il pagamento con wallet per la classificazione\" });\n      }\n      console.log(`üí≥ Wallet payment successful for registration license: ${license.id}, Amount ${finalAmount} crediti`);\n    }\n\n    // Update registration status to \"licenziato\"\n    await storage.updateSoftwareRegistration(registrationId, {\n      status: 'licenziato',\n      licenzaAssegnata: license.id\n    });\n\n    console.log('License created successfully from registration:', license.id);\n    res.json(license);\n  } catch (error) {\n    console.error('Create license from registration error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/clients\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const clientData = {\n      ...req.body,\n      id: nanoid(),\n      createdAt: new Date().toISOString()\n    };\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to create clients\" });\n    }\n\n    // Validate company assignment for admin users\n    if (user.role === 'admin' && clientData.companyId) {\n      const companyIds = await storage.getCompanyHierarchy(user.companyId);\n      if (!companyIds.includes(clientData.companyId)) {\n        return res.status(403).json({ message: \"Not authorized to create client for this company\" });\n      }\n    }\n\n    const client = await storage.createClient(clientData);\n    res.json(client);\n  } catch (error) {\n    console.error('Create client error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/clienti/registrazione\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { name, email, companyId, status, isMultiSite, isMultiUser, contactInfo } = req.body;\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to create clients\" });\n    }\n\n    // Validate company assignment for admin users\n    if (user.role === 'admin' && companyId) {\n      const companyIds = await storage.getCompanyHierarchy(user.companyId);\n      if (!companyIds.includes(companyId)) {\n        return res.status(403).json({ message: \"Not authorized to create client for this company\" });\n      }\n    }\n\n    const clientData = {\n      id: nanoid(),\n      name,\n      email,\n      companyId: companyId || user.companyId,\n      status: status || 'in_attesa',\n      isMultiSite: isMultiSite || false,\n      isMultiUser: isMultiUser || false,\n      contactInfo: contactInfo || {},\n      createdAt: new Date().toISOString()\n    };\n\n    const client = await storage.createClient(clientData);\n    console.log('Created new client:', client.name, 'for company:', clientData.companyId);\n    res.json(client);\n  } catch (error) {\n    console.error('Create client registration error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Update client\nrouter.patch(\"/api/clients/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const clientId = req.params.id;\n    const { name, email, companyId, status, isMultiSite, isMultiUser, contactInfo } = req.body;\n\n    console.log('Client update request for:', clientId, 'by user:', user.username);\n    console.log('Update data:', req.body);\n\n    // Get the existing client to check permissions\n    const existingClient = await storage.getClientById(clientId);\n    if (!existingClient) {\n      return res.status(404).json({ message: \"Client not found\" });\n    }\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin') {\n      let hasPermission = false;\n\n      if (user.role === 'admin') {\n        // Admin can update clients in their company hierarchy\n        const companyIds = await storage.getCompanyHierarchy(user.companyId);\n        hasPermission = companyIds.includes(existingClient.company_id || existingClient.companyId);\n      } else {\n        // Other roles can only update clients in their own company\n        hasPermission = (existingClient.company_id || existingClient.companyId) === user.companyId;\n      }\n\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Not authorized to update this client\" });\n      }\n    }\n\n    // Validate and prepare update data\n    const updateData: any = {};\n\n    if (name !== undefined) updateData.name = name;\n    if (email !== undefined) updateData.email = email;\n    if (companyId !== undefined) {\n      updateData.company_id = companyId;\n      console.log('Updating client company_id to:', companyId);\n    }\n    if (status !== undefined) updateData.status = status;\n    if (isMultiSite !== undefined) updateData.is_multi_site = isMultiSite ? 1 : 0;\n    if (isMultiUser !== undefined) updateData.is_multi_user = isMultiUser ? 1 : 0;\n    if (contactInfo !== undefined) updateData.contactInfo = contactInfo;\n\n    // If companyId is being updated by an admin, ensure it's within their hierarchy\n    if (updateData.company_id && user.role === 'admin') {\n      const companyIds = await storage.getCompanyHierarchy(user.companyId);\n      if (!companyIds.includes(updateData.company_id)) {\n        return res.status(403).json({ message: \"Not authorized to assign client to this company\" });\n      }\n    }\n\n    // Update the client\n    const updatedClient = await storage.updateClient(clientId, updateData);\n    console.log('Client updated successfully:', updatedClient.name);\n    res.json(updatedClient);\n  } catch (error) {\n    console.error('Update client error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/api/clients/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const clientId = req.params.id;\n\n    // Only superadmin can delete clients\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can delete clients\" });\n    }\n\n    const existingClient = await storage.getClientById(clientId);\n    if (!existingClient) {\n      return res.status(404).json({ message: \"Client not found\" });\n    }\n\n    await storage.deleteClient(clientId);\n    res.json({ message: \"Client deleted successfully\" });\n  } catch (error) {\n    console.error('Delete client error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/licenses\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const {\n      clientId,\n      productId,\n      status,\n      activeModules,\n      renewalEnabled,\n      renewalPeriod,\n      paymentMethod\n    } = req.body;\n\n    // üîí ROLE RESTRICTION: Only admin and superadmin can create licenses\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Only admin and superadmin can create licenses\" });\n    }\n\n    // Validate required fields\n    if (!clientId) {\n      return res.status(400).json({ message: \"Client is required\" });\n    }\n    if (!productId) {\n      return res.status(400).json({ message: \"Product is required\" });\n    }\n\n    // Validate client\n    const client = await storage.getClientById(clientId);\n    if (!client) {\n      return res.status(404).json({ message: \"Client not found\" });\n    }\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin') {\n      let hasPermission = false;\n\n      if (user.role === 'admin') {\n        // Admin can create licenses for clients in their company hierarchy\n        const companyIds = await storage.getCompanyHierarchy(user.companyId);\n        const clientCompanyId = client.companyId || client.company_id;\n        console.log(`üîê Admin permission check: User company ${user.companyId}, Client company ${clientCompanyId}, Hierarchy: [${companyIds.join(', ')}]`);\n        hasPermission = companyIds.includes(clientCompanyId);\n        console.log(`üîê Permission result: ${hasPermission}`);\n      }\n\n      if (!hasPermission) {\n        console.log(`‚ùå License creation denied for admin ${user.username}: client ${client.id} (company ${client.companyId || client.company_id}) not in hierarchy`);\n        return res.status(403).json({ message: \"Not authorized to create license for this client\" });\n      }\n    }\n\n    // Validate product and inherit pricing configuration\n    const product = await storage.getProduct(productId);\n    if (!product) {\n      return res.status(404).json({ message: \"Product not found\" });\n    }\n\n    // üèóÔ∏è INHERIT ALL PRICING FROM PRODUCT (not modifiable at license level)\n    const price = product.price || 0;\n    const discount = product.discount || 0;\n    const licenseType = product.licenseType || product.license_type || 'permanente';\n    const maxUsers = product.maxUsers || product.max_users || 1;\n    const maxDevices = product.maxDevices || product.max_devices || 1;\n    const trialDays = product.trialDays || product.trial_days || 30;\n\n    console.log(`üì¶ License inheriting from product \"${product.name}\":`, {\n      price, discount, licenseType, maxUsers, maxDevices, trialDays\n    });\n\n    // Calculate final amount\n    const finalAmount = Math.max(0, price - discount);\n\n    // Non effettuare controlli wallet durante la creazione - solo durante l'assegnazione\n    console.log(`üìã Licenza creata - pagamento e transazioni verranno gestiti durante l'assegnazione`);\n\n    const licenseData = {\n      clientId,\n      productId,\n      status: status || 'in_attesa_convalida',\n      activeModules: activeModules || ['core'],\n      assignedCompany: client.companyId,\n      assignedAgent: user.id,\n      activationKey: req.body.activationKey || undefined,\n      computerKey: req.body.computerKey || undefined,\n      renewalEnabled: renewalEnabled || false,\n      renewalPeriod: renewalPeriod || null,\n      // Inherit pricing configuration from product\n      licenseType: licenseType,\n      maxUsers: maxUsers,\n      maxDevices: maxDevices,\n      price: price,\n      discount: discount,\n      trialDays: trialDays\n    };\n\n    console.log('Creating license with data:', licenseData);\n    const license = await storage.createLicense(licenseData);\n\n    // If automatic wallet payment and amount > 0, deduct credits and create transactions\n    // This logic is now deferred to the license assignment/classification step\n\n    console.log('License created successfully:', license.id);\n    res.json(license);\n  } catch (error) {\n    console.error('Create license error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/api/licenses/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const licenseId = req.params.id;\n    const updateData = req.body;\n\n    // Get the existing license\n    const existingLicense = await storage.getLicense(licenseId);\n    if (!existingLicense) {\n      return res.status(404).json({ message: \"License not found\" });\n    }\n\n    // Check if this license was created from a software registration (classified license)\n    const isClassifiedLicense = existingLicense.notes && existingLicense.notes.includes('registrazione software');\n\n    // Only superadmin can modify classified licenses\n    if (isClassifiedLicense && user.role !== 'superadmin') {\n      return res.status(403).json({ \n        message: \"Solo il superadmin pu√≤ modificare le licenze classificate dalle registrazioni software\" \n      });\n    }\n\n    // Check permissions based on user role for regular licenses\n    if (user.role !== 'superadmin') {\n      let hasPermission = false;\n\n      if (user.role === 'admin') {\n        // Admin can update licenses for clients in their company hierarchy\n        const companyIds = await storage.getCompanyHierarchy(user.companyId);\n        hasPermission = companyIds.includes(existingLicense.client.company_id || existingLicense.client.companyId);\n      } else {\n        // Other roles can only update licenses for clients in their own company\n        hasPermission = (existingLicense.client.company_id || existingLicense.client.companyId) === user.companyId;\n      }\n\n      if (!hasPermission) {\n        return res.status(403).json({ message: \"Not authorized to update this license\" });\n      }\n    }\n\n    const updatedLicense = await storage.updateLicense(licenseId, updateData);\n    res.json(updatedLicense);\n  } catch (error) {\n    console.error('Update license error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/api/licenses/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const licenseId = req.params.id;\n\n    // Get the existing license\n    const existingLicense = await storage.getLicense(licenseId);\n    if (!existingLicense) {\n      return res.status(404).json({ message: \"License not found\" });\n    }\n\n    // Check if this license was created from a software registration (classified license)\n    const isClassifiedLicense = existingLicense.notes && existingLicense.notes.includes('registrazione software');\n\n    // Only superadmin can delete licenses, especially classified ones\n    if (user.role !== 'superadmin') {\n      if (isClassifiedLicense) {\n        return res.status(403).json({ \n          message: \"Solo il superadmin pu√≤ eliminare le licenze classificate dalle registrazioni software\" \n        });\n      } else {\n        return res.status(403).json({ message: \"Only superadmin can delete licenses\" });\n      }\n    }\n\n    // Get transactions to check for wallet payments that need refunds\n    const transactions = await storage.getTransactionsByLicense(licenseId);\n    console.log(`üîç Processing ${transactions.length} transactions for license deletion ${licenseId}`);\n\n    let totalRefunded = 0;\n    for (const transaction of transactions) {\n      console.log(`üîç Transaction ${transaction.id}: status=${transaction.status}, creditsUsed=${transaction.creditsUsed}`);\n\n      if (transaction.status === 'pagato_crediti' && transaction.creditsUsed && parseFloat(transaction.creditsUsed.toString()) > 0) {\n        // Refund credits to company wallet\n        const companyId = transaction.companyId || existingLicense.client?.companyId || existingLicense.assignedCompany;\n        const creditsToRefund = parseFloat(transaction.creditsUsed.toString());\n\n        if (companyId) {\n          console.log(`üí∞ Refunding ${creditsToRefund} crediti to company ${companyId} for deleted license`);\n\n          await storage.updateWalletBalance(\n            companyId,\n            creditsToRefund,\n            `Rimborso per eliminazione licenza ${existingLicense.activationKey}`,\n            'rimborso',\n            user.id\n          );\n\n          totalRefunded += creditsToRefund;\n          console.log(`‚úÖ Refunded ${creditsToRefund} crediti to company ${companyId} for deleted license ${licenseId}`);\n        } else {\n          console.log(`‚ùå No company ID found for refund - transaction ${transaction.id}`);\n        }\n      }\n    }\n\n    console.log(`üí∞ Total refunded for license deletion: ${totalRefunded} crediti`);\n\n    // Delete associated transactions\n    await storage.deleteTransactionsByLicense(licenseId);\n    console.log(`üóëÔ∏è Deleted transactions for license: ${licenseId}`);\n\n    // Reset license activation dates before deletion (for unassignment scenario)\n    await storage.updateLicense(licenseId, {\n      activationDate: null,\n      expiryDate: null,\n      status: 'in_attesa_convalida',\n      computerKey: null\n    });\n    console.log(`üîÑ Reset license dates and status for license: ${licenseId}`);\n\n    await storage.deleteLicense(licenseId);\n    res.json({ message: \"License deleted successfully with wallet refunds processed\" });\n  } catch (error) {\n    console.error('Delete license error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Remove license assignment (different from full deletion)\nrouter.post(\"/api/licenses/:id/remove-assignment\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const licenseId = req.params.id;\n\n    // Get the existing license\n    const existingLicense = await storage.getLicense(licenseId);\n    if (!existingLicense) {\n      return res.status(404).json({ message: \"License not found\" });\n    }\n\n    // Check permissions - only superadmin and admin can remove assignments\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to remove license assignments\" });\n    }\n\n    // Get transactions to check for wallet payments that need refunds\n    const transactions = await storage.getTransactionsByLicense(licenseId);\n    console.log(`üîç Found ${transactions.length} transactions for license ${licenseId}`);\n\n    let totalRefunded = 0;\n    let refundsProcessed = 0;\n\n    for (const transaction of transactions) {\n      console.log(`üîç Processing transaction ${transaction.id}: status=${transaction.status}, creditsUsed=${transaction.creditsUsed}`);\n\n      if (transaction.status === 'pagato_crediti' && transaction.creditsUsed && parseFloat(transaction.creditsUsed.toString()) > 0) {\n        // Refund credits to company wallet\n        const companyId = transaction.companyId || existingLicense.client?.companyId || existingLicense.assignedCompany;\n        const creditsToRefund = parseFloat(transaction.creditsUsed.toString());\n\n        if (companyId) {\n          console.log(`üí∞ Refunding ${creditsToRefund} crediti to company ${companyId} for transaction ${transaction.id}`);\n\n          await storage.updateWalletBalance(\n            companyId,\n            creditsToRefund,\n            `Rimborso per rimozione assegnazione licenza ${existingLicense.activationKey}`,\n            'rimborso',\n            user.id\n          );\n\n          totalRefunded += creditsToRefund;\n          refundsProcessed++;\n          console.log(`‚úÖ Refunded ${creditsToRefund} crediti to company ${companyId} for unassigned license ${licenseId}`);\n        } else {\n          console.log(`‚ùå No company ID found for refund - transaction ${transaction.id}`);\n        }\n      }\n    }\n\n    // Delete associated transactions AFTER processing refunds\n    await storage.deleteTransactionsByLicense(licenseId);\n    console.log(`üóëÔ∏è Deleted ${transactions.length} transactions for license assignment removal: ${licenseId}`);\n\n    // Reset license to unassigned state (reset dates and status)\n    const resetData = {\n      activationDate: null,\n      expiryDate: null,\n      status: 'in_attesa_convalida',\n      computerKey: null,\n      assignedCompany: null,\n      assignedAgent: null\n    };\n\n    await storage.updateLicense(licenseId, resetData);\n    console.log(`üîÑ Reset license assignment and dates for license: ${licenseId}`);\n\n    res.json({ \n      message: \"License assignment removed successfully\", \n      refundsProcessed: refundsProcessed > 0,\n      totalRefunded: totalRefunded,\n      transactionsProcessed: transactions.length,\n      license: { ...existingLicense, ...resetData }\n    });\n  } catch (error) {\n    console.error('Remove license assignment error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// User management routes\nrouter.get('/api/users', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    console.log(`Fetching users for user: ${req.user.username} Role: ${req.user.role} Company ID: ${req.user.companyId}`);\n\n    let users;\n    if (req.user.role === 'superadmin') {\n      // Superadmin can see all users including inactive ones\n      users = await storage.getUsers(undefined, true);\n    } else if (req.user.role === 'admin' && req.user.companyId) {\n      // Admin can see users in their company hierarchy (only active)\n      users = await storage.getUsers(req.user.companyId, false);\n    } else {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    console.log(`Found ${users.length} users`);\n    res.json(users);\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post('/api/users', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Permission check\n    if (req.user.role !== 'superadmin' && req.user.role !== 'admin') {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    const { username, name, email, password, role, companyId } = req.body;\n\n    // Validate role permissions\n    if (req.user.role === 'admin') {\n      // Admin can only create users within their company hierarchy or subcompanies\n      if (role === 'superadmin') {\n        return res.status(403).json({ message: \"Cannot create superadmin users\" });\n      }\n      if (companyId && companyId !== req.user.companyId) {\n        // Check if target company is in user's hierarchy\n        const hierarchy = await storage.getCompanyHierarchy(req.user.companyId || '');\n        if (!hierarchy.includes(companyId)) {\n          return res.status(403).json({ message: \"Cannot create users outside your company hierarchy\" });\n        }\n      }\n    }\n\n    const newUser = await storage.createUser({\n      username,\n      name,\n      email,\n      password,\n      role,\n      companyId: companyId || req.user.companyId,\n      isActive: true\n    });\n\n    console.log(`Created new user: ${newUser.username} with role: ${newUser.role}`);\n    res.status(201).json(newUser);\n  } catch (error) {\n    console.error('Error creating user:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.patch('/api/users/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Permission check\n    if (req.user.role !== 'superadmin' && req.user.role !== 'admin') {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    const userId = req.params.id;\n    const updates = req.body;\n\n    // Check if username is being changed and if it already exists\n    if (updates.username) {\n      const existingUser = await storage.getUserByUsername(updates.username);\n      if (existingUser && existingUser.id !== userId) {\n        return res.status(400).json({ message: \"Username already exists\" });\n      }\n    }\n\n    // Additional checks for admin users\n    if (req.user.role === 'admin') {\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Admin cannot modify superadmin users\n      if (targetUser.role === 'superadmin') {\n        return res.status(403).json({ message: \"Cannot modify superadmin users\" });\n      }\n\n      // Admin can only modify users in their company hierarchy\n      if (targetUser.companyId && req.user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(req.user.companyId);\n        if (!hierarchy.includes(targetUser.companyId)) {\n          return res.status(403).json({ message: \"Cannot modify users outside your company hierarchy\" });\n        }\n      }\n\n      // Admin cannot change company assignment outside their hierarchy\n      if (updates.companyId && req.user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(req.user.companyId);\n        if (!hierarchy.includes(updates.companyId)) {\n          return res.status(403).json({ message: \"Cannot assign users to companies outside your hierarchy\" });\n        }\n      }\n    }\n\n    const updatedUser = await storage.updateUser(userId, updates);\n    console.log(`Updated user: ${updatedUser.username}`);\n    res.json(updatedUser);\n  } catch (error) {\n    console.error('Error updating user:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete('/api/users/:id', authenticateToken, async (req: AuthenticatedRequest, res) => {\n  try {\n    // Permission check\n    if (req.user.role !== 'superadmin' && req.user.role !== 'admin') {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    const userId = req.params.id;\n\n    // Cannot delete self\n    if (userId === req.user.id) {\n      return res.status(400).json({ message: \"Cannot delete yourself\" });\n    }\n\n    // Additional checks for admin users\n    if (req.user.role === 'admin') {\n      const targetUser = await storage.getUser(userId);\n      if (!targetUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Admin cannot delete superadmin users\n      if (targetUser.role === 'superadmin') {\n        return res.status(403).json({ message: \"Cannot delete superadmin users\" });\n      }\n\n      // Admin can only delete users in their company hierarchy\n      if (targetUser.companyId && req.user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(req.user.companyId);\n        if (!hierarchy.includes(targetUser.companyId)) {\n          return res.status(403).json({ message: \"Cannot delete users outside your company hierarchy\" });\n        }\n      }\n    }\n\n    await storage.deleteUser(userId);\n    console.log(`Deleted user: ${userId}`);\n    res.json({ message: \"User deleted successfully\" });\n  } catch (error) {\n    console.error('Error deleting user:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Transaction routes\nrouter.get(\"/api/transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    console.log('Fetching transactions for user:', user.username, 'Role:', user.role, 'Company ID:', user.companyId);\n\n    let transactions;\n\n    if (user.role === 'superadmin') {\n      // Superadmin can see all transactions\n      transactions = await storage.getAllTransactions();\n      console.log('Superadmin: fetched all', transactions.length, 'transactions');\n    } else if (user.role === 'admin') {\n      // Admin can see transactions from their company hierarchy\n      transactions = await storage.getTransactionsByCompanyHierarchy(user.companyId);\n      console.log('Admin: fetched', transactions.length, 'transactions in company hierarchy', user.companyId);\n    } else {\n      // Other roles can only see transactions from their own company\n      transactions = await storage.getTransactionsByCompany(user.companyId);\n      console.log('User role', user.role, ': fetched', transactions.length, 'transactions from company', user.companyId);\n    }\n\n    res.json(transactions);\n  } catch (error) {\n    console.error('Get transactions error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const transactionData = {\n      ...req.body,\n      id: nanoid(),\n      createdAt: new Date().toISOString()\n    };\n\n    // Check permissions based on user role\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to create transactions\" });\n    }\n\n    const transaction = await storage.createTransaction(transactionData);\n    res.json(transaction);\n  } catch (error) {\n    console.error('Create transaction error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Removed old transaction status update route - using the comprehensive version below\n\n// Generate payment link\nrouter.post(\"/api/transactions/:id/payment-link\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const transactionId = req.params.id;\n\n    // Check permissions\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to generate payment links\" });\n    }\n\n    // Get transaction details\n    const transaction = await storage.getTransaction(transactionId);\n    if (!transaction) {\n      return res.status(404).json({ message: \"Transaction not found\" });\n    }\n\n    // Generate a simple payment link (in a real implementation, this would integrate with a payment provider)\n    const paymentLink = `https://payment.example.com/pay/${transactionId}?amount=${transaction.final_amount}&currency=EUR`;\n\n    // Update transaction with payment link\n    const updatedTransaction = await storage.updateTransactionPaymentLink(transactionId, paymentLink);\n\n    console.log('Payment link generated for transaction:', transactionId, 'link:', paymentLink);\n    res.json({ paymentLink, transaction: updatedTransaction });\n  } catch (error) {\n    console.error('Generate payment link error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.put(\"/api/products/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const productId = req.params.id;\n    const { \n      name, \n      version, \n      description, \n      licenseType, \n      price, \n      discount, \n      maxUsers, \n      maxDevices, \n      trialDays \n    } = req.body;\n\n    // Only superadmin can update products\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo il superadmin pu√≤ modificare prodotti\" });\n    }\n\n    const existingProduct = await storage.getProductById(productId);\n    if (!existingProduct) {\n      return res.status(404).json({ message: \"Product not found\" });\n    }\n\n    console.log('üîß Updating product with new pricing data:', {\n      name, version, description, categoryId: req.body.categoryId, licenseType, price, discount, maxUsers, maxDevices, trialDays\n    });\n\n    const updatedProduct = await storage.updateProduct(productId, {\n      name,\n      version,\n      description,\n      categoryId: req.body.categoryId,\n      licenseType,\n      price: parseFloat(price) || 0,\n      discount: parseFloat(discount) || 0,\n      maxUsers: parseInt(maxUsers) || 1,\n      maxDevices: parseInt(maxDevices) || 1,\n      trialDays: parseInt(trialDays) || 30\n    });\n\n    res.json(updatedProduct);\n  } catch (error) {\n    console.error('Update product error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.delete(\"/api/products/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const productId = req.params.id;\n\n    // Only superadmin can delete products\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can delete products\" });\n    }\n\n    const existingProduct = await storage.getProductById(productId);\n    if (!existingProduct) {\n      return res.status(404).json({ message: \"Product not found\" });\n    }\n\n    // Check if product has active licenses\n    const productLicenses = await storage.getLicensesByProduct(productId);\n    if (productLicenses.length > 0) {\n      return res.status(400).json({ \n        message: \"Cannot delete product with active licenses. Please remove all licenses first.\" \n      });\n    }\n\n    await storage.deleteProduct(productId);\n    res.json({ message: \"Product deleted successfully\" });\n  } catch (error) {\n    console.error('Delete product error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Transaction deletion is now handled automatically when deleting associated licenses\n\n// Delete single transaction endpoint\nrouter.delete(\"/api/transactions/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const transactionId = req.params.id;\n\n    // Only superadmin can delete transactions\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can delete transactions\" });\n    }\n\n    // Get the transaction to check for wallet payments that need refunds\n    const transaction = await storage.getTransaction(transactionId);\n    if (!transaction) {\n      return res.status(404).json({ message: \"Transaction not found\" });\n    }\n\n    console.log(`üîç Processing transaction deletion: ${transactionId}`);\n    console.log(`üìä Transaction details:`, {\n      id: transaction.id,\n      status: transaction.status,\n      creditsUsed: transaction.creditsUsed,\n      companyId: transaction.companyId,\n      finalAmount: transaction.final_amount\n    });\n\n    // Process refund if this was a credit payment\n    let refundAmount = 0;\n    let updatedWallet = null;\n\n    if (transaction.status === 'pagato_crediti' && transaction.creditsUsed && parseFloat(transaction.creditsUsed.toString()) > 0) {\n      const companyId = transaction.companyId;\n      const creditsToRefund = parseFloat(transaction.creditsUsed.toString());\n\n      if (companyId) {\n        console.log(`üí∞ Refunding ${creditsToRefund} crediti to company ${companyId} for deleted transaction`);\n\n        updatedWallet = await storage.updateWalletBalance(\n          companyId,\n          creditsToRefund,\n          `Rimborso per eliminazione transazione ${transactionId}`,\n          'rimborso',\n          user.id\n        );\n\n        refundAmount = creditsToRefund;\n        console.log(`‚úÖ Refunded ${creditsToRefund} crediti to company ${companyId}. New balance: ${updatedWallet?.balance || 'unknown'}`);\n      }\n    }\n\n    // Delete the transaction\n    await storage.deleteTransaction(transactionId);\n    console.log(`üóëÔ∏è Transaction ${transactionId} deleted successfully with ${refundAmount > 0 ? `${refundAmount} crediti refunded` : 'no refund needed'}`);\n\n    res.json({ \n      message: \"Transaction deleted successfully\",\n      refundProcessed: refundAmount > 0,\n      refundAmount: refundAmount,\n      updatedWallet: updatedWallet,\n      deletedTransactionId: transactionId\n    });\n  } catch (error) {\n    console.error('Delete transaction error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Clear all transactions endpoint for testing purposes\nrouter.delete(\"/api/transactions/clear-all\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    console.log(`Clear all transactions request by user: ${user.username} (${user.role})`);\n\n    // Only superadmin can clear all transactions\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can clear all transactions\" });\n    }\n\n    console.log('Clearing all transactions...');\n    const deletedCount = await storage.clearAllTransactions();\n    console.log(`Cleared ${deletedCount} transactions`);\n\n    res.json({ \n      message: \"All transactions cleared successfully\", \n      deletedCount \n    });\n  } catch (error) {\n    console.error('Clear all transactions error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Device Registration API - New endpoint for device registration\nrouter.post(\"/api/device-registration\", async (req: Request, res: Response) => {\n  try {\n    const {\n      partitaIva,\n      nomeAzienda,\n      prodotto,\n      versione,\n      modulo,\n      uidDispositivo,\n      sistemaOperativo,\n      computerKey,\n      note\n    } = req.body;\n\n    // Input validation\n    if (!partitaIva || !nomeAzienda || !prodotto || !uidDispositivo) {\n      return res.status(400).json({ \n        message: \"Campi obbligatori: partitaIva, nomeAzienda, prodotto, uidDispositivo\" \n      });\n    }\n\n    // Step 1: Check/Create Testa_Reg_Azienda entry\n    let testaReg = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n\n    if (!testaReg) {\n      // Create new company registration\n      testaReg = await storage.createTestaRegAzienda({\n        partitaIva,\n        nomeAzienda,\n        prodotto,\n        versione: versione || null,\n        modulo: modulo || null,\n        utenti: 1,\n        totDispositivi: 1,\n        idLicenza: null, // Initially no license assigned\n        totOrdini: 0,\n        totVendite: \"0.00\"\n      });\n    } else {\n      // Update device count\n      await storage.updateTestaRegAzienda(partitaIva, {\n        totDispositivi: (testaReg.totDispositivi || 0) + 1\n      });\n    }\n\n    // Step 2: Register the specific device\n    const now = new Date();\n    const deviceData = {\n      partitaIva,\n      uidDispositivo,\n      sistemaOperativo: sistemaOperativo || null,\n      note: note || null,\n      dataAttivazione: now.toISOString().split('T')[0], // Today's date as YYYY-MM-DD\n      dataUltimoAccesso: now.toISOString().replace('T', ' ').split('.')[0], // MySQL DATETIME format\n      ordini: 0,\n      vendite: \"0.00\",\n      computerKey: computerKey || null\n    };\n\n    const dettReg = await storage.createDettRegAzienda(deviceData);\n\n    // Step 3: Determine response based on license assignment\n    let response = {\n      registrationId: dettReg.id,\n      partitaIva: partitaIva,\n      nomeAzienda: nomeAzienda,\n      uidDispositivo: uidDispositivo,\n      registrationStatus: \"accepted\", // Always accept initial registrations\n      deviceAuthorized: false,\n      licenseValidityDays: 0,\n      message: \"Registrazione accettata. In attesa di assegnazione licenza.\"\n    };\n\n    // If license is already assigned, check validity and authorization\n    if (testaReg.idLicenza) {\n      const license = await storage.getLicense(testaReg.idLicenza);\n\n      if (license) {\n        // Calculate remaining days\n        let validityDays = 0;\n        if (license.expiryDate) {\n          const expiryDate = new Date(license.expiryDate);\n          const today = new Date();\n          const timeDiff = expiryDate.getTime() - today.getTime();\n          validityDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n        } else {\n          validityDays = -1; // Permanent license\n        }\n\n        // Check if specific device is authorized (device has computer key assigned)\n        const currentDevice = await storage.getDettRegAziendaByComputerKey(computerKey);\n        const deviceAuthorized = currentDevice && currentDevice.computerKey === computerKey;\n\n        response = {\n          ...response,\n          deviceAuthorized: deviceAuthorized || false,\n          licenseValidityDays: validityDays,\n          message: deviceAuthorized \n            ? `Dispositivo autorizzato. Licenza valida per ${validityDays > 0 ? validityDays + ' giorni' : 'sempre'}.`\n            : `Licenza assegnata ma dispositivo non autorizzato. Validit√†: ${validityDays > 0 ? validityDays + ' giorni' : 'sempre'}.`\n        };\n      }\n    }\n\n    res.status(201).json(response);\n\n  } catch (error) {\n    console.error('Device registration error:', error);\n    res.status(500).json({ \n      message: \"Errore interno del server durante la registrazione\", \n      error: error.message \n    });\n  }\n});\n\n// Get device registrations by company\nrouter.get(\"/api/device-registrations/:partitaIva\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { partitaIva } = req.params;\n\n    const testaReg = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n    if (!testaReg) {\n      return res.status(404).json({ message: \"Azienda non trovata\" });\n    }\n\n    const devices = await storage.getDettRegAzienda(partitaIva);\n\n    res.json({\n      company: testaReg,\n      devices: devices\n    });\n  } catch (error) {\n    console.error('Get device registrations error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Assign license to company (manual process)\nrouter.post(\"/api/assign-license-to-company\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { partitaIva, licenseId, authorizedDevices } = req.body;\n\n    // Only admin/superadmin can assign licenses\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Accesso negato\" });\n    }\n\n    // Update Testa_Reg_Azienda with license assignment\n    await storage.updateTestaRegAzienda(partitaIva, { idLicenza: licenseId });\n\n    // If specific devices are authorized, assign computer keys to them\n    if (authorizedDevices && Array.isArray(authorizedDevices)) {\n      for (const deviceId of authorizedDevices) {\n        // Generate a unique computer key for this device\n        const computerKey = `COMP-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n        await storage.updateDettRegAzienda(deviceId, { \n          computerKey: computerKey \n        });\n      }\n    }\n\n    res.json({ message: \"Licenza assegnata con successo\" });\n  } catch (error) {\n    console.error('Assign license error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Delete software registration\nrouter.delete(\"/api/software/registrazioni/:id\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const registrationId = req.params.id;\n\n    // Only superadmin can delete registrations\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo il superadmin pu√≤ eliminare le registrazioni software\" });\n    }\n\n    // ID format: \"partitaIva-deviceId\"\n    const [partitaIva, deviceId] = registrationId.split('-');\n\n    if (!partitaIva || !deviceId) {\n      return res.status(400).json({ message: \"Invalid registration ID format\" });\n    }\n\n    console.log(`Deleting registration ${registrationId} - Device ${deviceId} from company ${partitaIva}`);\n\n    // First, delete the specific device\n    await storage.deleteDettRegAzienda(parseInt(deviceId));\n    console.log(`Deleted device ${deviceId} from Dett_Reg_Azienda`);\n\n    // Check if there are any remaining devices for this company\n    const remainingDevices = await storage.getDettRegAzienda(partitaIva);\n\n    // If no devices remain, delete the company entry too\n    if (remainingDevices.length === 0) {\n      await storage.deleteTestaRegAzienda(partitaIva);\n      console.log(`Deleted company ${partitaIva} from Testa_Reg_Azienda (no devices remaining)`);\n    } else {\n      // Update the device count\n      await storage.updateTestaRegAzienda(partitaIva, {\n        totDispositivi: remainingDevices.length\n      });\n      console.log(`Updated device count for company ${partitaIva} to ${remainingDevices.length}`);\n    }\n\n    res.json({ message: \"Registrazione eliminata con successo\" });\n  } catch (error) {\n    console.error('Delete software registration error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Software registration endpoint (anonymous - for client software registrations)\nrouter.post(\"/api/software/register\", async (req: Request, res: Response) => {\n  try {\n    const {\n      nomeAzienda,\n      partitaIva,\n      nomeSoftware,\n      versione,\n      computerKey,\n      installationPath,\n      machineInfo,\n      registrationDate\n    } = req.body;\n\n    // Input validation\n    if (!partitaIva || !nomeAzienda || !nomeSoftware || !computerKey) {\n      return res.status(400).json({ \n        message: \"Campi obbligatori: partitaIva, nomeAzienda, nomeSoftware, computerKey\" \n      });\n    }\n\n    // Step 1: Check/Create Testa_Reg_Azienda entry\n    let testaReg = await storage.getTestaRegAziendaByPartitaIva(partitaIva);\n\n    if (!testaReg) {\n      // Create new company registration\n      testaReg = await storage.createTestaRegAzienda({\n        partitaIva,\n        nomeAzienda,\n        prodotto: nomeSoftware,\n        versione: versione || null,\n        modulo: null,\n        utenti: 1,\n        totDispositivi: 1,\n        idLicenza: null, // Initially no license assigned\n        totOrdini: 0,\n        totVendite: \"0.00\"\n      });\n    } else {\n      // Update device count\n      await storage.updateTestaRegAzienda(partitaIva, {\n        totDispositivi: (testaReg.totDispositivi || 0) + 1\n      });\n    }\n\n    // Step 2: Register the specific device\n    const now = new Date();\n    const deviceData = {\n      partitaIva,\n      uidDispositivo: computerKey, // Use computerKey as unique device identifier\n      sistemaOperativo: machineInfo || null,\n      note: installationPath ? `Percorso: ${installationPath}` : null,\n      dataAttivazione: now.toISOString().split('T')[0], // Today's date as YYYY-MM-DD\n      dataUltimoAccesso: now.toISOString().replace('T', ' ').split('.')[0], // MySQL DATETIME format\n      ordini: 0,\n      vendite: \"0.00\",\n      computerKey: computerKey\n    };\n\n    const dettReg = await storage.createDettRegAzienda(deviceData);\n\n    // Step 3: Return successful registration response\n    const response = {\n      success: true,\n      testaId: testaReg.id,\n      dettId: dettReg.id,\n      partitaIva: partitaIva,\n      nomeAzienda: nomeAzienda,\n      nomeSoftware: nomeSoftware,\n      computerKey: computerKey,\n      registrationStatus: \"accepted\",\n      deviceAuthorized: false,\n      licenseValidityDays: 0,\n      message: \"Registrazione software completata con successo. In attesa di classificazione amministratore.\"\n    };\n\n    console.log(`Software registration completed: ${nomeAzienda} - ${computerKey}`);\n    res.json(response);\n  } catch (error) {\n    console.error('Software registration error:', error);\n    res.status(500).json({ \n      success: false,\n      message: \"Errore interno del server durante la registrazione\" \n    });\n  }\n});\n\n// Removed duplicate GET /api/transactions endpoint - using the one above\n\n// Update transaction status (mark as paid manually)\nrouter.patch(\"/api/transactions/:id/status\", authenticateToken, async (req: Request, res: Response) => {\n  console.log(`üì• PATCH /api/transactions/:id/status called with ID: ${req.params.id}`);\n  try {\n    const user = (req as any).user;\n    const transactionId = req.params.id;\n    const { status, paymentMethod } = req.body;\n\n    console.log(`üìù Request body:`, { status, paymentMethod });\n    console.log(`üë§ User:`, { id: user?.id, username: user?.username, role: user?.role });\n\n    // Only admin/superadmin can manually update payment status\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Accesso negato. Solo admin/superadmin possono aggiornare lo stato pagamento.\" });\n    }\n\n    const transaction = await storage.getTransactionById(transactionId);\n    if (!transaction) {\n      return res.status(404).json({ message: \"Transazione non trovata\" });\n    }\n\n    console.log(`üí≥ Found transaction:`, transaction.id, transaction.status);\n\n    // Use the dedicated method that handles payment date logic  \n    const result = await storage.updateTransactionStatus(transactionId, status, paymentMethod, user.id);\n    console.log(`üéâ Transaction status updated successfully:`, result?.id, result?.status, result?.paymentDate);\n\n    res.json({ message: \"Stato transazione aggiornato con successo\" });\n  } catch (error: any) {\n    console.error('‚ùå Update transaction status error:', error);\n    res.status(500).json({ message: \"Errore interno del server: \" + error.message });\n  }\n});\n\n// Debug endpoint to check users\nrouter.get(\"/api/debug-users\", async (req: Request, res: Response) => {\n  try {\n    const users = await database.query('SELECT id, username, role, is_active FROM users');\n    res.json({ count: users.length, users });\n  } catch (error) {\n    console.error('Debug users error:', error);\n    res.status(500).json({ message: \"Error fetching users\", error: error.message });\n  }\n});\n\n// Init admin user if not exists\nrouter.post(\"/api/init-admin\", async (req: Request, res: Response) => {\n  try {\n    // Delete all admin users first\n    await database.query('DELETE FROM users WHERE username = ? OR role = ?', ['admin', 'superadmin']);\n\n    const hashedPassword = await bcrypt.hash('admin123', 10);\n    const adminId = nanoid();\n\n    // Create fresh admin\n    await database.query(`\n      INSERT INTO users (id, username, password, role, company_id, name, email, is_active, created_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, TRUE, NOW())\n    `, [adminId, 'admin', hashedPassword, 'superadmin', null, 'Administrator', 'admin@example.com']);\n\n    // Verify user was created\n    const verification = await database.query('SELECT username, role FROM users WHERE id = ?', [adminId]);\n    console.log('Admin user recreated successfully:', verification[0]);\n\n    res.json({ \n      message: \"Admin user created successfully\", \n      id: adminId,\n      verification: verification[0]\n    });\n  } catch (error) {\n    console.error('Init admin error:', error);\n    res.status(500).json({ message: \"Error creating admin user\", error: error.message });\n  }\n});\n\n// Generate payment link for transaction (placeholder for Stripe integration)\nrouter.post(\"/api/transactions/:id/payment-link\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const transactionId = req.params.id;\n\n    // Only admin/superadmin can generate payment links\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to generate payment links\" });\n    }\n\n    const transaction = await storage.getTransactionById(transactionId);\n    if (!transaction) {\n      return res.status(404).json({ message: \"Transaction not found\" });\n    }\n\n    // Placeholder for Stripe payment link generation\n    // TODO: Integrate with Stripe to create actual payment links\n    const mockPaymentLink = `https://pay.stripe.com/test_${transactionId}`;\n\n    await storage.updateTransaction(transactionId, {\n      paymentLink: mockPaymentLink,\n      updatedAt: new Date()\n    });\n\n    res.json({ \n      paymentLink: mockPaymentLink,\n      message: \"Payment link generated successfully\" \n    });\n  } catch (error) {\n    console.error('Generate payment link error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Send payment reminder email (placeholder for email integration)\nrouter.post(\"/api/transactions/:id/send-reminder\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const transactionId = req.params.id;\n\n    // Only admin/superadmin can send payment reminders\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Not authorized to send payment reminders\" });\n    }\n\n    const transaction = await storage.getTransactionById(transactionId);\n    if (!transaction) {\n      return res.status(404).json({ message: \"Transaction not found\" });\n    }\n\n    // Placeholder for email sending functionality\n    // TODO: Integrate with email service to send actual payment reminders\n    console.log(`Sending payment reminder for transaction ${transactionId}`);\n\n    res.json({ message: \"Payment reminder sent successfully\" });\n  } catch (error) {\n    console.error('Send payment reminder error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// License expiry management endpoints\nrouter.post(\"/api/licenses/update-expiry-dates\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Only superadmin can trigger expiry date updates\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Only superadmin can update expiry dates\" });\n    }\n\n    await updateMissingExpiryDates(storage as any);\n    res.json({ message: \"Expiry dates updated successfully\" });\n\n  } catch (error) {\n    console.error('Update expiry dates error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nrouter.post(\"/api/licenses/process-renewals\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Only superadmin can process renewals\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Accesso negato. Solo superadmin pu√≤ processare i rinnovi automatici.\" });\n    }\n\n    console.log(`Rinnovi automatici avviati manualmente da ${user.username}`);\n    await processAutomaticRenewals(storage as any);\n    res.json({ message: \"Processo rinnovi automatici completato con successo\" });\n\n  } catch (error: any) {\n    console.error('Process renewals error:', error);\n    res.status(500).json({ message: \"Errore nel processo rinnovi: \" + error.message });\n  }\n});\n\n// Fix specific license missing expiry date\nrouter.post(\"/api/licenses/fix-specific-expiry\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: 'Non autorizzato' });\n    }\n\n    // Find the specific license that needs fixing\n    const license = await storage.getLicenseByActivationKey('LIC-80885882-PHUUHXM6');\n\n    if (!license) {\n      return res.status(404).json({ message: 'Licenza non trovata' });\n    }\n\n    if (!license.activationDate) {\n      return res.status(400).json({ message: 'Licenza non attivata, impossibile calcolare scadenza' });\n    }\n\n    // Calculate expiry date based on activation date and license type\n    const activationDate = new Date(license.activationDate);\n    let expiryDate: Date;\n\n    if (license.licenseType === 'abbonamento_mensile') {\n      expiryDate = new Date(activationDate);\n      expiryDate.setMonth(expiryDate.getMonth() + 1);\n      expiryDate.setDate(expiryDate.getDate() - 1);\n    } else if (license.licenseType === 'abbonamento_annuale') {\n      expiryDate = new Date(activationDate);\n      expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n      expiryDate.setDate(expiryDate.getDate() - 1);\n    } else if (license.licenseType === 'trial') {\n      expiryDate = new Date(activationDate);\n      expiryDate.setDate(expiryDate.getDate() + 30);\n    } else {\n      return res.status(400).json({ message: 'Tipo licenza non supportato per calcolo scadenza' });\n    }\n\n    await storage.updateLicense(license.id, { expiryDate });\n\n    res.json({ \n      message: `Data di scadenza aggiornata per licenza ${license.activationKey}`,\n      activationDate: activationDate.toISOString(),\n      expiryDate: expiryDate.toISOString(),\n      licenseType: license.licenseType\n    });\n  } catch (error) {\n    console.error('Error fixing specific expiry date:', error);\n    res.status(500).json({ message: 'Errore nell\\'aggiornamento della data di scadenza' });\n  }\n});\n\n// Fix missing expiry dates for existing licenses\nrouter.post(\"/api/licenses/fix-expiry-dates\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: 'Non autorizzato' });\n    }\n\n    const licenses = await storage.getAllLicenses();\n    let fixedCount = 0;\n\n    for (const license of licenses) {\n      // Fix only active licenses without expiry date that should have one\n      if (license.status === 'attiva' && \n          !license.expiryDate && \n          license.activationDate &&\n          (license.licenseType === 'abbonamento_mensile' || \n           license.licenseType === 'abbonamento_annuale' ||\n           license.licenseType === 'trial')) {\n\n        const activationDate = new Date(license.activationDate);\n        let expiryDate: Date;\n\n        if (license.licenseType === 'abbonamento_mensile') {\n          expiryDate = new Date(activationDate);\n          expiryDate.setMonth(expiryDate.getMonth() + 1);\n          expiryDate.setDate(expiryDate.getDate() - 1);\n        } else if (license.licenseType === 'abbonamento_annuale') {\n          expiryDate = new Date(activationDate);\n          expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n          expiryDate.setDate(expiryDate.getDate() - 1);\n        } else { // trial\n          expiryDate = new Date(activationDate);\n          expiryDate.setDate(expiryDate.getDate() + 30);\n        }\n\n        await storage.updateLicense(license.id, { expiryDate });\n        fixedCount++;\n        console.log(`Fixed expiry date for license ${license.activationKey}: ${expiryDate.toISOString()}`);\n      }\n    }\n\n    res.json({ \n      message: `Aggiornate ${fixedCount} licenze con date di scadenza mancanti`,\n      fixedCount \n    });\n  } catch (error) {\n    console.error('Error fixing expiry dates:', error);\n    res.status(500).json({ message: 'Errore nell\\'aggiornamento delle date di scadenza' });\n  }\n});\n\n// License assignment with automatic expiry calculation\nrouter.patch(\"/api/licenses/:id/assign\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const licenseId = req.params.id;\n    const { status, activateNow = false } = req.body;\n\n    // Get the existing license\n    const license = await storage.getLicense(licenseId);\n    if (!license) {\n      return res.status(404).json({ message: \"License not found\" });\n    }\n\n    // Update license status\n    const updateData: any = { status };\n\n    // Calculate and set expiry date when activating\n    if (activateNow && status === 'attiva') {\n      const expiryDate = calculateExpiryDate(\n        license.licenseType,\n        license.trialDays || 30,\n        new Date()\n      );\n\n      if (expiryDate) {\n        updateData.expiryDate = expiryDate;\n        updateData.activationDate = new Date();\n      }\n\n      // Generate activation transaction if needed\n      if (parseFloat(license.price?.toString() || '0') > 0) {\n        await generateRenewalTransaction(storage as any, license, 'attivazione');\n      }\n    }\n\n    const updatedLicense = await storage.updateLicense(licenseId, updateData);\n\n    res.json({\n      ...updatedLicense,\n      message: `License ${activateNow ? 'activated' : 'updated'} successfully${\n        updateData.expiryDate ? ` with expiry date: ${updateData.expiryDate.toLocaleDateString('it-IT')}` : ''\n      }`\n    });\n\n  } catch (error) {\n    console.error('Assign license error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// üí≥ WALLET SYSTEM API ENDPOINTS - Sistema crediti aziendale\n\n// Get company wallet info\nrouter.get(\"/api/wallet/:companyId\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n\n    // Authorization check - user can only access their company wallet or sub-companies\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(user.companyId);\n        if (!hierarchy.includes(companyId)) {\n          return res.status(403).json({ message: \"Accesso negato al wallet di questa azienda\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Accesso negato\" });\n      }\n    }\n\n    const wallet = await storage.getCompanyWallet(companyId);\n    if (!wallet) {\n      // Create wallet if it doesn't exist\n      const newWallet = await storage.createCompanyWallet(companyId);\n      return res.json(newWallet);\n    }\n\n    res.json(wallet);\n  } catch (error) {\n    console.error('Get wallet error:', error);\n    res.status(500).json({ message: \"Errore interno del server\" });\n  }\n});\n\n// Get wallet transactions\nrouter.get(\"/api/wallet/:companyId/transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n    const limit = parseInt(req.query.limit as string) || 50;\n\n    // Authorization check\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(user.companyId);\n        if (!hierarchy.includes(companyId)) {\n          return res.status(403).json({ message: \"Accesso negato\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Accesso negato\" });\n      }\n    }\n\n    const transactions = await storage.getWalletTransactions(companyId, limit);\n    res.json(transactions);\n  } catch (error) {\n    console.error('Get wallet transactions error:', error);\n    res.status(500).json({ message: \"Errore interno del server\" });\n  }\n});\n\n// Create Stripe payment intent for wallet recharge\nrouter.post(\"/api/wallet/:companyId/create-payment-intent\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n    const { amount } = req.body;\n\n    // Only admin can recharge their wallet\n    if (user.role !== 'admin' && user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo gli admin possono ricaricare il wallet\" });\n    }\n\n    // Admin can only recharge their own company wallet\n    if (user.role === 'admin' && user.companyId !== companyId) {\n      return res.status(403).json({ message: \"Puoi ricaricare solo il wallet della tua azienda\" });\n    }\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ message: \"Importo non valido\" });\n    }\n\n    // Get company info for customer creation\n    const company = await storage.getCompanyById(companyId);\n    if (!company) {\n      return res.status(404).json({ message: \"Azienda non trovata\" });\n    }\n\n    // Get or create Stripe customer\n    let wallet = await storage.getCompanyWallet(companyId);\n    if (!wallet) {\n      wallet = await storage.createCompanyWallet(companyId);\n    }\n\n    let customerId = wallet.stripeCustomerId;\n\n    if (!customerId) {\n      // Create new Stripe customer\n      const customer = await stripe.customers.create({\n        name: company.name,\n        metadata: {\n          companyId: companyId,\n          userId: user.id\n        }\n      });\n\n      customerId = customer.id;\n\n      // Update wallet with Stripe customer ID\n      await storage.updateWalletStripeCustomer(companyId, customerId);\n    }\n\n    // Create payment intent\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: Math.round(amount * 100), // Convert to cents (euros to cents)\n      currency: 'eur',\n      customer: customerId,\n      metadata: {\n        companyId: companyId,\n        credits: amount.toString(),\n        userId: user.id\n      },\n      description: `Ricarica ${amount} crediti per ${company.name}`\n    });\n\n    res.json({ \n      clientSecret: paymentIntent.client_secret,\n      paymentIntentId: paymentIntent.id\n    });\n  } catch (error) {\n    console.error('Create payment intent error:', error);\n    res.status(500).json({ message: \"Errore nella creazione del pagamento\" });\n  }\n});\n\n// Confirm wallet recharge after successful Stripe payment\nrouter.post(\"/api/wallet/:companyId/confirm-payment\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n    const { paymentIntentId } = req.body;\n\n    // Only admin of the company can confirm payment\n    if (user.role !== 'admin' && user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo gli admin possono confermare i pagamenti\" });\n    }\n\n    // Admin can only confirm for their own company wallet\n    if (user.role === 'admin' && user.companyId !== companyId) {\n      return res.status(403).json({ message: \"Puoi confermare pagamenti solo per la tua azienda\" });\n    }\n\n    // Retrieve payment intent from Stripe\n    const paymentIntent = await stripe.paymentIntents.retrieve(paymentIntentId);\n\n    if (paymentIntent.status !== 'succeeded') {\n      return res.status(400).json({ message: \"Pagamento non completato\" });\n    }\n\n    if (paymentIntent.metadata.companyId !== companyId) {\n      return res.status(400).json({ message: \"Pagamento non associato a questa azienda\" });\n    }\n\n    const amount = parseFloat(paymentIntent.metadata.credits);\n\n    // Update wallet balance\n    const wallet = await storage.updateWalletBalance(\n      companyId, \n      amount, \n      `Ricarica crediti via Stripe (${paymentIntentId})`, \n      'ricarica', \n      user.id\n    );\n\n    console.log(`üí≥ Stripe payment confirmed: Company ${companyId}, Amount ${amount}, New balance: ${wallet.balance}`);\n\n    res.json({ \n      message: \"Ricarica completata con successo\",\n      wallet,\n      amount: amount,\n      paymentIntentId\n    });\n  } catch (error) {\n    console.error('Confirm payment error:', error);\n    res.status(500).json({ message: \"Errore nella conferma del pagamento\" });\n  }\n});\n\n// Legacy recharge endpoint for testing (kept for backward compatibility)\nrouter.post(\"/api/wallet/:companyId/recharge\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n    const { amount, paymentMethod = 'test' } = req.body;\n\n    // Only admin can recharge their own company wallet\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId !== companyId) {\n        return res.status(403).json({ message: \"Puoi ricaricare solo il wallet della tua azienda\" });\n      } else if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Solo gli admin possono ricaricare i wallet\" });\n      }\n    }\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ message: \"Importo non valido\" });\n    }\n\n    // Test/simulation payment processing\n    const wallet = await storage.updateWalletBalance(\n      companyId, \n      amount, \n      `Ricarica crediti via ${paymentMethod}`, \n      'ricarica', \n      user.id\n    );\n\n    console.log(`üí≥ Test wallet recharged: Company ${companyId}, Amount ${amount} crediti, New balance: ${wallet.balance}`);\n\n    res.json(wallet);\n  } catch (error: any) {\n    console.error('Recharge wallet error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\n// Transfer credits between companies (parent to sub-companies)\nrouter.post(\"/api/wallet/transfer\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { fromCompanyId, toCompanyId, amount } = req.body;\n\n    // Only admin can transfer credits\n    if (user.role !== 'admin' && user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo gli admin possono trasferire crediti\" });\n    }\n\n    // Admin can only transfer from their own company\n    if (user.role === 'admin' && user.companyId !== fromCompanyId) {\n      return res.status(403).json({ message: \"Puoi trasferire crediti solo dalla tua azienda\" });\n    }\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ message: \"Importo non valido\" });\n    }\n\n    const success = await storage.transferCredits(fromCompanyId, toCompanyId, amount, user.id);\n\n    if (success) {\n      res.json({ message: \"Trasferimento crediti completato con successo\" });\n    } else {\n      res.status(400).json({ message: \"Trasferimento fallito\" });\n    }\n  } catch (error: any) {\n    console.error('Transfer credits error:', error);\n    res.status(400).json({ message: error.message || \"Errore nel trasferimento crediti\" });\n  }\n});\n\n// Pay license renewal with wallet credits\nrouter.post(\"/api/wallet/pay-license\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { licenseId, companyId, amount } = req.body;\n\n    // Authorization check - admin can pay for licenses in their company hierarchy\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(user.companyId);\n        if (!hierarchy.includes(companyId)) {\n          return res.status(403).json({ message: \"Accesso negato per questa azienda\" });\n        }\n      } else {\n        return res.status(403).json({ message: \"Accesso negato\" });\n      }\n    }\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ message: \"Importo non valido\" });\n    }\n\n    const success = await storage.chargeWalletForLicense(companyId, licenseId, amount, user.id);\n\n    if (success) {\n      console.log(`üí≥ License payment successful: License ${licenseId}, Company ${companyId}, Amount ${amount} crediti`);\n      res.json({ message: \"Pagamento licenza completato con crediti\" });\n    } else {\n      res.status(400).json({ message: \"Saldo insufficiente nel wallet aziendale\" });\n    }\n  } catch (error: any) {\n    console.error('Pay license with wallet error:', error);\n    res.status(500).json({ message: error.message || \"Errore nel pagamento licenza\" });\n  }\n});\n\n// Get all company wallets (superadmin only)\nrouter.get(\"/api/wallets\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Allow superadmin and admin to access wallets (admin only for their hierarchy)\n    if (user.role !== 'superadmin' && user.role !== 'admin') {\n      return res.status(403).json({ message: \"Solo superadmin e admin possono visualizzare i wallet\" });\n    }\n\n    // Get companies based on user role\n    let companies;\n    if (user.role === 'superadmin') {\n      companies = await storage.getCompanies();\n    } else {\n      // Admin: get only companies in their hierarchy\n      const companyIds = await storage.getCompanyHierarchy(user.companyId);\n      const allCompanies = await storage.getCompanies();\n      companies = allCompanies.filter(company => companyIds.includes(company.id));\n    }\n    const walletsData = [];\n\n    for (const company of companies) {\n      let wallet = await storage.getCompanyWallet(company.id);\n      if (!wallet) {\n        wallet = await storage.createCompanyWallet(company.id);\n      }\n\n      walletsData.push({\n        company: company,\n        wallet: wallet\n      });\n    }\n\n    res.json(walletsData);\n  } catch (error) {\n    console.error('Get all wallets error:', error);\n    res.status(500).json({ message: \"Errore interno del server\" });\n  }\n});\n\n// Get single company wallet and transactions - FIXED VERSION\nrouter.get(\"/api/wallet/:companyId\", authenticateToken, async (req: Request, res: Response) => {\n  const timestamp = Date.now();\n  console.log(`üöÄ WALLET ENDPOINT HIT - TIMESTAMP: ${timestamp}`);\n\n  try {\n    // DISABLE ALL CACHING COMPLETELY\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate, private, max-age=0');\n    res.setHeader('Pragma', 'no-cache'); \n    res.setHeader('Expires', '0');\n    res.setHeader('Last-Modified', new Date(0).toUTCString()); // Force old date\n    res.setHeader('ETag', `wallet-${timestamp}-${Math.random()}`); // Always unique\n    res.setHeader('X-Timestamp', timestamp.toString());\n\n    const user = (req as any).user;\n    const { companyId } = req.params;\n\n    // Authorization check\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId !== companyId) {\n        const hierarchy = await storage.getCompanyHierarchy(user.companyId);\n        if (!hierarchy.includes(companyId)) {\n          return res.status(403).json({ message: \"Accesso negato per questa azienda\" });\n        }\n      } else if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Accesso negato\" });\n      }\n    }\n\n    // Get or create wallet\n    let wallet = await storage.getCompanyWallet(companyId);\n    if (!wallet) {\n      wallet = await storage.createCompanyWallet(companyId);\n    }\n\n    // Get wallet transactions from wallet_transactions table\n    const transactions = await storage.getWalletTransactions(companyId, 100); // Aumenta il limite per vedere pi√π transazioni\n\n    console.log(`üí• WALLET DATA: Company ${companyId}, Balance: ${wallet.balance}`);\n    console.log(`üí• TRANSACTION COUNT FROM DB: ${transactions.length}`);\n\n    // CRITICAL: ALWAYS include transactions in response\n    const responseData = {\n      id: wallet.id,\n      companyId: wallet.companyId,\n      balance: wallet.balance,\n      totalRecharges: wallet.totalRecharges,\n      totalSpent: wallet.totalSpent,\n      lastRechargeDate: wallet.lastRechargeDate,\n      stripeCustomerId: wallet.stripeCustomerId,\n      createdAt: wallet.createdAt,\n      updatedAt: wallet.updatedAt,\n      transactions: transactions, // ‚úÖ ALWAYS INCLUDED\n      _debug: {\n        timestamp,\n        transactionCount: transactions.length,\n        walletBalance: wallet.balance\n      }\n    };\n\n    console.log(`‚úÖ SENDING RESPONSE WITH ${transactions.length} TRANSACTIONS - TIMESTAMP: ${timestamp}`);\n\n    res.json(responseData);\n  } catch (error: any) {\n    console.error('Get company wallet error:', error);\n    res.status(500).json({ message: \"Errore interno del server\" });\n  }\n});\n\n// FORCE CREATE: Insert test transactions directly into database \nrouter.post(\"/api/wallet/:companyId/force-create-transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo superadmin pu√≤ creare transazioni\" });\n    }\n\n    const { companyId } = req.params;\n\n    // Check if transactions already exist\n    const existingTransactions = await storage.getWalletTransactions(companyId, 10);\n    if (existingTransactions.length > 0) {\n      return res.json({ \n        message: `Transazioni gi√† esistenti: ${existingTransactions.length}`,\n        transactions: existingTransactions \n      });\n    }\n\n    // Create test transactions for Shadow company\n    const testTransactions = [\n      {\n        type: 'ricarica',\n        amount: 100,\n        balanceBefore: 0,\n        balanceAfter: 100,\n        description: 'Ricarica iniziale Stripe - Test',\n        relatedEntityType: 'stripe'\n      },\n      {\n        type: 'ricarica', \n        amount: 90,\n        balanceBefore: 100,\n        balanceAfter: 190,\n        description: 'Seconda ricarica Stripe - Test',\n        relatedEntityType: 'stripe'\n      },\n      {\n        type: 'spesa',\n        amount: 10,\n        balanceBefore: 190,\n        balanceAfter: 180,\n        description: 'Rinnovo licenza AutoCAD Pro - Test',\n        relatedEntityType: 'license_renewal'\n      }\n    ];\n\n    const createdTransactions = [];\n\n    for (const tx of testTransactions) {\n      const transaction = await storage.createWalletTransaction({\n        companyId: companyId,\n        type: tx.type,\n        amount: tx.amount,\n        balanceBefore: tx.balanceBefore,\n        balanceAfter: tx.balanceAfter,\n        description: tx.description,\n        relatedEntityType: tx.relatedEntityType,\n        relatedEntityId: null,\n        fromCompanyId: null,\n        toCompanyId: null,\n        stripePaymentIntentId: null,\n        createdBy: user.username\n      });\n      createdTransactions.push(transaction);\n    }\n\n    console.log(`‚úÖ FORCE CREATED ${createdTransactions.length} transactions for company ${companyId}`);\n\n    return res.json({\n      success: true,\n      message: `Creati ${createdTransactions.length} transazioni di test`,\n      transactions: createdTransactions\n    });\n\n  } catch (error: any) {\n    console.error('üîß FORCE CREATE Error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// ENDPOINT TRANSAZIONI WALLET PER AZIENDA SPECIFICA\nrouter.get(\"/api/company/:companyId/wallet-transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const { companyId } = req.params;\n    console.log(`üè¶ ENDPOINT WALLET TRANSACTIONS per company: ${companyId}`);\n\n    const transactions = await storage.getWalletTransactions(companyId, 100);\n    console.log(`üí∞ TROVATE ${transactions.length} transazioni wallet`);\n\n    // Log prime transazioni per debug\n    if (transactions.length > 0) {\n      console.log(`‚ú® Prima transazione:`, transactions[0]);\n    }\n\n    res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');\n    res.setHeader('Content-Type', 'application/json');\n    res.json(transactions);\n\n  } catch (error: any) {\n    console.error('üí• ERRORE ENDPOINT WALLET TRANSACTIONS:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// DEBUG: Direct test of getWalletTransactions function  \nrouter.get(\"/api/wallet/:companyId/debug-transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo superadmin pu√≤ testare\" });\n    }\n\n    const { companyId } = req.params;\n    console.log(`üîß DEBUG: Testing getWalletTransactions for company ${companyId} at ${new Date().toISOString()}`);\n\n    const transactions = await storage.getWalletTransactions(companyId, 100);\n    console.log(`üîß DEBUG: Function returned ${transactions.length} transactions`);\n\n    if (transactions.length > 0) {\n      console.log(`üîß DEBUG: First transaction:`, JSON.stringify(transactions[0], null, 2));\n    }\n\n    return res.json({\n      companyId,\n      transactionsCount: transactions.length,\n      transactions: transactions\n    });\n\n  } catch (error: any) {\n    console.error('üîß DEBUG: Error:', error);\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Test endpoint to create sample transactions for testing  \nrouter.post(\"/api/wallet/:companyId/test-transactions\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Solo superadmin pu√≤ creare transazioni di test\" });\n    }\n\n    const { companyId } = req.params;\n    const wallet = await storage.getCompanyWallet(companyId);\n\n    if (!wallet) {\n      return res.status(404).json({ message: \"Wallet non trovato\" });\n    }\n\n    // Create a few test transactions\n    const testTransactions = [\n      {\n        type: 'ricarica',\n        amount: 100,\n        description: 'Ricarica test - Stripe payment',\n        stripePaymentIntentId: 'pi_test_' + Date.now()\n      },\n      {\n        type: 'spesa',\n        amount: 20,\n        description: 'Rinnovo licenza test - AutoCAD Pro'\n      }\n    ];\n\n    let currentBalance = wallet.balance;\n    const createdTransactions = [];\n\n    for (const testTx of testTransactions) {\n      const balanceBefore = currentBalance;\n      const balanceAfter = testTx.type === 'ricarica' ? \n        parseFloat(currentBalance?.toString() || '0') + testTx.amount : \n        parseFloat(currentBalance?.toString() || '0') - testTx.amount;\n\n      const transaction = await storage.createWalletTransaction({\n        companyId: companyId,\n        type: testTx.type,\n        amount: testTx.amount,\n        balanceBefore: parseFloat(balanceBefore?.toString() || '0'),\n        balanceAfter: parseFloat(balanceAfter?.toString() || '0'),\n        description: testTx.description,\n        relatedEntityType: 'test',\n        relatedEntityId: null,\n        fromCompanyId: null,\n        toCompanyId: null,\n        stripePaymentIntentId: testTx.stripePaymentIntentId || null,\n        createdBy: user.username\n      });\n\n      createdTransactions.push(transaction);\n      currentBalance = balanceAfter;\n    }\n\n    console.log(`‚úÖ Created ${createdTransactions.length} test transactions for company ${companyId}`);\n\n    res.json({\n      message: `Creati ${createdTransactions.length} transazioni di test`,\n      transactions: createdTransactions\n    });\n  } catch (error) {\n    console.error('Create test transactions error:', error);\n    res.status(500).json({ message: \"Errore interno del server\" });\n  }\n});\n\n// Recharge company wallet\nrouter.post(\"/api/wallet/:companyId/recharge\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n    const { companyId } = req.params;\n    const { amount } = req.body;\n\n    // Authorization check - only admin can recharge their own company wallet\n    if (user.role !== 'superadmin') {\n      if (user.role === 'admin' && user.companyId !== companyId) {\n        return res.status(403).json({ message: \"Puoi ricaricare solo il wallet della tua azienda\" });\n      } else if (user.role !== 'admin') {\n        return res.status(403).json({ message: \"Solo gli admin possono ricaricare i wallet\" });\n      }\n    }\n\n    if (!amount || amount <= 0) {\n      return res.status(400).json({ message: \"Importo non valido\" });\n    }\n\n    const updatedWallet = await storage.updateWalletBalance(\n      companyId,\n      amount,\n      'Ricarica manuale via admin',\n      'ricarica',\n      user.id\n    );\n\n    console.log(`üí∞ Wallet recharged: Company ${companyId}, Amount ${amount} crediti`);\n    res.json(updatedWallet);\n  } catch (error: any) {\n    console.error('Recharge wallet error:', error);\n    res.status(500).json({ message: error.message || \"Errore ricarica wallet\" });\n  }\n});\n\n// Stripe configuration endpoint\nrouter.post(\"/api/stripe/config\", authenticateToken, async (req: Request, res: Response) => {\n  try {\n    const user = (req as any).user;\n\n    // Only superadmin can configure Stripe settings\n    if (user.role !== 'superadmin') {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    const { publicKey, secretKey } = req.body;\n\n    // Validate the keys format\n    if (!publicKey || !secretKey) {\n      return res.status(400).json({ message: \"Both public and secret keys are required\" });\n    }\n\n    if (!publicKey.startsWith('pk_test_') && !publicKey.startsWith('pk_live_')) {\n      return res.status(400).json({ message: \"Invalid public key format. Must start with pk_test_ or pk_live_\" });\n    }\n\n    if (!secretKey.startsWith('sk_test_') && !secretKey.startsWith('sk_live_')) {\n      return res.status(400).json({ message: \"Invalid secret key format. Must start with sk_test_ or sk_live_\" });\n    }\n\n    // First ensure system_config table exists\n    try {\n      await database.query(`\n        CREATE TABLE IF NOT EXISTS system_config (\n          id VARCHAR(36) PRIMARY KEY,\n          config_key VARCHAR(100) UNIQUE NOT NULL,\n          config_value TEXT NOT NULL,\n          created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n          updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n          created_by VARCHAR(36),\n          updated_by VARCHAR(36)\n        )\n      `);\n    } catch (tableError) {\n      console.log('System config table already exists or creation failed:', tableError.message);\n    }\n\n    // Save to database for persistence\n    try {\n      await storage.saveStripeConfiguration(publicKey, secretKey, user.id);\n\n      // Also update runtime environment variables for immediate use\n      process.env.VITE_STRIPE_PUBLIC_KEY = publicKey;\n      process.env.STRIPE_SECRET_KEY = secretKey;\n\n      console.log('‚úÖ Stripe configuration saved to database by:', user.username);\n      console.log('Public key starts with:', publicKey.substring(0, 10));\n      console.log('Secret key starts with:', secretKey.substring(0, 10));\n\n      res.json({ \n        message: \"Stripe configuration saved successfully in database\",\n        needsRestart: false // No restart needed since we're saving to DB\n      });\n    } catch (dbError) {\n      console.error('Database save failed, falling back to runtime variables:', dbError);\n\n      // Fallback: just update runtime variables\n      process.env.VITE_STRIPE_PUBLIC_KEY = publicKey;\n      process.env.STRIPE_SECRET_KEY = secretKey;\n\n      res.json({ \n        message: \"Stripe configuration saved to runtime (restart required for persistence)\",\n        needsRestart: true,\n        warning: \"Could not save to database, configuration will be lost on restart\"\n      });\n    }\n  } catch (error) {\n    console.error('Stripe configuration error:', error);\n    res.status(500).json({ message: \"Internal server error\" });\n  }\n});\n\nexport default function registerRoutes(app: express.Express): void {\n  app.use(router);\n}","size_bytes":149665},"server/storage.ts":{"content":"import { database } from \"./database\";\nimport type {\n  User, InsertUser,\n  Company, InsertCompany,\n  Product, InsertProduct,\n  Module, InsertModule,\n  Client, InsertClient,\n  License, InsertLicense, LicenseWithDetails,\n  Transaction, InsertTransaction,\n  CompanyWallet, InsertCompanyWallet,\n  WalletTransaction, InsertWalletTransaction,\n  ActivationLog, InsertActivationLog,\n  AccessLog, InsertAccessLog,\n  DashboardStats, UserWithCompany, TestaRegAzienda, InsertTestaRegAzienda, DettRegAzienda, InsertDettRegAzienda, SoftwareRegistration, InsertSoftwareRegistration, Category\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport bcrypt from \"bcrypt\";\nimport { nanoid } from \"nanoid\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserById(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<UserWithCompany | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  getUsers(companyId?: string, includingInactive?: boolean): Promise<UserWithCompany[]>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n\n  // Company methods\n  getCompany(id: string): Promise<Company | undefined>;\n  getCompanies(): Promise<Company[]>;\n  getCompaniesByType(type: string): Promise<Company[]>;\n  createCompany(company: InsertCompany): Promise<Company>;\n  updateCompany(id: string, updates: Partial<Company>): Promise<Company>;\n  deleteCompany(id: string): Promise<void>;\n\n  // Product methods\n  getProducts(): Promise<Product[]>;\n  getProduct(id: string): Promise<Product | undefined>;\n  createProduct(product: InsertProduct): Promise<Product>;\n  updateProduct(id: string, updates: Partial<Product>): Promise<Product>;\n  deleteProduct(id: string): Promise<void>;\n\n  // Module methods\n  getModulesByProduct(productId: string): Promise<Module[]>;\n  createModule(module: InsertModule): Promise<Module>;\n\n  // Client methods\n  getClients(companyId?: string): Promise<Client[]>;\n  getClientsByCompany(companyId: string): Promise<Client[]>;\n  getClientsByCompanyHierarchy(companyId: string): Promise<Client[]>;\n  getClientsByCompanyAndSubcompanies(companyId: string): Promise<Client[]>;\n  getClient(id: string): Promise<Client | undefined>;\n  getClientById(id: string): Promise<Client | undefined>;\n  createClient(client: InsertClient): Promise<Client>;\n  updateClient(id: string, updates: Partial<Client>): Promise<Client>;\n  updateClientStatus(id: string, status: string): Promise<void>;\n  deleteClient(id: string): Promise<void>;\n\n  // License methods\n  getLicenses(filters?: any): Promise<LicenseWithDetails[]>;\n  getLicense(id: string): Promise<LicenseWithDetails | undefined>;\n  getLicenseByActivationKey(key: string): Promise<LicenseWithDetails | undefined>;\n  createLicense(license: InsertLicense): Promise<License>;\n  updateLicense(id: string, updates: Partial<License>): Promise<void>;\n  deleteLicense(id: string): Promise<void>;\n  activateLicense(activationKey: string, computerKey: string, deviceInfo: any): Promise<License>;\n  validateLicense(activationKey: string, computerKey?: string): Promise<LicenseWithDetails | null>;\n  getLicensesExpiringByDate(): Promise<LicenseWithDetails[]>;\n  getLicensesExpiringByCompanyHierarchy(companyId: string): Promise<LicenseWithDetails[]>;\n\n  // Transaction methods\n  createTransaction(transaction: InsertTransaction): Promise<Transaction>;\n  getTransactionsByLicense(licenseId: string): Promise<Transaction[]>;\n  getTransactionById(id: string): Promise<Transaction | null>;\n  updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction>;\n  deleteTransaction(id: string): Promise<void>;\n  clearAllTransactions(): Promise<number>;\n  getAllTransactions(): Promise<Transaction[]>;\n  getTransactionsByCompanyHierarchy(companyId: string): Promise<Transaction[]>;\n  getTransactionsByCompany(companyId: string): Promise<Transaction[]>;\n  updateTransactionStatus(id: string, status: string, paymentDate?: Date): Promise<void>;\n  getTransactionsByClient(clientId: string): Promise<Transaction[]>;\n  getTransactionsByCompanyAndClient(companyId?: string, clientId?: string): Promise<Transaction[]>;\n  deleteTransactionsByLicense(licenseId: string): Promise<void>;\n\n  // Wallet methods\n  getCompanyWallet(companyId: string): Promise<CompanyWallet | null>;\n  createCompanyWallet(companyId: string): Promise<CompanyWallet>;\n  updateWalletBalance(companyId: string, amount: number, description: string, type: string, createdBy?: string): Promise<CompanyWallet>;\n  transferCredits(fromCompanyId: string, toCompanyId: string, amount: number, createdBy: string): Promise<boolean>;\n  getWalletTransactions(companyId: string, limit?: number): Promise<WalletTransaction[]>;\n  createWalletTransaction(transaction: InsertWalletTransaction): Promise<WalletTransaction>;\n  chargeWalletForLicense(companyId: string, licenseId: string, amount: number, createdBy: string): Promise<boolean>;\n\n  // Logging methods\n  logActivation(log: InsertActivationLog): Promise<void>;\n  logAccess(log: InsertAccessLog): Promise<void>;\n\n  // Statistics\n  getDashboardStats(userId: string, userRole: string, userCompanyId?: string): Promise<DashboardStats>;\n  getActiveLicensesCount(): Promise<number>;\n  getActiveLicensesCountByCompanyHierarchy(companyId: string): Promise<number>;\n  getActiveLicensesCountByCompany(companyId: string): Promise<number>;\n\n  // Company hierarchy methods\n  getCompanyHierarchy(companyId: string): Promise<string[]>;\n  getLicensesByCompanyHierarchy(companyId: string): Promise<LicenseWithDetails[]>;\n  getClientsByCompanyHierarchy(companyId: string): Promise<Client[]>;\n  getAllProducts(): Promise<Product[]>;\n  getAllCompanies(): Promise<Company[]>;\n  getAllClients(): Promise<Client[]>;\n\n  // Software Registration methods\n  getSoftwareRegistrations(filters?: any): Promise<SoftwareRegistration[]>;\n  getSoftwareRegistration(id: string): Promise<SoftwareRegistration | undefined>;\n  getSoftwareRegistrationByComputerKey(computerKey: string): Promise<SoftwareRegistration | undefined>;\n  createSoftwareRegistration(registration: InsertSoftwareRegistration): Promise<SoftwareRegistration>;\n  updateSoftwareRegistration(id: string, updates: Partial<SoftwareRegistration>): Promise<SoftwareRegistration>;\n\n  // Device Registration methods - New tables\n  getTestaRegAzienda(): Promise<TestaRegAzienda[]>;\n  getTestaRegAziendaByPartitaIva(partitaIva: string): Promise<TestaRegAzienda | undefined>;\n  createTestaRegAzienda(registration: InsertTestaRegAzienda): Promise<TestaRegAzienda>;\n  getAllTestaRegAzienda(): Promise<TestaRegAzienda[]>;\n  updateTestaRegAzienda(partitaIva: string, updates: Partial<TestaRegAzienda>): Promise<TestaRegAzienda>;\n  getDettRegAzienda(partitaIva?: string): Promise<DettRegAzienda[]>;\n  getDettRegAziendaById(id: number): Promise<DettRegAzienda | undefined>;\n  createDettRegAzienda(registration: InsertDettRegAzienda): Promise<DettRegAzienda>;\n  updateDettRegAzienda(id: number, updates: Partial<DettRegAzienda>): Promise<DettRegAzienda>;\n  getDettRegAziendaByPartitaIva(partitaIva: string): Promise<DettRegAzienda[]>;\n  getDettRegAziendaByComputerKey(computerKey: string): Promise<DettRegAzienda | undefined>;\n  deleteTestaRegAzienda(partitaIva: string): Promise<void>;\n  deleteDettRegAzienda(id: number): Promise<void>;\n\n  // Configuration methods\n  saveStripeConfiguration(publicKey: string, secretKey: string, userId: string): Promise<void>;\n  getStripeConfiguration(): Promise<{publicKey: string; secretKey: string} | null>;\n\n  // Category methods\n  getAllCategories(): Promise<Category[]>;\n  getCategoriesByCompanyHierarchy(companyId: string): Promise<Category[]>;\n  createCategory(category: any): Promise<Category>;\n  getCategoryById(categoryId: string): Promise<Category | null>;\n  updateCategory(categoryId: string, updates: Partial<Category>): Promise<Category | null>;\n  deleteCategory(categoryId: string): Promise<boolean>;\n}\n\nclass DatabaseStorage implements IStorage {\n  // Use the real database connection\n  private get db() {\n    return database;\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const rows = await this.db.query(\n      'SELECT * FROM users WHERE id = ? AND is_active = TRUE',\n      [id]\n    );\n    return rows[0];\n  }\n\n  async getUserById(id: string): Promise<User | undefined> {\n    const rows = await this.db.query(\n      'SELECT * FROM users WHERE id = ? AND is_active = TRUE',\n      [id]\n    );\n    if (!rows[0]) {\n      return undefined;\n    }\n    const user = rows[0];\n    return {\n      id: user.id,\n      username: user.username,\n      password: user.password,\n      role: user.role,\n      companyId: user.company_id,\n      name: user.name,\n      email: user.email,\n      isActive: user.is_active,\n      createdAt: user.created_at\n    };\n  }\n\n  async getUserByUsername(username: string): Promise<UserWithCompany | undefined> {\n\n\n    const rows = await database.query(`\n      SELECT u.*, c.name as company_name, c.type as company_type, c.parent_id as company_parent_id\n      FROM users u\n      LEFT JOIN companies c ON u.company_id = c.id\n      WHERE u.username = ? AND u.is_active = TRUE\n    `, [username]);\n\n    if (!rows[0]) {\n      return undefined;\n    }\n\n    const user = rows[0];\n\n\n    return {\n      id: user.id,\n      username: user.username,\n      password: user.password,\n      role: user.role,\n      companyId: user.company_id,\n      name: user.name,\n      email: user.email,\n      isActive: user.is_active,\n      createdAt: user.created_at,\n      company: user.company_id ? {\n        id: user.company_id,\n        name: user.company_name,\n        type: user.company_type,\n        parentId: user.company_parent_id,\n        status: 'active',\n        contactInfo: null,\n        createdAt: new Date()\n      } : undefined\n    };\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n\n    await this.db.query(`\n      INSERT INTO users (id, username, password, role, company_id, name, email, is_active)\n      VALUES (?, ?, ?, ?, ?, ?, ?, TRUE)\n    `, [id, insertUser.username, hashedPassword, insertUser.role, insertUser.companyId, insertUser.name, insertUser.email]);\n\n    return { ...insertUser, id, password: hashedPassword, isActive: true, createdAt: new Date() };\n  }\n\n  async getCompany(id: string): Promise<Company | undefined> {\n    const rows = await this.db.query('SELECT * FROM companies WHERE id = ?', [id]);\n    return rows[0];\n  }\n\n  async getCompaniesByType(type: string): Promise<Company[]> {\n    const rows = await this.db.query('SELECT * FROM companies WHERE type = ? AND status = \"active\"', [type]);\n    return rows;\n  }\n\n  async getCompanies(): Promise<Company[]> {\n    try {\n      const rows = await this.db.query('SELECT * FROM companies ORDER BY name ASC');\n      console.log(`getCompanies: Found ${rows.length} companies in database`);\n\n      const mapped = rows.map((row: any) => ({\n        ...row,\n        parentId: (!row.parent_id || row.parent_id === '0' || row.parent_id === 0) ? null : row.parent_id,\n        contactInfo: row.contact_info ? JSON.parse(row.contact_info) : {},\n        createdAt: row.created_at\n      }));\n\n\n      return mapped;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async createCompany(insertCompany: InsertCompany): Promise<Company> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO companies (id, name, type, parent_id, status, contact_info)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `, [id, insertCompany.name, insertCompany.type, insertCompany.parentId || null, insertCompany.status || 'active', JSON.stringify(insertCompany.contactInfo || {})]);\n\n    const created = {\n      ...insertCompany,\n      id,\n      createdAt: new Date(),\n      parentId: insertCompany.parentId,\n      parent_id: insertCompany.parentId\n    };\n    return created;\n  }\n\n  async updateCompany(id: string, updates: Partial<Company>): Promise<Company> {\n    const updateFields = [];\n    const updateValues = [];\n\n    if (updates.name !== undefined) {\n      updateFields.push('name = ?');\n      updateValues.push(updates.name);\n    }\n    if (updates.type !== undefined) {\n      updateFields.push('type = ?');\n      updateValues.push(updates.type);\n    }\n    if (updates.parentId !== undefined) {\n      updateFields.push('parent_id = ?');\n      updateValues.push(updates.parentId);\n    }\n    if (updates.status !== undefined) {\n      updateFields.push('status = ?');\n      updateValues.push(updates.status);\n    }\n    if (updates.contactInfo !== undefined) {\n      updateFields.push('contact_info = ?');\n      updateValues.push(JSON.stringify(updates.contactInfo));\n    }\n\n    if (updateFields.length === 0) {\n      throw new Error('No fields to update');\n    }\n\n    updateValues.push(id);\n\n\n\n    await this.db.query(`\n      UPDATE companies SET ${updateFields.join(', ')} WHERE id = ?\n    `, updateValues);\n\n    const updatedCompany = await this.getCompany(id);\n    if (!updatedCompany) {\n      throw new Error('Company not found after update');\n    }\n\n    // Normalize the response\n    return {\n      ...updatedCompany,\n      parentId: updatedCompany.parent_id,\n      contactInfo: typeof updatedCompany.contact_info === 'string'\n        ? JSON.parse(updatedCompany.contact_info)\n        : (updatedCompany.contact_info || {})\n    };\n  }\n\n  async deleteCompany(id: string): Promise<void> {\n\n\n    // First check if company has clients\n    const clients = await this.db.query('SELECT COUNT(*) as count FROM clients WHERE company_id = ?', [id]);\n\n\n    if (clients[0].count > 0) {\n      throw new Error('Cannot delete company with existing clients');\n    }\n\n    // Get the company to find its parent\n    const company = await this.db.query('SELECT parent_id, name FROM companies WHERE id = ?', [id]);\n    if (company.length === 0) {\n      throw new Error('Company not found');\n    }\n\n    const parentId = company[0].parent_id;\n    const companyName = company[0].name;\n\n\n    // Check for subcompanies\n    const subcompanies = await this.db.query('SELECT id, name FROM companies WHERE parent_id = ?', [id]);\n\n\n    if (subcompanies.length > 0) {\n\n\n      // Move subcompanies to the parent company (or make them root if no parent)\n      const result = await this.db.query(\n        'UPDATE companies SET parent_id = ? WHERE parent_id = ?',\n        [parentId, id]\n      );\n      console.log(`deleteCompany: Updated ${result.affectedRows || 'unknown'} subcompanies`);\n    }\n\n    // Now delete the company\n    console.log(`deleteCompany: Deleting company ${companyName} (${id})`);\n    const deleteResult = await this.db.query('DELETE FROM companies WHERE id = ?', [id]);\n    console.log(`deleteCompany: Delete result - affected rows: ${deleteResult.affectedRows || 'unknown'}`);\n\n    if (deleteResult.affectedRows === 0) {\n      throw new Error('Company deletion failed - no rows affected');\n    }\n\n    console.log(`deleteCompany: Successfully deleted company ${companyName}`);\n  }\n\n  async getProducts(): Promise<Product[]> {\n    const rows = await this.db.query('SELECT * FROM products ORDER BY name');\n    return rows.map(row => ({\n      ...row,\n      supportedLicenseTypes: JSON.parse(row.supported_license_types || '[]'),\n      price: parseFloat(row.price || '0'),\n      discount: parseFloat(row.discount || '0'),\n      maxUsers: parseInt(row.max_users || '1'),\n      maxDevices: parseInt(row.max_devices || '1'),\n      trialDays: parseInt(row.trial_days || '30'),\n      licenseType: row.license_type\n    }));\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    try {\n      const rows = await database.query(`\n        SELECT p.*, c.name as category_name, c.color as category_color, c.company_id as category_company_id\n        FROM products p\n        LEFT JOIN categories c ON p.category_id = c.id\n        ORDER BY p.name, p.version\n      `);\n\n      console.log(`getAllProducts: Found ${rows.length} products from database`);\n      if (rows.length > 0) {\n        console.log(`Sample product with category:`, {\n          name: rows[0].name,\n          category_id: rows[0].category_id,\n          category_name: rows[0].category_name,\n          category_color: rows[0].category_color\n        });\n      }\n\n      // Map database fields to camelCase for frontend compatibility\n      return rows.map((row: any) => ({\n        id: row.id,\n        name: row.name,\n        version: row.version,\n        description: row.description,\n        categoryId: row.category_id,\n        category_id: row.category_id, // Keep snake_case for backward compatibility\n        category: row.category_name ? {\n          id: row.category_id,\n          name: row.category_name,\n          color: row.category_color,\n          companyId: row.category_company_id\n        } : null,\n        createdAt: row.created_at,\n        price: parseFloat(row.price || '0'),\n        discount: parseFloat(row.discount || '0'),\n        licenseType: row.license_type,\n        license_type: row.license_type, // Keep snake_case for backward compatibility\n        maxUsers: row.max_users,\n        max_users: row.max_users, // Keep snake_case for backward compatibility\n        maxDevices: row.max_devices,\n        max_devices: row.max_devices, // Keep snake_case for backward compatibility\n        trialDays: row.trial_days,\n        trial_days: row.trial_days, // Keep snake_case for backward compatibility\n        // Legacy fields for backward compatibility\n        supportedLicenseTypes: []\n      }));\n    } catch (error) {\n      console.error('Get all products error:', error);\n      throw error;\n    }\n  }\n\n  async getAllCompanies(): Promise<Company[]> {\n    return this.getCompanies();\n  }\n\n  async getAllClients(): Promise<Client[]> {\n    const rows = await this.db.query('SELECT * FROM clients ORDER BY name');\n    return rows.map(row => ({\n      ...row,\n      contactInfo: JSON.parse(row.contact_info || '{}')\n    }));\n  }\n\n  async getCompanyById(id: string): Promise<Company | undefined> {\n    return this.getCompany(id);\n  }\n\n  async getCompaniesInHierarchy(companyId: string): Promise<Company[]> {\n    const allCompanies = await this.getCompanies();\n    const hierarchy: Company[] = [];\n\n    // Find the root company\n    const rootCompany = allCompanies.find(c => c.id === companyId);\n    if (rootCompany) {\n      hierarchy.push(rootCompany);\n    }\n\n    // Find all subsidiaries recursively\n    const findSubcompanies = (parentId: string) => {\n      const subcompanies = allCompanies.filter(c => c.parent_id === parentId);\n      subcompanies.forEach(sub => {\n        hierarchy.push(sub);\n        findSubcompanies(sub.id);\n      });\n    };\n\n    findSubcompanies(companyId);\n    return hierarchy;\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const rows = await this.db.query('SELECT * FROM products WHERE id = ?', [id]);\n    if (rows[0]) {\n      return {\n        ...rows[0],\n        supportedLicenseTypes: JSON.parse(rows[0].supported_license_types || '[]')\n      };\n    }\n    return undefined;\n  }\n\n  async createProduct(productData: InsertProduct): Promise<Product> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO products (id, name, version, description, category_id, price, discount, license_type, max_users, max_devices, trial_days, created_at)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, NOW())\n    `, [\n      id,\n      productData.name,\n      productData.version,\n      productData.description,\n      productData.categoryId || null,\n      productData.price || 0,\n      productData.discount || 0,\n      productData.licenseType || 'permanente',\n      productData.maxUsers || 1,\n      productData.maxDevices || 1,\n      productData.trialDays || 30\n    ]);\n\n    return { ...productData, id, createdAt: new Date() };\n  }\n\n  async getModulesByProduct(productId: string): Promise<Module[]> {\n    const rows = await this.db.query('SELECT * FROM modules WHERE product_id = ?', [productId]);\n    return rows;\n  }\n\n  async createModule(insertModule: InsertModule): Promise<Module> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO modules (id, product_id, name, description, base_price)\n      VALUES (?, ?, ?, ?, ?)\n    `, [id, insertModule.productId, insertModule.name, insertModule.description, insertModule.basePrice]);\n\n    return { ...insertModule, id };\n  }\n\n  async getClients(companyId?: string): Promise<Client[]> {\n    let query = 'SELECT * FROM clients ORDER BY name';\n    let params: any[] = [];\n\n    if (companyId) {\n      query = 'SELECT * FROM clients WHERE company_id = ? ORDER BY name';\n      params = [companyId];\n    }\n\n    const rows = await this.db.query(query, params);\n    return rows.map(row => ({\n      ...row,\n      contactInfo: JSON.parse(row.contact_info || '{}')\n    }));\n  }\n\n  async getClientsByCompany(companyId: string): Promise<Client[]> {\n    const rows = await this.db.query(\n      'SELECT * FROM clients WHERE company_id = ? ORDER BY created_at DESC',\n      [companyId]\n    );\n    return rows.map(row => ({\n      ...row,\n      contactInfo: JSON.parse(row.contact_info || '{}')\n    }));\n  }\n\n  async getClientsByCompanyHierarchy(companyId: string): Promise<Client[]> {\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    console.log(`getClientsByCompanyHierarchy: Company hierarchy for ${companyId}:`, companyIds);\n\n    if (companyIds.length === 0) {\n      console.log(`getClientsByCompanyHierarchy: No companies in hierarchy, returning empty array`);\n      return [];\n    }\n\n    const placeholders = companyIds.map(() => '?').join(',');\n    const query = `SELECT * FROM clients WHERE company_id IN (${placeholders}) ORDER BY name`;\n\n    console.log(`getClientsByCompanyHierarchy: Executing query:`, query);\n    console.log(`getClientsByCompanyHierarchy: With company IDs:`, companyIds);\n    const rows = await this.db.query(query, companyIds);\n    console.log(`getClientsByCompanyHierarchy: Found ${rows.length} clients`);\n\n    const mappedClients = rows.map(row => ({\n      ...row,\n      contactInfo: JSON.parse(row.contact_info || '{}')\n    }));\n\n    console.log(`getClientsByCompanyHierarchy: Mapped clients:`, mappedClients.map(c => ({ id: c.id, name: c.name, email: c.email, company_id: c.company_id })));\n    return mappedClients;\n\n  }\n\n  async getClientsByCompanyAndSubcompanies(companyId: string): Promise<Client[]> {\n    // Use the main function for consistency\n    return this.getClientsByCompanyHierarchy(companyId);\n  }\n\n  async createClient(insertClient: InsertClient): Promise<Client> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO clients (id, company_id, name, email, status, contact_info, is_multi_site, is_multi_user)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `, [id, insertClient.companyId, insertClient.name, insertClient.email, insertClient.status || 'pending',\n        JSON.stringify(insertClient.contactInfo), insertClient.isMultiSite, insertClient.isMultiUser]);\n\n    return { ...insertClient, id, createdAt: new Date() };\n  }\n\n  async getCompanyHierarchy(companyId: string): Promise<string[]> {\n    const allCompanies = await this.getCompanies();\n    const hierarchy: string[] = [companyId];\n\n    console.log(`getCompanyHierarchy: Starting with company ${companyId}`);\n    console.log(`getCompanyHierarchy: All companies:`, allCompanies.map(c => ({ id: c.id, name: c.name, parent_id: c.parent_id })));\n\n    const findSubcompanies = (parentId: string) => {\n      const subcompanies = allCompanies.filter(c => c.parent_id === parentId);\n      console.log(`getCompanyHierarchy: Found ${subcompanies.length} subcompanies for parent ${parentId}:`, subcompanies.map(s => ({ id: s.id, name: s.name })));\n      subcompanies.forEach(sub => {\n        hierarchy.push(sub.id);\n        findSubcompanies(sub.id);\n      });\n    };\n\n    findSubcompanies(companyId);\n    console.log(`getCompanyHierarchy: Final hierarchy for ${companyId}:`, hierarchy);\n    return hierarchy;\n  }\n\n  async getClient(id: string): Promise<Client | undefined> {\n    const rows = await this.db.query('SELECT * FROM clients WHERE id = ?', [id]);\n    if (rows[0]) {\n      return {\n        ...rows[0],\n        contactInfo: JSON.parse(rows[0].contact_info || '{}')\n      };\n    }\n    return undefined;\n  }\n\n  async getClientById(id: string): Promise<Client | undefined> {\n    return this.getClient(id);\n  }\n\n  async updateClient(id: string, updates: Partial<Client>): Promise<Client> {\n    const updateFields: string[] = [];\n    const updateValues: any[] = [];\n\n    if (updates.name !== undefined) {\n      updateFields.push('name = ?');\n      updateValues.push(updates.name);\n    }\n    if (updates.email !== undefined) {\n      updateFields.push('email = ?');\n      updateValues.push(updates.email);\n    }\n    if (updates.company_id !== undefined) {\n      updateFields.push('company_id = ?');\n      updateValues.push(updates.company_id);\n    }\n    if (updates.status !== undefined) {\n      updateFields.push('status = ?');\n      updateValues.push(updates.status);\n    }\n    if (updates.isMultiSite !== undefined) {\n      updateFields.push('is_multi_site = ?');\n      updateValues.push(updates.isMultiSite ? 1 : 0);\n    }\n    if (updates.isMultiUser !== undefined) {\n      updateFields.push('is_multi_user = ?');\n      updateValues.push(updates.isMultiUser ? 1 : 0);\n    }\n    if (updates.contactInfo !== undefined) {\n      updateFields.push('contact_info = ?');\n      updateValues.push(JSON.stringify(updates.contactInfo));\n    }\n\n    if (updateFields.length === 0) {\n      throw new Error('No valid fields to update');\n    }\n\n    updateValues.push(id);\n\n    await this.db.query(`\n      UPDATE clients\n      SET ${updateFields.join(', ')}\n      WHERE id = ?\n    `, updateValues);\n\n    const updatedClient = await this.getClientById(id);\n    if (!updatedClient) {\n      throw new Error('Client not found after update');\n    }\n\n    return updatedClient;\n  }\n\n  async updateClientStatus(id: string, status: string): Promise<void> {\n    await this.db.query('UPDATE clients SET status = ? WHERE id = ?', [status, id]);\n  }\n\n  async deleteClient(id: string): Promise<void> {\n    await this.db.query('DELETE FROM clients WHERE id = ?', [id]);\n  }\n\n  async getProductById(id: string): Promise<any> {\n    const rows = await this.db.query('SELECT * FROM products WHERE id = ?', [id]);\n    return rows.length > 0 ? rows[0] : null;\n  }\n\n  async getLicensesByProduct(productId: string): Promise<any[]> {\n    const rows = await this.db.query('SELECT * FROM licenses WHERE product_id = ?', [productId]);\n    return rows;\n  }\n\n  async updateProduct(productId: string, updateData: any): Promise<Product> {\n    try {\n      const setParts = [];\n      const values = [];\n\n      if (updateData.name !== undefined) {\n        setParts.push('name = ?');\n        values.push(updateData.name);\n      }\n      if (updateData.version !== undefined) {\n        setParts.push('version = ?');\n        values.push(updateData.version);\n      }\n      if (updateData.description !== undefined) {\n        setParts.push('description = ?');\n        values.push(updateData.description);\n      }\n      if (updateData.categoryId !== undefined) {\n        setParts.push('category_id = ?');\n        values.push(updateData.categoryId);\n      }\n      if (updateData.licenseType !== undefined) {\n        setParts.push('license_type = ?');\n        values.push(updateData.licenseType);\n      }\n      if (updateData.price !== undefined) {\n        setParts.push('price = ?');\n        values.push(updateData.price);\n      }\n      if (updateData.discount !== undefined) {\n        setParts.push('discount = ?');\n        values.push(updateData.discount);\n      }\n      if (updateData.maxUsers !== undefined) {\n        setParts.push('max_users = ?');\n        values.push(updateData.maxUsers);\n      }\n      if (updateData.maxDevices !== undefined) {\n        setParts.push('max_devices = ?');\n        values.push(updateData.maxDevices);\n      }\n      if (updateData.trialDays !== undefined) {\n        setParts.push('trial_days = ?');\n        values.push(updateData.trialDays);\n      }\n\n      if (setParts.length === 0) {\n        throw new Error('No fields to update');\n      }\n\n      values.push(productId);\n\n      await this.db.query(`\n        UPDATE products\n        SET ${setParts.join(', ')}\n        WHERE id = ?\n      `, values);\n\n      return await this.getProduct(productId) as Product;\n    } catch (error) {\n      console.error('Update product error:', error);\n      throw error;\n    }\n  }\n\n  async deleteProduct(id: string): Promise<void> {\n    await this.db.query('DELETE FROM products WHERE id = ?', [id]);\n  }\n\n  async getLicenses(filters?: any): Promise<LicenseWithDetails[]> {\n    let query = `\n      SELECT\n        l.*,\n        c.name as client_name, c.email as client_email, c.status as client_status, c.company_id,\n        p.name as product_name, p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      JOIN clients c ON l.client_id = c.id\n      JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON l.assigned_company = comp.id\n      ORDER BY l.expiry_date ASC, l.created_at DESC\n    `;\n\n    const rows = await this.db.query(query);\n\n    return this.mapLicenseRows(rows);\n  }\n\n  async getLicense(id: string): Promise<LicenseWithDetails | undefined> {\n    const licenses = await this.getLicenses();\n    return licenses.find(l => l.id === id);\n  }\n\n  async getLicenseByActivationKey(key: string): Promise<LicenseWithDetails | undefined> {\n    const licenses = await this.getLicenses();\n    return licenses.find(l => l.activationKey === key);\n  }\n\n  async getAllLicenses(): Promise<LicenseWithDetails[]> {\n    const query = `\n      SELECT\n        l.*,\n        c.name as client_name,\n        c.email as client_email,\n        c.status as client_status,\n        c.company_id,\n        p.name as product_name,\n        p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      LEFT JOIN clients c ON l.client_id = c.id\n      LEFT JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON c.company_id = comp.id\n      ORDER BY l.created_at DESC\n    `;\n\n    const rows = await this.db.query(query);\n    console.log(`getAllLicenses: Query returned ${rows.length} raw rows`);\n    return this.mapLicenseRows(rows);\n  }\n\n  async getLicensesByCompanyHierarchy(companyId: string): Promise<LicenseWithDetails[]> {\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    const placeholders = companyIds.map(() => '?').join(',');\n\n    console.log(`getLicensesByCompanyHierarchy: Starting with company ${companyId}`);\n    console.log(`getLicensesByCompanyHierarchy: Company hierarchy IDs: [${companyIds.join(', ')}]`);\n\n    const query = `\n      SELECT\n        l.*,\n        c.name as client_name,\n        c.email as client_email,\n        c.status as client_status,\n        c.company_id,\n        p.name as product_name,\n        p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      LEFT JOIN clients c ON l.client_id = c.id\n      LEFT JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON c.company_id = comp.id\n      WHERE c.company_id IN (${placeholders})\n      ORDER BY l.created_at DESC\n    `;\n\n    console.log(`getLicensesByCompanyHierarchy: Executing query with placeholders: ${placeholders}`);\n    console.log(`getLicensesByCompanyHierarchy: Query parameters: [${companyIds.join(', ')}]`);\n\n    const rows = await this.db.query(query, companyIds);\n    console.log(`getLicensesByCompanyHierarchy: Query returned ${rows.length} raw rows`);\n\n    // Debug: let's check what clients exist in these companies\n    const debugClientsQuery = `SELECT id, name, email, company_id FROM clients WHERE company_id IN (${placeholders})`;\n    const debugClients = await this.db.query(debugClientsQuery, companyIds);\n    console.log(`getLicensesByCompanyHierarchy: DEBUG - Clients in hierarchy companies:`, debugClients.map(c => ({ name: c.name, email: c.email, company_id: c.company_id })));\n\n    // Debug: let's check all licenses and their client company_ids\n    const debugLicensesQuery = `\n      SELECT l.id, l.activation_key, c.name as client_name, c.company_id\n      FROM licenses l\n      JOIN clients c ON l.client_id = c.id\n      ORDER BY l.created_at DESC\n    `;\n    const debugLicenses = await this.db.query(debugLicensesQuery);\n    const mappedLicenses = this.mapLicenseRows(rows);\n\n    return mappedLicenses;\n  }\n\n  async createLicense(insertLicense: InsertLicense): Promise<License> {\n    const id = randomUUID();\n\n    // Genera automaticamente la chiave di attivazione se non fornita\n    const activationKey = insertLicense.activationKey || `${(insertLicense.licenseType || 'LIC').toUpperCase()}-${randomUUID().substring(0, 8).toUpperCase()}`;\n\n    // üö´ NON calcolare automaticamente la data di scadenza durante la creazione\n    // La data di scadenza viene calcolata SOLO durante l'attivazione della licenza\n    let expiryDate = insertLicense.expiryDate || null;\n\n    // SOLO se la licenza viene creata GI√Ä con computerKey (attivazione immediata)\n    // allora calcola la data di scadenza, altrimenti rimane NULL\n    if (insertLicense.computerKey && insertLicense.activationKey) {\n\n      const baseDate = new Date();\n\n      if (insertLicense.licenseType === 'abbonamento_mensile') {\n        expiryDate = new Date(baseDate);\n        expiryDate.setMonth(expiryDate.getMonth() + 1);\n        expiryDate.setDate(expiryDate.getDate() - 1); // Per 18/8 -> 17/9\n\n      } else if (insertLicense.licenseType === 'abbonamento_annuale') {\n        expiryDate = new Date(baseDate);\n        expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n        expiryDate.setDate(expiryDate.getDate() - 1); // Per 18/8/25 -> 17/8/26\n\n      } else if (insertLicense.licenseType === 'trial') {\n        expiryDate = new Date(baseDate);\n        expiryDate.setDate(expiryDate.getDate() + 30); // Trial di 30 giorni\n\n      }\n    } else {\n\n    }\n\n    // Se viene fornita una chiave di attivazione e chiave computer, attiva automaticamente\n    const shouldActivate = insertLicense.activationKey && insertLicense.computerKey;\n    const finalStatus = shouldActivate ? 'attiva' : (insertLicense.status || 'in_attesa_convalida');\n    const activationDate = shouldActivate ? new Date() : (insertLicense.activationDate || null);\n\n    await this.db.query(`\n      INSERT INTO licenses (\n        id, client_id, product_id, activation_key, computer_key, activation_date,\n        expiry_date, license_type, status, max_users, max_devices, price, discount,\n        active_modules, assigned_company, assigned_agent, renewal_enabled, renewal_period\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      id,\n      insertLicense.clientId,\n      insertLicense.productId,\n      activationKey,\n      insertLicense.computerKey || null,\n      activationDate,\n      expiryDate,\n      insertLicense.licenseType || 'permanente',\n      finalStatus,\n      insertLicense.maxUsers || 1,\n      insertLicense.maxDevices || 1,\n      parseFloat(insertLicense.price?.toString() || '0'),\n      parseFloat(insertLicense.discount?.toString() || '0'),\n      JSON.stringify(insertLicense.activeModules || ['core']),\n      insertLicense.assignedCompany || null,\n      insertLicense.assignedAgent || null,\n      insertLicense.renewalEnabled ? 1 : 0,\n      insertLicense.renewalPeriod || null\n    ]);\n\n    // NON creare automaticamente la transazione durante la creazione della licenza\n    // La transazione verr√† creata solo durante l'assegnazione/attivazione della licenza\n\n    return {\n      ...insertLicense,\n      id,\n      activationKey,\n      expiryDate,\n      createdAt: new Date()\n    };\n  }\n\n  async updateLicense(id: string, updates: Partial<License>): Promise<void> {\n\n\n    const fieldMapping: { [key: string]: string } = {\n      'maxUsers': 'max_users',\n      'maxDevices': 'max_devices',\n      'licenseType': 'license_type',\n      'activationKey': 'activation_key',\n      'computerKey': 'computer_key',\n      'activationDate': 'activation_date',\n      'expiryDate': 'expiry_date',\n      'activeModules': 'active_modules',\n      'assignedCompany': 'assigned_company',\n      'assignedAgent': 'assigned_agent',\n      'renewalEnabled': 'renewal_enabled',\n      'renewalPeriod': 'renewal_period'\n    };\n\n    const fields = Object.keys(updates).filter(key => key !== 'id' && key !== 'createdAt');\n    const setClause = fields.map(field => {\n      const dbField = fieldMapping[field] || field;\n      return `${dbField} = ?`;\n    }).join(', ');\n\n    const values = fields.map(field => {\n      let value = updates[field as keyof License];\n      // Convert activeModules to JSON string if needed\n      if (field === 'activeModules' && Array.isArray(value)) {\n        value = JSON.stringify(value);\n      }\n      // Convert Date objects or ISO strings to MySQL datetime format\n      if (field === 'activationDate' || field === 'expiryDate') {\n        if (value instanceof Date) {\n          const convertedValue = value.toISOString().slice(0, 19).replace('T', ' ');\n\n          value = convertedValue;\n        } else if (typeof value === 'string' && value.includes('T')) {\n          // Convert ISO string to MySQL datetime format\n          const convertedValue = value.slice(0, 19).replace('T', ' ');\n\n          value = convertedValue;\n        }\n      }\n      return value;\n    });\n\n    const query = `UPDATE licenses SET ${setClause} WHERE id = ?`;\n    console.log(`Executing query: ${query}`);\n    console.log(`With values:`, [...values, id]);\n\n    await this.db.query(query, [...values, id]);\n    console.log(`License ${id} updated successfully in database`);\n  }\n\n  async deleteLicense(licenseId: string): Promise<void> {\n    try {\n      // First delete any associated transactions\n      await this.db.query('DELETE FROM transactions WHERE license_id = ?', [licenseId]);\n\n      // Then delete the license\n      const query = 'DELETE FROM licenses WHERE id = ?';\n      await this.db.query(query, [licenseId]);\n    } catch (error) {\n      console.error('Database query error:', error);\n      throw error;\n    }\n  }\n\n  async activateLicense(activationKey: string, computerKey: string, deviceInfo: any): Promise<License> {\n    const license = await this.getLicenseByActivationKey(activationKey);\n    if (!license) {\n      throw new Error('License not found');\n    }\n\n    if (license.status === 'attiva') {\n      throw new Error('License already activated');\n    }\n\n    // Calcola la data di scadenza basata sulla data di attivazione\n    const activationDate = new Date();\n    let expiryDate = license.expiryDate;\n\n    // Se non c'√® data di scadenza e la licenza √® di tipo abbonamento o trial, calcolala\n    if (!expiryDate) {\n      if (license.licenseType === 'abbonamento_mensile') {\n        expiryDate = new Date(activationDate);\n        expiryDate.setMonth(expiryDate.getMonth() + 1);\n        expiryDate.setDate(expiryDate.getDate() - 1);\n      } else if (license.licenseType === 'abbonamento_annuale') {\n        expiryDate = new Date(activationDate);\n        expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n        expiryDate.setDate(expiryDate.getDate() - 1);\n      } else if (license.licenseType === 'trial') {\n        expiryDate = new Date(activationDate);\n        expiryDate.setDate(expiryDate.getDate() + 30);\n      }\n    }\n\n    await this.updateLicense(license.id, {\n      computerKey,\n      activationDate,\n      expiryDate,\n      status: 'attiva'\n    });\n\n    await this.logActivation({\n      licenseId: license.id,\n      keyType: 'activation',\n      deviceInfo,\n      ipAddress: '',\n      userAgent: '',\n      result: 'success'\n    });\n\n    return license;\n  }\n\n  async validateLicense(activationKey: string, computerKey?: string): Promise<LicenseWithDetails | null> {\n    const license = await this.getLicenseByActivationKey(activationKey);\n\n    if (!license) {\n      return null;\n    }\n\n    if (license.status !== 'attiva') {\n      return null;\n    }\n\n    if (computerKey && license.computerKey !== computerKey) {\n      return null;\n    }\n\n    if (license.expiryDate && new Date() > new Date(license.expiryDate)) {\n      await this.updateLicense(license.id, { status: 'scaduta' });\n      return null;\n    }\n\n    return license;\n  }\n\n  async countAuthorizedDevicesForLicense(licenseId: string): Promise<number> {\n    try {\n      // Count devices with computer keys assigned to this license through software registrations\n      const query = `\n        SELECT COUNT(*) as count\n        FROM Dett_Reg_Azienda d\n        INNER JOIN Testa_Reg_Azienda t ON d.PartitaIva = t.PartitaIva\n        WHERE t.ID_Licenza = ?\n        AND d.Computer_Key IS NOT NULL\n        AND d.Computer_Key != ''\n      `;\n\n      const result = await this.db.query(query, [licenseId]);\n      const count = result[0]?.count || 0;\n\n      console.log(`License ${licenseId} has ${count} authorized devices through software registrations`);\n\n      return count;\n    } catch (error) {\n      console.error('Error counting authorized devices for license:', error);\n      return 0;\n    }\n  }\n\n  // Helper to map transaction rows from DB to Transaction object\n  private mapTransactionRow(row: any) {\n    return {\n      id: row.id,\n      licenseId: row.license_id,\n      clientId: row.client_id,\n      companyId: row.company_id,\n      type: row.type,\n      amount: row.amount,\n      discount: row.discount || 0,\n      finalAmount: row.final_amount || row.amount,\n      paymentMethod: row.payment_method,\n      status: row.status,\n      paymentLink: row.payment_link,\n      paymentDate: row.payment_date,\n      creditsUsed: row.credits_used,\n      notes: row.notes,\n      modifiedBy: row.modified_by,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      // Additional fields for display - with fallback to license data\n      client_name: row.client_name || row.license_client_name,\n      client_email: row.client_email || row.license_client_email,\n      company_name: row.company_name || row.license_company_name,\n      license_key: row.license_key\n    };\n  }\n\n\n  async createTransaction(transactionData: InsertTransaction): Promise<Transaction> {\n    const id = nanoid();\n\n    // Ensure proper numeric calculation\n    const amount = parseFloat(transactionData.amount || '0');\n    const discount = parseFloat(transactionData.discount || '0');\n    // If finalAmount is provided, use it; otherwise calculate it\n    const finalAmount = parseFloat(transactionData.finalAmount || '0') || Math.max(0, amount - discount);\n\n    const query = `\n      INSERT INTO transactions (\n        id, license_id, client_id, company_id, type, amount, discount,\n        final_amount, payment_method, status, payment_link, payment_date,\n        notes, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `;\n\n    const now = new Date(); // Use Date object for better handling of date/time\n\n    await this.db.query(query, [\n      id,\n      transactionData.licenseId,\n      transactionData.clientId,\n      transactionData.companyId || null,\n      transactionData.type || 'attivazione',\n      amount,\n      discount,\n      finalAmount,\n      transactionData.paymentMethod || null,\n      transactionData.status || 'in_attesa',\n      transactionData.paymentLink || null,\n      transactionData.paymentDate || null,\n      transactionData.notes || null,\n      now,\n      now\n    ]);\n\n    return {\n      id,\n      ...transactionData,\n      amount,\n      discount,\n      finalAmount,\n      createdAt: now,\n      updatedAt: now\n    };\n  }\n\n  async getTransactionsByLicense(licenseId: string): Promise<Transaction[]> {\n    const rows = await this.db.query(`\n      SELECT \n        t.*,\n        c.name as client_name,\n        l.activation_key as license_key\n      FROM transactions t\n      LEFT JOIN clients c ON t.client_id = c.id\n      LEFT JOIN licenses l ON t.license_id = l.id\n      WHERE t.license_id = ?\n      ORDER BY t.created_at DESC\n    `, [licenseId]);\n\n    return rows.map((row: any) => this.mapTransactionRow(row));\n  }\n\n  async getAllTransactions(): Promise<Transaction[]> {\n    try {\n      const query = `\n        SELECT\n          t.*,\n          c.name as client_name,\n          c.email as client_email,\n          comp.name as company_name,\n          l.activation_key as license_key,\n          lic_client.name as license_client_name,\n          lic_client.email as license_client_email,\n          lic_comp.name as license_company_name\n        FROM transactions t\n        LEFT JOIN clients c ON t.client_id = c.id\n        LEFT JOIN companies comp ON t.company_id = comp.id\n        LEFT JOIN licenses l ON t.license_id = l.id\n        LEFT JOIN clients lic_client ON l.client_id = lic_client.id\n        LEFT JOIN companies lic_comp ON lic_client.company_id = lic_comp.id\n        ORDER BY t.created_at DESC\n      `;\n\n      const rows = await this.db.query(query);\n      return rows.map((row: any) => this.mapTransactionRow(row));\n    } catch (error) {\n      console.error('Error getting all transactions:', error);\n      throw error;\n    }\n  }\n\n  async getTransactionsByCompanyHierarchy(companyId: string): Promise<any[]> {\n    try {\n      // Get all companies in the hierarchy\n      const companyIds = await this.getCompanyHierarchy(companyId);\n      const placeholders = companyIds.map(() => '?').join(',');\n\n      console.log(`getTransactionsByCompanyHierarchy: Looking for transactions in company hierarchy: [${companyIds.join(', ')}]`);\n\n      const query = `\n        SELECT\n          t.*,\n          c.name as client_name,\n          c.email as client_email,\n          c.company_id as client_company_id,\n          comp.name as company_name,\n          client_comp.name as client_company_name,\n          l.activation_key as license_key,\n          u.username as modified_by_username,\n          lic_client.name as license_client_name,\n          lic_client.email as license_client_email,\n          lic_comp.name as license_company_name\n        FROM transactions t\n        LEFT JOIN clients c ON t.client_id = c.id\n        LEFT JOIN companies comp ON t.company_id = comp.id\n        LEFT JOIN companies client_comp ON c.company_id = client_comp.id\n        LEFT JOIN licenses l ON t.license_id = l.id\n        LEFT JOIN users u ON t.modified_by = u.id\n        LEFT JOIN clients lic_client ON l.client_id = lic_client.id\n        LEFT JOIN companies lic_comp ON lic_client.company_id = lic_comp.id\n        WHERE (\n          t.company_id IN (${placeholders}) OR \n          c.company_id IN (${placeholders}) OR\n          lic_client.company_id IN (${placeholders})\n        )\n        ORDER BY COALESCE(t.created_at, t.updated_at) DESC\n      `;\n\n      console.log(`getTransactionsByCompanyHierarchy: Executing query with company IDs: [${companyIds.join(', ')}]`);\n\n      const rows = await this.db.query(query, [...companyIds, ...companyIds, ...companyIds]);\n\n      console.log(`getTransactionsByCompanyHierarchy: Found ${rows.length} transactions`);\n\n      // Debug: log transaction details\n      rows.forEach((row: any) => {\n        console.log(`Transaction ${row.id}: company_id=${row.company_id}, client_company_id=${row.client_company_id}, client_name=${row.client_name}`);\n      });\n\n      return rows.map((row: any) => ({\n        id: row.id,\n        licenseId: row.license_id,\n        clientId: row.client_id,\n        companyId: row.company_id || row.client_company_id,\n        client_name: row.client_name,\n        client_email: row.client_email,\n        company_name: row.company_name || row.client_company_name,\n        license_key: row.license_key,\n        type: row.type,\n        amount: row.amount,\n        discount: row.discount,\n        final_amount: row.final_amount,\n        paymentMethod: row.payment_method,\n        status: row.status,\n        paymentLink: row.payment_link,\n        paymentDate: row.payment_date,\n        notes: row.notes,\n        createdAt: row.created_at,\n        updatedAt: row.updated_at,\n        modifiedBy: row.modified_by_username,\n        // Fallback data from license\n        license_client_name: row.license_client_name,\n        license_client_email: row.license_client_email,\n        license_company_name: row.license_company_name\n      }));\n    } catch (error) {\n      console.error('Error getting transactions by company hierarchy:', error);\n      throw error;\n    }\n  }\n\n  async getTransactionsByCompany(companyId: string): Promise<Transaction[]> {\n    const query = `\n      SELECT \n        t.*,\n        c.name as client_name,\n        c.email as client_email,\n        comp.name as company_name,\n        l.activation_key as license_key,\n        lic_client.name as license_client_name,\n        lic_client.email as license_client_email,\n        lic_comp.name as license_company_name\n      FROM transactions t\n      LEFT JOIN clients c ON t.client_id = c.id\n      LEFT JOIN companies comp ON t.company_id = comp.id\n      LEFT JOIN licenses l ON t.license_id = l.id\n      LEFT JOIN clients lic_client ON l.client_id = lic_client.id\n      LEFT JOIN companies lic_comp ON lic_client.company_id = lic_comp.id\n      WHERE t.company_id = ?\n      ORDER BY t.created_at DESC\n    `;\n\n    const rows = await database.query(query, [companyId]);\n    return rows.map((row: any) => this.mapTransactionRow(row));\n  }\n\n  async getTransactionById(id: string): Promise<Transaction | null> {\n    const rows = await this.db.query(\n      'SELECT * FROM transactions WHERE id = ?',\n      [id]\n    );\n    return rows[0] || null;\n  }\n\n\n\n  async updateTransaction(id: string, updates: Partial<Transaction>): Promise<Transaction> {\n    const updateFields = [];\n    const updateValues = [];\n\n    for (const [key, value] of Object.entries(updates)) {\n      if (key !== 'id' && key !== 'createdAt') {\n        updateFields.push(`${key.replace(/([A-Z])/g, '_$1').toLowerCase()} = ?`);\n        updateValues.push(value);\n      }\n    }\n\n    updateFields.push('updated_at = ?');\n    updateValues.push(new Date());\n    updateValues.push(id);\n\n    await this.db.query(\n      `UPDATE transactions SET ${updateFields.join(', ')} WHERE id = ?`,\n      updateValues\n    );\n\n    const transaction = await this.getTransactionById(id);\n    if (!transaction) {\n      throw new Error('Transaction not found after update');\n    }\n    return transaction;\n  }\n\n  async updateTransactionStatus(transactionId: string, status: string, paymentMethod?: string, modifiedBy?: string): Promise<any> {\n    console.log(`üîß updateTransactionStatus called with: ${transactionId}, status: ${status}, paymentMethod: ${paymentMethod}, modifiedBy: ${modifiedBy}`);\n    try {\n      // Format date for MariaDB compatibility (YYYY-MM-DD HH:MM:SS)\n      const now = new Date();\n      const mariaDbDate = now.toISOString().slice(0, 19).replace('T', ' ');\n\n      console.log(`üìÖ Current MariaDB date: ${mariaDbDate}`);\n\n      // Determine payment date based on status\n      let paymentDateValue = null;\n      if (status === 'in_attesa') {\n        // If status is \"in_attesa\", explicitly set payment_date to NULL\n        paymentDateValue = null;\n        console.log(`‚è≥ Status is \"in_attesa\" - removing payment date (setting to NULL)`);\n      } else if (status === 'contanti' || status === 'bonifico' || status === 'carta_di_credito' ||\n                 status === 'dall_agente' || status === 'dal_rivenditore' ||\n                 status === 'completed' || status === 'manual_paid') {\n        // If status indicates payment received, set current date\n        paymentDateValue = mariaDbDate;\n        console.log(`üí≥ Status indicates payment received - setting payment date to: ${mariaDbDate}`);\n      } else {\n        console.log(`‚ÑπÔ∏è Status \"${status}\" does not require payment date change - keeping current value`);\n      }\n\n      // Build the query dynamically based on what needs to be updated\n      const updateFields = ['status = ?', 'updated_at = ?'];\n      const queryParams = [status, mariaDbDate];\n\n      // Handle payment date explicitly\n      updateFields.push('payment_date = ?');\n      queryParams.push(paymentDateValue);\n\n      // Handle payment method\n      if (paymentMethod !== undefined) {\n        updateFields.push('payment_method = ?');\n        queryParams.push(paymentMethod);\n      }\n\n      // Handle modified by\n      if (modifiedBy !== undefined) {\n        updateFields.push('modified_by = ?');\n        queryParams.push(modifiedBy);\n      }\n\n      // Add transaction ID for WHERE clause\n      queryParams.push(transactionId);\n\n      const query = `UPDATE transactions SET ${updateFields.join(', ')} WHERE id = ?`;\n      console.log(`üîç Executing SQL query: ${query}`);\n      console.log(`üìù With parameters:`, queryParams);\n\n      const result = await this.db.query(query, queryParams);\n\n      if (result.affectedRows === 0) {\n        throw new Error('Transaction not found');\n      }\n\n      console.log(`‚úÖ Transaction ${transactionId} updated successfully with ${result.affectedRows} rows affected`);\n      return await this.getTransactionById(transactionId);\n    } catch (error) {\n      console.error('Error updating transaction status:', error);\n      throw error;\n    }\n  }\n\n  async getTransaction(id: string): Promise<Transaction | undefined> {\n    const rows = await this.db.query(`\n      SELECT\n        t.*,\n        c.name as client_name,\n        c.email as client_email,\n        comp.name as company_name,\n        l.activation_key as license_key\n      FROM transactions t\n      LEFT JOIN clients c ON t.client_id = c.id\n      LEFT JOIN companies comp ON t.company_id = comp.id OR c.company_id = comp.id\n      LEFT JOIN licenses l ON t.license_id = l.id\n      WHERE t.id = ?\n    `, [id]);\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      id: row.id,\n      licenseId: row.license_id,\n      clientId: row.client_id,\n      companyId: row.company_id,\n      client_name: row.client_name,\n      client_email: row.client_email,\n      company_name: row.company_name,\n      license_key: row.license_key,\n      type: row.type,\n      amount: parseFloat(row.amount || '0'),\n      discount: parseFloat(row.discount || '0'),\n      finalAmount: parseFloat(row.final_amount || '0'),\n      final_amount: parseFloat(row.final_amount || '0'),\n      paymentMethod: row.payment_method,\n      status: row.status,\n      paymentLink: row.payment_link,\n      paymentDate: row.payment_date,\n      notes: row.notes,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      created_at: row.created_at,\n      creditsUsed: parseFloat(row.credits_used || '0'), // Add this field for refund processing\n      modifiedBy: row.modified_by\n    };\n  }\n\n  async updateTransactionPaymentLink(id: string, paymentLink: string): Promise<Transaction> {\n    return await this.updateTransaction(id, {\n      paymentLink,\n      updatedAt: new Date()\n    });\n  }\n\n  async getTransactionsByClient(clientId: string): Promise<Transaction[]> {\n    const rows = await this.db.query(\n      'SELECT * FROM transactions WHERE client_id = ? ORDER BY created_at DESC',\n      [clientId]\n    );\n    return rows;\n  }\n\n  async getTransactionsByCompanyAndClient(companyId?: string, clientId?: string): Promise<Transaction[]> {\n    let query = 'SELECT t.* FROM transactions t';\n    let whereConditions = [];\n    let queryParams = [];\n\n    if (companyId || clientId) {\n      query += ' JOIN licenses l ON t.license_id = l.id JOIN clients c ON l.client_id = c.id';\n\n      if (companyId) {\n        whereConditions.push('c.company_id = ?');\n        queryParams.push(companyId);\n      }\n\n      if (clientId) {\n        whereConditions.push('c.id = ?');\n        queryParams.push(clientId);\n      }\n    }\n\n    if (whereConditions.length > 0) {\n      query += ' WHERE ' + whereConditions.join(' AND ');\n    }\n\n    query += ' ORDER BY t.created_at DESC';\n\n    const rows = await this.db.query(query, queryParams);\n    return rows;\n  }\n\n  async deleteTransaction(id: string): Promise<void> {\n    await this.db.query('DELETE FROM transactions WHERE id = ?', [id]);\n  }\n\n  async deleteTransactionsByLicense(licenseId: string): Promise<void> {\n    await this.db.query('DELETE FROM transactions WHERE license_id = ?', [licenseId]);\n  }\n\n  async clearAllTransactions(): Promise<number> {\n    const result = await this.db.query('DELETE FROM transactions');\n    return result.affectedRows || 0;\n  }\n\n  async logActivation(log: InsertActivationLog): Promise<void> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO activation_logs (id, license_id, key_type, device_info, ip_address, user_agent, result, error_message)\n      VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    `, [id, log.licenseId, log.keyType, JSON.stringify(log.deviceInfo), log.ipAddress, log.userAgent, log.result, log.errorMessage]);\n  }\n\n  async logAccess(log: InsertAccessLog): Promise<void> {\n    const id = randomUUID();\n    await this.db.query(`\n      INSERT INTO access_logs (id, user_id, action, resource, ip_address, user_agent)\n      VALUES (?, ?, ?, ?, ?, ?)\n    `, [id, log.userId, log.action, log.resource, log.ipAddress, log.userAgent]);\n  }\n\n  async getLicensesExpiringByDate(): Promise<LicenseWithDetails[]> {\n    const query = `\n      SELECT\n        l.*,\n        c.name as client_name, c.email as client_email, c.status as client_status, c.company_id,\n        p.name as product_name, p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      JOIN clients c ON l.client_id = c.id\n      JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON l.assigned_company = comp.id\n      WHERE l.expiry_date IS NOT NULL\n      AND l.status = 'attiva'\n      ORDER BY l.expiry_date ASC\n    `\n\n    const rows = await this.db.query(query);\n    return this.mapLicenseRows(rows);\n  }\n\n  async getLicensesExpiringByCompanyHierarchy(companyId: string): Promise<LicenseWithDetails[]> {\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    const placeholders = companyIds.map(() => '?').join(',');\n\n    const query = `\n      SELECT\n        l.*,\n        c.name as client_name, c.email as client_email, c.status as client_status, c.company_id,\n        p.name as product_name, p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      JOIN clients c ON l.client_id = c.id\n      JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON l.assigned_company = comp.id\n      WHERE l.expiry_date IS NOT NULL\n      AND l.status = 'attiva'\n      AND c.company_id IN (${placeholders})\n      ORDER BY l.expiry_date ASC\n    `\n\n    const rows = await this.db.query(query, companyIds);\n    return this.mapLicenseRows(rows);\n  }\n\n  private mapLicenseRows(rows: any[]): LicenseWithDetails[] {\n    return rows.map(row => ({\n      id: row.id,\n      clientId: row.client_id,\n      productId: row.product_id,\n      activationKey: row.activation_key,\n      computerKey: row.computerKey,\n      activationDate: row.activationDate,\n      expiryDate: row.expiryDate,\n      licenseType: row.licenseType,\n      status: row.status,\n      maxUsers: row.maxUsers,\n      maxDevices: row.maxDevices,\n      price: row.price,\n      discount: row.discount,\n      activeModules: JSON.parse(row.active_modules || '[]'),\n      assignedCompany: row.assignedCompany,\n      assignedAgent: row.assignedAgent,\n      renewalEnabled: row.renewalEnabled,\n      renewalPeriod: row.renewalPeriod,\n      createdAt: row.createdAt,\n      client: {\n        id: row.client_id,\n        name: row.client_name,\n        email: row.client_email,\n        status: row.client_status,\n        companyId: row.client_company_id || row.company_id,\n        contactInfo: {},\n        isMultiSite: false,\n        isMultiUser: false,\n        createdAt: new Date()\n      },\n      product: {\n        id: row.product_id,\n        name: row.product_name,\n        version: row.product_version,\n        description: '',\n        supportedLicenseTypes: [],\n        createdAt: new Date()\n      },\n      company: row.company_name ? {\n        id: row.assigned_company,\n        name: row.company_name,\n        type: '',\n        parentId: null,\n        status: 'active',\n        contactInfo: null,\n        createdAt: new Date()\n      } : undefined\n    }));\n  }\n\n  async getDashboardStats(userId: string, userRole: string, userCompanyId?: string): Promise<DashboardStats> {\n    // If user is admin (not superadmin), filter by company hierarchy\n    if (userRole === 'admin' && userCompanyId) {\n      const companyIds = await this.getCompanyHierarchy(userCompanyId);\n      const placeholders = companyIds.map(() => '?').join(',');\n\n      const [activeLicenses] = await this.db.query(\n        `SELECT COUNT(*) as count FROM licenses l\n         JOIN clients c ON l.client_id = c.id\n         WHERE l.status = \"attiva\" AND c.company_id IN (${placeholders})`,\n        companyIds\n      );\n\n      const [demoLicenses] = await this.db.query(\n        `SELECT COUNT(*) as count FROM licenses l\n         JOIN clients c ON l.client_id = c.id\n         WHERE l.license_type = \"trial\" AND l.status IN (\"attiva\", \"demo\")\n         AND c.company_id IN (${placeholders})`,\n        companyIds\n      );\n\n      const [totalClients] = await this.db.query(\n        `SELECT COUNT(*) as count FROM clients\n         WHERE status = \"convalidato\" AND company_id IN (${placeholders})`,\n        companyIds\n      );\n\n      const [monthlyRevenue] = await this.db.query(`\n        SELECT COALESCE(SUM(t.amount), 0) as total\n        FROM transactions t\n        JOIN licenses l ON t.license_id = l.id\n        JOIN clients c ON l.client_id = c.id\n        WHERE t.status = \"completed\"\n        AND MONTH(t.created_at) = MONTH(CURRENT_DATE())\n        AND YEAR(t.created_at) = YEAR(CURRENT_DATE())\n        AND c.company_id IN (${placeholders})\n      `, companyIds);\n\n      const [todayActivations] = await this.db.query(`\n        SELECT COUNT(*) as count\n        FROM licenses l\n        JOIN clients c ON l.client_id = c.id\n        WHERE DATE(l.activation_date) = CURDATE()\n        AND c.company_id IN (${placeholders})\n      `, companyIds);\n\n      return {\n        activeLicenses: activeLicenses[0]?.count || 0,\n        demoLicenses: demoLicenses[0]?.count || 0,\n        totalClients: totalClients[0]?.count || 0,\n        monthlyRevenue: parseFloat(monthlyRevenue[0]?.total || '0'),\n        todayActivations: todayActivations[0]?.count || 0,\n        demoConversions: 0,\n        expiringRenewals: 0,\n        dailyRevenue: 0\n      };\n    }\n\n    // For superadmin, get all stats\n    const [activeLicenses] = await this.db.query(\n      'SELECT COUNT(*) as count FROM licenses WHERE status = \"attiva\"'\n    );\n\n    const [demoLicenses] = await this.db.query(\n      'SELECT COUNT(*) as count FROM licenses WHERE license_type = \"trial\" AND status IN (\"attiva\", \"demo\")'\n    );\n\n    const [totalClients] = await this.db.query(\n      'SELECT COUNT(*) as count FROM clients WHERE status = \"convalidato\"'\n    );\n\n    const [monthlyRevenue] = await this.db.query(`\n      SELECT COALESCE(SUM(amount), 0) as total\n      FROM transactions\n      WHERE status = \"completed\"\n      AND MONTH(created_at) = MONTH(CURRENT_DATE())\n      AND YEAR(created_at) = YEAR(CURRENT_DATE())\n    `);\n\n    const [todayActivations] = await this.db.query(`\n      SELECT COUNT(*) as count\n      FROM licenses\n      WHERE DATE(activation_date) = CURDATE()\n    `);\n\n    return {\n      activeLicenses: activeLicenses[0]?.count || 0,\n      demoLicenses: demoLicenses[0]?.count || 0,\n      totalClients: totalClients[0]?.count || 0,\n      monthlyRevenue: parseFloat(monthlyRevenue[0]?.total || '0'),\n      todayActivations: todayActivations[0]?.count || 0,\n      demoConversions: 8, // TODO: Calculate properly\n      expiringRenewals: 47, // TODO: Calculate properly\n      dailyRevenue: 1250 // TODO: Calculate properly\n    };\n  }\n\n  // Software Registration methods\n  async getSoftwareRegistrations(filters?: any): Promise<SoftwareRegistration[]> {\n    let sql = `\n      SELECT sr.*,\n             c.name as client_name,\n             p.name as product_name,\n             p.version as product_version,\n             comp.name as company_name\n      FROM software_registrations sr\n      LEFT JOIN clients c ON sr.cliente_assegnato = c.id\n      LEFT JOIN products p ON sr.prodotto_assegnato = p.id\n      LEFT JOIN companies comp ON c.company_id = comp.id\n    `;\n    const params: any[] = [];\n    const whereClauses = [];\n\n    if (filters?.status) {\n      whereClauses.push('sr.status = ?');\n      params.push(filters.status);\n    }\n\n    if (filters?.nomeSoftware) {\n      whereClauses.push(`(\n        sr.nome_software LIKE ? OR\n        sr.ragione_sociale LIKE ? OR\n        sr.versione LIKE ? OR\n        sr.partita_iva LIKE ? OR\n        sr.note LIKE ? OR\n        sr.computer_key LIKE ? OR\n        sr.sistema_operativo LIKE ? OR\n        sr.indirizzo_ip LIKE ? OR\n        c.name LIKE ? OR\n        c.email LIKE ? OR\n        p.name LIKE ? OR\n        p.version LIKE ? OR\n        comp.name LIKE ?\n      )`);\n      const searchTerm = `%${filters.nomeSoftware}%`;\n      params.push(searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm, searchTerm);\n    }\n\n    if (whereClauses.length > 0) {\n      sql += ' WHERE ' + whereClauses.join(' AND ');\n    }\n\n    sql += ' ORDER BY sr.prima_registrazione DESC';\n\n    const rows = await this.db.query(sql, params);\n    return rows.map((row: any) => ({\n      ...row,\n      totaleVenduto: parseFloat(row.totale_venduto || '0'),\n      primaRegistrazione: row.prima_registrazione,\n      ultimaAttivita: row.ultima_attivita,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at,\n      clientName: row.client_name,\n      productName: row.product_name,\n      productVersion: row.product_version,\n      companyName: row.company_name,\n      // Ensure these fields are properly mapped\n      nomeSoftware: row.nome_software,\n      versione: row.versione,\n      ragioneSociale: row.ragione_sociale,\n      partitaIva: row.partita_iva,\n      totaleOrdini: row.totale_ordini,\n      sistemaOperativo: row.sistema_operativo,\n      indirizzoIp: row.indirizzo_ip,\n      computerKey: row.computer_key,\n      status: row.status,\n      clienteAssegnato: row.cliente_assegnato,\n      licenzaAssegnata: row.licenza_assegnata,\n      prodottoAssegnato: row.prodotto_assegnato,\n      note: row.note\n    }));\n  }\n\n  async getSoftwareRegistration(id: string): Promise<SoftwareRegistration | undefined> {\n    const rows = await this.db.query(\n      'SELECT * FROM software_registrations WHERE id = ?',\n      [id]\n    );\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      ...row,\n      totaleVenduto: parseFloat(row.totale_venduto || '0'),\n      primaRegistrazione: row.prima_registrazione,\n      ultimaAttivita: row.ultima_attivita,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async getSoftwareRegistrationByComputerKey(computerKey: string): Promise<SoftwareRegistration | undefined> {\n    const rows = await this.db.query(\n      'SELECT * FROM software_registrations WHERE computer_key = ?',\n      [computerKey]\n    );\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      ...row,\n      totaleVenduto: parseFloat(row.totale_venduto || '0'),\n      primaRegistrazione: row.prima_registrazione,\n      ultimaAttivita: row.ultima_attivita,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async createSoftwareRegistration(registration: InsertSoftwareRegistration): Promise<SoftwareRegistration> {\n    const id = randomUUID();\n    const now = new Date();\n\n    await this.db.query(`\n      INSERT INTO software_registrations (\n        id, nome_software, versione, ragione_sociale, partita_iva,\n        totale_ordini, totale_venduto, sistema_operativo, indirizzo_ip,\n        computer_key, installation_path, status, note,\n        prima_registrazione, ultima_attivita, created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      id,\n      registration.nomeSoftware,\n      registration.versione,\n      registration.ragioneSociale,\n      registration.partitaIva,\n      registration.totaleOrdini || 0,\n      registration.totaleVenduto || '0.00',\n      registration.sistemaOperativo,\n      registration.indirizzoIp,\n      registration.computerKey,\n      registration.installationPath,\n      registration.status || 'non_assegnato',\n      registration.note,\n      now,\n      now,\n      now,\n      now\n    ]);\n\n    return this.getSoftwareRegistration(id) as Promise<SoftwareRegistration>;\n  }\n\n  async updateSoftwareRegistration(id: string, updates: Partial<SoftwareRegistration>): Promise<SoftwareRegistration> {\n    const setClauses = [];\n    const params = [];\n\n    // Map specific fields manually to handle naming differences\n    const fieldMapping: { [key: string]: string } = {\n      'clienteAssegnato': 'cliente_assegnato',\n      'licenzaAssegnata': 'licenza_assegnata',\n      'prodottoAssegnato': 'prodotto_assegnato',\n      'note': 'note',\n      'status': 'status',\n      'nomeSoftware': 'nome_software',\n      'versione': 'versione',\n      'ragioneSociale': 'ragione_sociale',\n      'partitaIva': 'partita_iva',\n      'totaleOrdini': 'totale_ordini',\n      'totaleVenduto': 'totale_venduto',\n      'sistemaOperativo': 'sistema_operativo',\n      'indirizzoIp': 'indirizzo_ip',\n      'computerKey': 'computer_key',\n      'installationPath': 'installation_path'\n    };\n\n    Object.entries(updates).forEach(([key, value]) => {\n      if (value !== undefined && fieldMapping[key]) {\n        setClauses.push(`${fieldMapping[key]} = ?`);\n        params.push(value);\n      }\n    });\n\n    if (setClauses.length > 0) {\n      setClauses.push('updated_at = ?');\n      params.push(new Date());\n      params.push(id);\n\n      await this.db.query(\n        `UPDATE software_registrations SET ${setClauses.join(', ')} WHERE id = ?`,\n        params\n      );\n    }\n\n    return this.getSoftwareRegistration(id) as Promise<SoftwareRegistration>;\n  }\n\n  // Additional methods for licenses count and company hierarchy\n  async getProduct(id: string): Promise<any> {\n    const rows = await this.db.query('SELECT * FROM products WHERE id = ?', [id]);\n    return rows.length > 0 ? rows[0] : null;\n  }\n\n  async getActiveLicensesCount(): Promise<number> {\n    const rows = await this.db.query('SELECT COUNT(*) as count FROM licenses WHERE status = \"attiva\"');\n    return rows[0]?.count || 0;\n  }\n\n  async getActiveLicensesCountByCompanyHierarchy(companyId: string): Promise<number> {\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    const placeholders = companyIds.map(() => '?').join(',');\n\n    const rows = await this.db.query(\n      `SELECT COUNT(*) as count FROM licenses l\n       JOIN clients c ON l.client_id = c.id\n       WHERE l.status = \"attiva\" AND c.company_id IN (${placeholders})`,\n      companyIds\n    );\n    return rows[0]?.count || 0;\n  }\n\n  async getActiveLicensesCountByCompany(companyId: string): Promise<number> {\n    const rows = await this.db.query(\n      `SELECT COUNT(*) as count FROM licenses l\n       JOIN clients c ON l.client_id = c.id\n       WHERE l.status = \"attiva\" AND c.company_id = ?`,\n      [companyId]\n    );\n    return rows[0]?.count || 0;\n  }\n\n  async getCompanyHierarchy(companyId: string): Promise<string[]> {\n    console.log('getCompanyHierarchy: Starting with company', companyId);\n\n    const hierarchy = [companyId];\n\n    // Get all companies to build the tree\n    const allCompanies = await this.db.query('SELECT id, name, parent_id FROM companies WHERE status = \"active\"');\n    console.log('getCompanyHierarchy: All companies:', allCompanies);\n\n    // Helper function to find all children of a company\n    const findChildren = (parentId: string): string[] => {\n      const children = allCompanies.filter((company: any) => company.parent_id === parentId);\n      console.log(`getCompanyHierarchy: Found ${children.length} subcompanies for parent ${parentId}:`, children);\n      let allChildren: string[] = [];\n\n      for (const child of children) {\n        allChildren.push(child.id);\n        // Recursively find children of children\n        allChildren = allChildren.concat(findChildren(child.id));\n      }\n\n      return allChildren;\n    };\n\n    const subCompanies = findChildren(companyId);\n    hierarchy.push(...subCompanies);\n\n    console.log(`getCompanyHierarchy: Final hierarchy for ${companyId}:`, hierarchy);\n    return hierarchy;\n  }\n\n  async getLicensesByCompanyHierarchy(companyId: string): Promise<LicenseWithDetails[]> {\n    console.log('getLicensesByCompanyHierarchy: Starting with company', companyId);\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    console.log('getLicensesByCompanyHierarchy: Company hierarchy IDs:', companyIds);\n\n    if (companyIds.length === 0) {\n      console.log('getLicensesByCompanyHierarchy: No companies in hierarchy, returning empty array');\n      return [];\n    }\n\n    const placeholders = companyIds.map(() => '?').join(',');\n    console.log('getLicensesByCompanyHierarchy: Executing query with placeholders:', placeholders);\n    console.log('getLicensesByCompanyHierarchy: Query parameters:', companyIds);\n\n    const rows = await this.db.query(`\n      SELECT\n        l.*,\n        c.name as client_name, c.email as client_email, c.status as client_status, c.company_id,\n        p.name as product_name, p.version as product_version,\n        comp.name as company_name\n      FROM licenses l\n      INNER JOIN clients c ON l.client_id = c.id\n      LEFT JOIN products p ON l.product_id = p.id\n      LEFT JOIN companies comp ON l.assigned_company = comp.id\n      WHERE c.company_id IN (${placeholders})\n      ORDER BY l.created_at DESC\n    `, companyIds);\n\n    console.log(`getLicensesByCompanyHierarchy: Query returned ${rows.length} raw rows`);\n\n    // Debug information about company filtering\n    const allClients = await this.db.query('SELECT name, email, company_id FROM clients WHERE company_id IN (' + placeholders + ')', companyIds);\n    console.log('getLicensesByCompanyHierarchy: DEBUG - Clients in hierarchy companies:', allClients);\n\n    const allLicensesWithClients = await this.db.query(`\n      SELECT l.id, l.activation_key, c.name as client_name, c.company_id as client_company_id\n      FROM licenses l\n      LEFT JOIN clients c ON l.client_id = c.id\n    `);\n    console.log('getLicensesByCompanyHierarchy: DEBUG - All licenses with client companies:', allLicensesWithClients);\n\n    const matchingLicenses = allLicensesWithClients.filter((license: any) => companyIds.includes(license.client_company_id));\n    console.log('getLicensesByCompanyHierarchy: DEBUG - Licenses that should match our hierarchy:', matchingLicenses);\n\n    const result = rows.map((row: any) => ({\n      id: row.id,\n      activationKey: row.activation_key,\n      licenseType: row.license_type,\n      status: row.status,\n      maxUsers: row.max_users,\n      maxDevices: row.max_devices,\n      expiryDate: row.expiryDate,\n      activationDate: row.activationDate,\n      computerKey: row.computerKey,\n      deviceInfo: row.device_info ? JSON.parse(row.device_info) : null,\n      price: parseFloat(row.price || '0'),\n      discount: parseFloat(row.discount || '0'),\n      activeModules: JSON.parse(row.active_modules || '[]'),\n      assignedCompany: row.assignedCompany,\n      assignedAgent: row.assignedAgent,\n      createdAt: row.createdAt,\n      client: {\n        id: row.client_id,\n        name: row.client_name,\n        email: row.client_email,\n        status: row.client_status,\n        companyId: row.company_id,\n        contactInfo: {},\n        isMultiSite: false,\n        isMultiUser: false,\n        createdAt: new Date()\n      },\n      product: {\n        id: row.product_id,\n        name: row.product_name,\n        version: row.product_version,\n        description: '',\n        supportedLicenseTypes: [],\n        createdAt: new Date()\n      },\n      company: row.company_name ? {\n        id: row.assigned_company,\n        name: row.company_name,\n        type: '',\n        parentId: null,\n        status: 'active',\n        contactInfo: null,\n        createdAt: new Date()\n      } : undefined\n    }));\n\n    console.log(`getLicensesByCompanyHierarchy: Final result - returning ${result.length} licenses for company hierarchy ${companyId}`);\n    return result;\n  }\n\n  async getClientsByCompanyHierarchy(companyId: string): Promise<Client[]> {\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    const placeholders = companyIds.map(() => '?').join(',');\n\n    const rows = await this.db.query(\n      `SELECT * FROM clients WHERE company_id IN (${placeholders}) ORDER BY name`,\n      companyIds\n    );\n\n    return rows.map((row: any) => ({\n      id: row.id,\n      name: row.name,\n      email: row.email,\n      status: row.status,\n      companyId: row.company_id,\n      contactInfo: row.contact_info ? JSON.parse(row.contact_info) : {},\n      isMultiSite: Boolean(row.is_multi_site),\n      isMultiUser: Boolean(row.is_multi_user),\n      createdAt: row.created_at\n    }));\n  }\n\n  async getAllProducts(): Promise<Product[]> {\n    return this.getProducts();\n  }\n\n  // User management methods\n  async getUsers(companyId?: string, includingInactive?: boolean): Promise<UserWithCompany[]> {\n    console.log(`getUsers: companyId=${companyId}, includingInactive=${includingInactive}`);\n\n    let sql = `\n      SELECT u.*, c.name as company_name, c.type as company_type, c.parent_id as company_parent_id\n      FROM users u\n      LEFT JOIN companies c ON u.company_id = c.id\n    `;\n    const params: any[] = [];\n    const conditions: string[] = [];\n\n    // Only filter out inactive users if not explicitly including them\n    if (!includingInactive) {\n      // In MySQL, boolean TRUE is stored as 1\n      conditions.push('u.is_active = 1');\n      console.log('getUsers: Adding is_active = 1 condition');\n    }\n\n    if (companyId) {\n      // If companyId is provided, filter by company hierarchy\n      const companyIds = await this.getCompanyHierarchy(companyId);\n      console.log(`getUsers: Filtering users for company hierarchy: ${companyIds.join(', ')}`);\n\n      if (companyIds.length > 0) {\n        const placeholders = companyIds.map(() => '?').join(',');\n        // Admin users should only see users from their company hierarchy, not null company users\n        conditions.push(`u.company_id IN (${placeholders})`);\n        params.push(...companyIds);\n      } else {\n        // If no companies in hierarchy, return empty result\n        conditions.push('1 = 0');\n      }\n    }\n\n    if (conditions.length > 0) {\n      sql += ` WHERE ${conditions.join(' AND ')}`;\n    }\n\n    sql += ' ORDER BY u.created_at DESC';\n\n    const rows = await this.db.query(sql, params);\n\n    return rows.map((user: any) => ({\n      id: user.id,\n      username: user.username,\n      password: user.password,\n      role: user.role,\n      companyId: user.company_id,\n      name: user.name,\n      email: user.email,\n      isActive: user.is_active,\n      createdAt: user.created_at,\n      company: user.company_id ? {\n        id: user.company_id,\n        name: user.company_name,\n        type: user.company_type,\n        parentId: user.company_parent_id,\n        status: 'active',\n        contactInfo: null,\n        createdAt: new Date()\n      } : undefined\n    }));\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const setClauses = [];\n    const params = [];\n\n    if (updates.username !== undefined) {\n      setClauses.push('username = ?');\n      params.push(updates.username);\n    }\n    if (updates.name !== undefined) {\n      setClauses.push('name = ?');\n      params.push(updates.name);\n    }\n    if (updates.email !== undefined) {\n      setClauses.push('email = ?');\n      params.push(updates.email);\n    }\n    if (updates.companyId !== undefined) {\n      setClauses.push('company_id = ?');\n      params.push(updates.companyId);\n    }\n    if (updates.isActive !== undefined) {\n      setClauses.push('is_active = ?');\n      params.push(updates.isActive);\n    }\n    if (updates.password !== undefined) {\n      const hashedPassword = await bcrypt.hash(updates.password, 10);\n      setClauses.push('password = ?');\n      params.push(hashedPassword);\n    }\n\n    if (setClauses.length === 0) {\n      throw new Error('No fields to update');\n    }\n\n    params.push(id);\n\n    await this.db.query(\n      `UPDATE users SET ${setClauses.join(', ')} WHERE id = ?`,\n      params\n    );\n\n    const updatedUser = await this.getUser(id);\n    if (!updatedUser) {\n      throw new Error('User not found after update');\n    }\n\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    await this.db.query('DELETE FROM users WHERE id = ?', [id]);\n  }\n\n  // Device Registration methods - New tables implementation\n  async getTestaRegAzienda(): Promise<TestaRegAzienda[]> {\n    const rows = await this.db.query('SELECT * FROM Testa_Reg_Azienda ORDER BY created_at DESC');\n\n    return rows.map((row: any) => ({\n      partitaIva: row.PartitaIva,\n      nomeAzienda: row.NomeAzienda,\n      prodotto: row.Prodotto,\n      versione: row.Versione,\n      modulo: row.Modulo,\n      utenti: row.Utenti,\n      totDispositivi: row.TotDispositivi,\n      idLicenza: row.ID_Licenza,\n      totOrdini: row.TotOrdini,\n      totVendite: row.TotVendite?.toString() || '0.00',\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    }));\n  }\n\n  async getTestaRegAziendaByPartitaIva(partitaIva: string): Promise<TestaRegAzienda | undefined> {\n    const rows = await this.db.query('SELECT * FROM Testa_Reg_Azienda WHERE PartitaIva = ?', [partitaIva]);\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      partitaIva: row.PartitaIva,\n      nomeAzienda: row.NomeAzienda,\n      prodotto: row.Prodotto,\n      versione: row.Versione,\n      modulo: row.Modulo,\n      utenti: row.Utenti,\n      totDispositivi: row.TotDispositivi,\n      idLicenza: row.ID_Licenza,\n      totOrdini: row.TotOrdini,\n      totVendite: row.TotVendite?.toString() || '0.00',\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async createTestaRegAzienda(registration: InsertTestaRegAzienda): Promise<TestaRegAzienda> {\n    const now = new Date();\n\n    await this.db.query(`\n      INSERT INTO Testa_Reg_Azienda (\n        PartitaIva, NomeAzienda, Prodotto, Versione, Modulo,\n        Utenti, TotDispositivi, ID_Licenza, TotOrdini, TotVendite,\n        created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      registration.partitaIva,\n      registration.nomeAzienda,\n      registration.prodotto,\n      registration.versione,\n      registration.modulo,\n      registration.utenti || 0,\n      registration.totDispositivi || 0,\n      registration.idLicenza,\n      registration.totOrdini || 0,\n      registration.totVendite || '0.00',\n      now,\n      now\n    ]);\n\n    return this.getTestaRegAziendaByPartitaIva(registration.partitaIva) as Promise<TestaRegAzienda>;\n  }\n\n  async getAllTestaRegAzienda(): Promise<TestaRegAzienda[]> {\n    const rows = await this.db.query('SELECT * FROM Testa_Reg_Azienda ORDER BY created_at DESC');\n\n    return rows.map((row: any) => ({\n      partitaIva: row.PartitaIva,\n      nomeAzienda: row.NomeAzienda,\n      prodotto: row.Prodotto,\n      versione: row.Versione,\n      modulo: row.Modulo,\n      utenti: row.Utenti,\n      totDispositivi: row.TotDispositivi,\n      idLicenza: row.ID_Licenza,\n      totOrdini: row.TotOrdini,\n      totVendite: row.TotVendite?.toString() || '0.00',\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    }));\n  }\n\n  async updateTestaRegAzienda(partitaIva: string, updates: Partial<TestaRegAzienda>): Promise<TestaRegAzienda> {\n    const setClauses = [];\n    const params = [];\n\n    const fieldMapping: { [key: string]: string } = {\n      'nomeAzienda': 'NomeAzienda',\n      'prodotto': 'Prodotto',\n      'versione': 'Versione',\n      'modulo': 'Modulo',\n      'utenti': 'Utenti',\n      'totDispositivi': 'TotDispositivi',\n      'idLicenza': 'ID_Licenza',\n      'totOrdini': 'TotOrdini',\n      'totVendite': 'TotVendite'\n    };\n\n    Object.entries(updates).forEach(([key, value]) => {\n      if (value !== undefined && fieldMapping[key]) {\n        setClauses.push(`${fieldMapping[key]} = ?`);\n        params.push(value);\n      }\n    });\n\n    if (setClauses.length > 0) {\n      setClauses.push('updated_at = ?');\n      params.push(new Date());\n      params.push(partitaIva);\n\n      await this.db.query(\n        `UPDATE Testa_Reg_Azienda SET ${setClauses.join(', ')} WHERE PartitaIva = ?`,\n        params\n      );\n    }\n\n    return this.getTestaRegAziendaByPartitaIva(partitaIva) as Promise<TestaRegAzienda>;\n  }\n\n  async getDettRegAziendaByPartitaIva(partitaIva: string): Promise<DettRegAzienda[]> {\n    const rows = await this.db.query('SELECT * FROM Dett_Reg_Azienda WHERE PartitaIva = ? ORDER BY created_at DESC', [partitaIva]);\n\n    return rows.map((row: any) => ({\n      id: row.ID,\n      partitaIva: row.PartitaIva,\n      uidDispositivo: row.UID_Dispositivo,\n      sistemaOperativo: row.SistemaOperativo,\n      note: row.Note,\n      dataAttivazione: row.DataAttivazione,\n      dataUltimoAccesso: row.DataUltimoAccesso,\n      ordini: row.Ordini,\n      vendite: row.Vendite?.toString() || '0.00',\n      computerKey: row.Computer_Key,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    }));\n  }\n\n  async getDettRegAzienda(partitaIva?: string): Promise<DettRegAzienda[]> {\n    let query = 'SELECT * FROM Dett_Reg_Azienda';\n    const params: any[] = [];\n\n    if (partitaIva) {\n      query += ' WHERE PartitaIva = ?';\n      params.push(partitaIva);\n    }\n\n    query += ' ORDER BY created_at DESC';\n\n    const rows = await this.db.query(query, params);\n\n    return rows.map((row: any) => ({\n      id: row.ID,\n      partitaIva: row.PartitaIva,\n      uidDispositivo: row.UID_Dispositivo,\n      sistemaOperativo: row.SistemaOperativo,\n      note: row.Note,\n      dataAttivazione: row.DataAttivazione,\n      dataUltimoAccesso: row.DataUltimoAccesso,\n      ordini: row.Ordini,\n      vendite: row.Vendite?.toString() || '0.00',\n      computerKey: row.Computer_Key,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    }));\n  }\n\n  async getDettRegAziendaById(id: number): Promise<DettRegAzienda | undefined> {\n    const rows = await this.db.query('SELECT * FROM Dett_Reg_Azienda WHERE ID = ?', [id]);\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      id: row.ID,\n      partitaIva: row.PartitaIva,\n      uidDispositivo: row.UID_Dispositivo,\n      sistemaOperativo: row.SistemaOperativo,\n      note: row.Note,\n      dataAttivazione: row.DataAttivazione,\n      dataUltimoAccesso: row.DataUltimoAccesso,\n      ordini: row.Ordini,\n      vendite: row.Vendite?.toString() || '0.00',\n      computerKey: row.Computer_Key,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async createDettRegAzienda(registration: InsertDettRegAzienda): Promise<DettRegAzienda> {\n    const now = new Date();\n\n    // Convert dataUltimoAccesso to MySQL DATETIME format if it's an ISO string\n    let dataUltimoAccesso = registration.dataUltimoAccesso;\n    if (typeof dataUltimoAccesso === 'string' && dataUltimoAccesso.includes('T')) {\n      // Convert ISO string to MySQL DATETIME format\n      dataUltimoAccesso = dataUltimoAccesso.replace('T', ' ').replace('Z', '').split('.')[0];\n    }\n\n    const result = await this.db.query(`\n      INSERT INTO Dett_Reg_Azienda (\n        PartitaIva, UID_Dispositivo, SistemaOperativo, Note,\n        DataAttivazione, DataUltimoAccesso, Ordini, Vendite, Computer_Key,\n        created_at, updated_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      registration.partitaIva,\n      registration.uidDispositivo,\n      registration.sistemaOperativo,\n      registration.note,\n      registration.dataAttivazione,\n      dataUltimoAccesso,\n      registration.ordini || 0,\n      registration.vendite || '0.00',\n      registration.computerKey,\n      now,\n      now\n    ]);\n\n    // Get the auto-incremented ID\n    const insertId = result.insertId;\n    return this.getDettRegAziendaById(insertId) as Promise<DettRegAzienda>;\n  }\n\n  async updateDettRegAzienda(id: number, updates: Partial<DettRegAzienda>): Promise<DettRegAzienda> {\n    const setClauses = [];\n    const params = [];\n\n    const fieldMapping: { [key: string]: string } = {\n      'uidDispositivo': 'UID_Dispositivo',\n      'sistemaOperativo': 'SistemaOperativo',\n      'note': 'Note',\n      'dataAttivazione': 'DataAttivazione',\n      'dataUltimoAccesso': 'DataUltimoAccesso',\n      'ordini': 'Ordini',\n      'vendite': 'Vendite',\n      'computerKey': 'Computer_Key'\n    };\n\n    Object.entries(updates).forEach(([key, value]) => {\n      if (value !== undefined && fieldMapping[key]) {\n        setClauses.push(`${fieldMapping[key]} = ?`);\n        params.push(value);\n      }\n    });\n\n    if (setClauses.length > 0) {\n      setClauses.push('updated_at = ?');\n      params.push(new Date());\n      params.push(id);\n\n      await this.db.query(\n        `UPDATE Dett_Reg_Azienda SET ${setClauses.join(', ')} WHERE ID = ?`,\n        params\n      );\n    }\n\n    return this.getDettRegAziendaById(id) as Promise<DettRegAzienda>;\n  }\n\n  async getDettRegAziendaByComputerKey(computerKey: string): Promise<DettRegAzienda | undefined> {\n    const rows = await this.db.query('SELECT * FROM Dett_Reg_Azienda WHERE Computer_Key = ?', [computerKey]);\n\n    if (rows.length === 0) return undefined;\n\n    const row = rows[0];\n    return {\n      id: row.ID,\n      partitaIva: row.PartitaIva,\n      uidDispositivo: row.UID_Dispositivo,\n      sistemaOperativo: row.SistemaOperativo,\n      note: row.Note,\n      dataAttivazione: row.DataAttivazione,\n      dataUltimoAccesso: row.DataUltimoAccesso,\n      ordini: row.Ordini,\n      vendite: row.Vendite?.toString() || '0.00',\n      computerKey: row.Computer_Key,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async deleteTestaRegAzienda(partitaIva: string): Promise<void> {\n    await this.db.query('DELETE FROM Testa_Reg_Azienda WHERE PartitaIva = ?', [partitaIva]);\n  }\n\n  async deleteDettRegAzienda(id: number): Promise<void> {\n    await this.db.query('DELETE FROM Dett_Reg_Azienda WHERE ID = ?', [id]);\n  }\n\n  // üí≥ WALLET METHODS - Sistema crediti aziendale\n\n  async getCompanyWallet(companyId: string): Promise<CompanyWallet | null> {\n    const rows = await this.db.query(\n      'SELECT * FROM company_wallets WHERE company_id = ?',\n      [companyId]\n    );\n\n    if (rows.length === 0) return null;\n\n    const row = rows[0];\n    return {\n      id: row.id,\n      companyId: row.company_id,\n      balance: parseFloat(row.balance || '0'),\n      totalRecharges: parseFloat(row.total_recharges || '0'),\n      totalSpent: parseFloat(row.total_spent || '0'),\n      lastRechargeDate: row.last_recharge_date,\n      stripeCustomerId: row.stripe_customer_id,\n      createdAt: row.created_at,\n      updatedAt: row.updated_at\n    };\n  }\n\n  async createCompanyWallet(companyId: string): Promise<CompanyWallet> {\n    const walletId = randomUUID();\n    const now = new Date();\n\n    await this.db.query(`\n      INSERT INTO company_wallets (\n        id, company_id, balance, total_recharges, total_spent,\n        created_at, updated_at\n      ) VALUES (?, ?, 0.00, 0.00, 0.00, ?, ?)\n    `, [walletId, companyId, now, now]);\n\n    return this.getCompanyWallet(companyId) as Promise<CompanyWallet>;\n  }\n\n  async createWalletTransaction(data: {\n    companyId: string;\n    type: string;\n    amount: number;\n    balanceBefore: number;\n    balanceAfter: number;\n    description: string;\n    relatedEntityType?: string | null;\n    relatedEntityId?: string | null;\n    fromCompanyId?: string | null;\n    toCompanyId?: string | null;\n    stripePaymentIntentId?: string | null;\n    createdBy?: string | null;\n  }): Promise<void> {\n    const transactionId = randomUUID();\n\n    await this.db.query(`\n      INSERT INTO wallet_transactions (\n        id, company_id, type, amount, balance_before, balance_after,\n        description, related_entity_type, related_entity_id,\n        from_company_id, to_company_id, stripe_payment_intent_id,\n        created_by, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      transactionId,\n      data.companyId,\n      data.type,\n      data.amount,\n      data.balanceBefore,\n      data.balanceAfter,\n      data.description,\n      data.relatedEntityType || null,\n      data.relatedEntityId || null,\n      data.fromCompanyId || null,\n      data.toCompanyId || null,\n      data.stripePaymentIntentId || null,\n      data.createdBy || null,\n      new Date()\n    ]);\n\n    console.log(`üíæ Wallet transaction saved: ${data.type} ${data.amount} crediti for company ${data.companyId}`);\n  }\n\n  async updateWalletBalance(\n    companyId: string,\n    amount: number,\n    description: string,\n    type: string,\n    createdBy?: string\n  ): Promise<CompanyWallet> {\n    // Ottieni o crea il wallet\n    let wallet = await this.getCompanyWallet(companyId);\n    if (!wallet) {\n      wallet = await this.createCompanyWallet(companyId);\n    }\n\n    try {\n      const balanceBefore = wallet.balance;\n      const balanceAfter = balanceBefore + amount;\n\n      // Aggiorna il saldo del wallet\n      await this.db.query(`\n        UPDATE company_wallets\n        SET balance = ?,\n            ${type === 'ricarica' || type === 'rimborso' ? 'total_recharges = total_recharges + ?, last_recharge_date = ?' : 'total_spent = total_spent + ABS(?)'},\n            updated_at = ?\n        WHERE company_id = ?\n      `, (type === 'ricarica' || type === 'rimborso')\n        ? [balanceAfter, Math.abs(amount), new Date(), new Date(), companyId]\n        : [balanceAfter, Math.abs(amount), new Date(), companyId]\n      );\n\n      // Registra la transazione wallet\n      const transactionData = {\n        companyId,\n        type,\n        amount: Math.abs(amount), // Always show positive amount in wallet history\n        balanceBefore,\n        balanceAfter,\n        description,\n        createdBy: createdBy || null,\n        relatedEntityType: type === 'rimborso' ? 'license_refund' : null,\n        relatedEntityId: null,\n        fromCompanyId: null,\n        toCompanyId: null,\n        stripePaymentIntentId: null\n      };\n\n      await this.createWalletTransaction(transactionData);\n\n      console.log(`üí≥ Wallet updated: Company ${companyId}, ${type} ${amount} crediti, saldo: ${balanceBefore} ‚Üí ${balanceAfter}`);\n\n      return await this.getCompanyWallet(companyId) as CompanyWallet;\n    } catch (error) {\n      console.error('Error updating wallet balance:', error);\n      throw error;\n    }\n  }\n\n  async updateWalletStripeCustomer(companyId: string, stripeCustomerId: string): Promise<void> {\n    await this.db.query(`\n      UPDATE company_wallets\n      SET stripe_customer_id = ?, updated_at = ?\n      WHERE company_id = ?\n    `, [stripeCustomerId, new Date(), companyId]);\n  }\n\n  async transferCredits(\n    fromCompanyId: string,\n    toCompanyId: string,\n    amount: number,\n    createdBy: string\n  ): Promise<boolean> {\n    // Verifica gerarchia aziendale\n    const fromCompany = await this.getCompany(fromCompanyId);\n    const toCompany = await this.getCompany(toCompanyId);\n\n    if (!fromCompany || !toCompany) {\n      throw new Error('Azienda non trovata');\n    }\n\n    // Verifica che toCompany sia una sotto-azienda di fromCompany\n    const hierarchy = await this.getCompanyHierarchy(fromCompanyId);\n    if (!hierarchy.includes(toCompanyId)) {\n      throw new Error('Il trasferimento √® consentito solo verso sotto-aziende');\n    }\n\n    // Verifica saldo disponibile\n    const fromWallet = await this.getCompanyWallet(fromCompanyId);\n    if (!fromWallet || fromWallet.balance < amount) {\n      throw new Error('Saldo insufficiente per il trasferimento');\n    }\n\n    try {\n      // Sottrai crediti dall'azienda madre\n      await this.updateWalletBalance(\n        fromCompanyId,\n        -amount,\n        `Trasferimento a ${toCompany.name}`,\n        'trasferimento_out',\n        createdBy\n      );\n\n      // Aggiungi crediti alla sotto-azienda\n      await this.updateWalletBalance(\n        toCompanyId,\n        amount,\n        `Trasferimento da ${fromCompany.name}`,\n        'trasferimento_in',\n        createdBy\n      );\n\n      console.log(`üîÑ Trasferimento completato: ${fromCompany.name} ‚Üí ${toCompany.name}, ${amount} crediti`);\n      return true;\n    } catch (error) {\n      console.error('Error transferring credits:', error);\n      throw error;\n    }\n  }\n\n  async getWalletTransactions(companyId: string, limit: number = 50): Promise<WalletTransaction[]> {\n    console.log(`üîç getWalletTransactions: Searching for company_id = ${companyId}, limit = ${limit}`);\n\n    // First, let's check if the table exists and has any data\n    const totalRowsQuery = await this.db.query('SELECT COUNT(*) as total FROM wallet_transactions');\n    console.log(`üîç Total wallet_transactions in database: ${totalRowsQuery[0]?.total || 0}`);\n\n    // Check if there are any transactions for this specific company\n    const companyRowsQuery = await this.db.query('SELECT COUNT(*) as total FROM wallet_transactions WHERE company_id = ?', [companyId]);\n    console.log(`üîç Transactions for company ${companyId}: ${companyRowsQuery[0]?.total || 0}`);\n\n    const rows = await this.db.query(`\n      SELECT\n        id,\n        company_id as companyId,\n        type,\n        amount,\n        balance_before as balanceBefore,\n        balance_after as balanceAfter,\n        description,\n        related_entity_type as relatedEntityType,\n        related_entity_id as relatedEntityId,\n        from_company_id as fromCompanyId,\n        to_company_id as toCompanyId,\n        stripe_payment_intent_id as stripePaymentIntentId,\n        created_by as createdBy,\n        created_at as createdAt\n      FROM wallet_transactions\n      WHERE company_id = ?\n      ORDER BY created_at DESC\n      LIMIT ?\n    `, [companyId, limit]);\n\n    console.log(`üîç Query returned ${rows.length} transactions for company ${companyId}`);\n    if (rows.length > 0) {\n      console.log(`üîç First transaction:`, rows[0]);\n    }\n\n    return rows.map((row: any) => ({\n      id: row.id,\n      companyId: row.companyId,\n      type: row.type,\n      amount: parseFloat(row.amount || '0'),\n      balanceBefore: parseFloat(row.balanceBefore || '0'),\n      balanceAfter: parseFloat(row.balanceAfter || '0'),\n      description: row.description,\n      relatedEntityType: row.relatedEntityType,\n      relatedEntityId: row.relatedEntityId,\n      fromCompanyId: row.fromCompanyId,\n      toCompanyId: row.toCompanyId,\n      stripePaymentIntentId: row.stripePaymentIntentId,\n      createdBy: row.createdBy,\n      createdAt: row.createdAt\n    }));\n  }\n\n  async createWalletTransaction(transaction: InsertWalletTransaction): Promise<WalletTransaction> {\n    const id = randomUUID();\n    const now = new Date();\n\n    await this.db.query(`\n      INSERT INTO wallet_transactions (\n        id, company_id, type, amount, balance_before, balance_after,\n        description, related_entity_type, related_entity_id,\n        from_company_id, to_company_id, stripe_payment_intent_id,\n        created_by, created_at\n      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    `, [\n      id,\n      transaction.companyId,\n      transaction.type,\n      transaction.amount,\n      transaction.balanceBefore || 0,\n      transaction.balanceAfter || 0,\n      transaction.description,\n      transaction.relatedEntityType || null,\n      transaction.relatedEntityId || null,\n      transaction.fromCompanyId || null,\n      transaction.toCompanyId || null,\n      transaction.stripePaymentIntentId || null,\n      transaction.createdBy || null,\n      now\n    ]);\n\n    return {\n      id,\n      companyId: transaction.companyId,\n      type: transaction.type,\n      amount: transaction.amount,\n      balanceBefore: transaction.balanceBefore,\n      balanceAfter: transaction.balanceAfter,\n      description: transaction.description,\n      relatedEntityType: transaction.relatedEntityType,\n      relatedEntityId: transaction.relatedEntityId,\n      fromCompanyId: transaction.fromCompanyId,\n      toCompanyId: transaction.toCompanyId,\n      stripePaymentIntentId: transaction.stripePaymentIntentId,\n      createdBy: transaction.createdBy,\n      createdAt: now\n    };\n  }\n\n  async chargeWalletForLicense(\n    companyId: string,\n    licenseId: string,\n    amount: number,\n    createdBy: string\n  ): Promise<boolean> {\n    const wallet = await this.getCompanyWallet(companyId);\n    if (!wallet || wallet.balance < amount) {\n      console.log(`‚ùå Wallet charge failed: Company ${companyId}, insufficient balance (${wallet?.balance || 0} < ${amount})`);\n      return false;\n    }\n\n    try {\n      // Scala i crediti dal wallet\n      await this.updateWalletBalance(\n        companyId,\n        -amount,\n        `Rinnovo licenza ${licenseId}`,\n        'spesa',\n        createdBy\n      );\n\n      // Aggiorna la transazione licenza con crediti utilizzati\n      await this.db.query(`\n        UPDATE transactions\n        SET credits_used = ?, payment_method = 'crediti', status = 'pagato_crediti', payment_date = ?\n        WHERE license_id = ? AND status = 'in_attesa'\n      `, [amount, new Date(), licenseId]);\n\n      console.log(`üí≥ Wallet charged: Company ${companyId}, License ${licenseId}, ${amount} crediti`);\n      return true;\n    } catch (error) {\n      console.error('Error charging wallet for license:', error);\n      return false;\n    }\n  }\n\n  // Configuration methods implementation\n  async saveStripeConfiguration(publicKey: string, secretKey: string, userId: string): Promise<void> {\n    try {\n      // First check if configuration already exists\n      const existing = await this.db.query(\n        'SELECT id FROM system_config WHERE config_key = ? OR config_key = ?',\n        ['stripe_public_key', 'stripe_secret_key']\n      );\n\n      if (existing.length > 0) {\n        // Update existing configuration\n        await this.db.query(\n          'UPDATE system_config SET config_value = ?, updated_at = NOW(), updated_by = ? WHERE config_key = ?',\n          [publicKey, userId, 'stripe_public_key']\n        );\n        await this.db.query(\n          'UPDATE system_config SET config_value = ?, updated_at = NOW(), updated_by = ? WHERE config_key = ?',\n          [secretKey, userId, 'stripe_secret_key']\n        );\n      } else {\n        // Insert new configuration\n        await this.db.query(\n          'INSERT INTO system_config (id, config_key, config_value, created_at, updated_at, created_by, updated_by) VALUES (?, ?, ?, NOW(), NOW(), ?, ?)',\n          [randomUUID(), 'stripe_public_key', publicKey, userId, userId]\n        );\n        await this.db.query(\n          'INSERT INTO system_config (id, config_key, config_value, created_at, updated_at, created_by, updated_by) VALUES (?, ?, ?, NOW(), NOW(), ?, ?)',\n          [randomUUID(), 'stripe_secret_key', secretKey, userId, userId]\n        );\n      }\n\n      console.log('‚úÖ Stripe configuration saved to database successfully');\n    } catch (error) {\n      console.error('‚ùå Database error saving Stripe config:', error);\n      throw new Error('Failed to save Stripe configuration to database');\n    }\n  }\n\n  async getStripeConfiguration(): Promise<{ publicKey: string; secretKey: string } | null> {\n    try {\n      const rows = await this.db.query(\n        'SELECT config_key, config_value FROM system_config WHERE config_key IN (?, ?)',\n        ['stripe_public_key', 'stripe_secret_key']\n      );\n\n      if (rows.length < 2) {\n        return null;\n      }\n\n      const config: { publicKey: string; secretKey: string } = { publicKey: '', secretKey: '' };\n\n      for (const row of rows) {\n        if (row.config_key === 'stripe_public_key') {\n          config.publicKey = row.config_value;\n        } else if (row.config_key === 'stripe_secret_key') {\n          config.secretKey = row.config_value;\n        }\n      }\n\n      return config.publicKey && config.secretKey ? config : null;\n    } catch (error) {\n      console.error('‚ùå Database error retrieving Stripe config:', error);\n      return null;\n    }\n  }\n\n  // Category methods\n  async getAllCategories(): Promise<Category[]> {\n    const rows = await this.db.query('SELECT * FROM categories WHERE is_active = TRUE ORDER BY name');\n    return rows.map((row: any) => ({\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      color: row.color,\n      isActive: row.is_active,\n      companyId: row.company_id,\n      createdAt: row.created_at\n    }));\n  }\n\n  async getCategoriesByCompanyHierarchy(companyId: string): Promise<Category[]> {\n    // Get company hierarchy (user's company + all subcompanies)\n    const companyIds = await this.getCompanyHierarchy(companyId);\n    const placeholders = companyIds.map(() => '?').join(',');\n\n    console.log(`getCategoriesByCompanyHierarchy: Company ${companyId} hierarchy: [${companyIds.join(', ')}]`);\n\n    // Get categories that belong to companies in hierarchy + global categories (company_id IS NULL)\n    const rows = await this.db.query(`\n      SELECT * FROM categories\n      WHERE is_active = TRUE\n      AND (company_id IS NULL OR company_id IN (${placeholders}))\n      ORDER BY company_id IS NULL DESC, name ASC\n    `, companyIds);\n\n    const categories = rows.map((row: any) => ({\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      color: row.color,\n      isActive: row.is_active,\n      companyId: row.company_id,\n      createdAt: row.created_at\n    }));\n\n    console.log(`getCategoriesByCompanyHierarchy: Found ${categories.length} accessible categories for company ${companyId}`);\n    console.log(`Categories: ${categories.map(c => `${c.name}(${c.companyId || 'global'})`).join(', ')}`);\n\n    return categories;\n  }\n\n  async createCategory(category: any): Promise<Category> {\n    const id = nanoid();\n\n    // Check for duplicate names within the same company scope\n    const existingCategory = await this.db.query(`\n      SELECT id FROM categories \n      WHERE name = ? AND (\n        (company_id IS NULL AND ? IS NULL) OR \n        (company_id = ?)\n      )\n    `, [\n      category.name,\n      category.companyId || null,\n      category.companyId || null\n    ]);\n\n    if (existingCategory.length > 0) {\n      throw new Error(`A category with the name \"${category.name}\" already exists in this scope`);\n    }\n\n    await this.db.query(`\n      INSERT INTO categories (id, name, description, color, is_active, company_id)\n      VALUES (?, ?, ?, ?, TRUE, ?)\n    `, [\n      id,\n      category.name,\n      category.description || null,\n      category.color || '#3B82F6',\n      category.companyId || null\n    ]);\n\n    return {\n      id,\n      name: category.name,\n      description: category.description || null,\n      color: category.color || '#3B82F6',\n      isActive: true,\n      companyId: category.companyId || null,\n      createdAt: new Date()\n    };\n  }\n\n  async getCategoryById(categoryId: string): Promise<Category | null> {\n    const rows = await this.db.query('SELECT * FROM categories WHERE id = ? AND is_active = TRUE', [categoryId]);\n    if (rows.length === 0) return null;\n\n    const row = rows[0];\n    return {\n      id: row.id,\n      name: row.name,\n      description: row.description,\n      color: row.color,\n      isActive: row.is_active,\n      companyId: row.company_id,\n      createdAt: row.created_at\n    };\n  }\n\n  async updateCategory(categoryId: string, updateData: Partial<Category>): Promise<Category | null> {\n    try {\n      const setParts = [];\n      const values = [];\n\n      if (updateData.name !== undefined) {\n        setParts.push('name = ?');\n        values.push(updateData.name);\n      }\n      if (updateData.description !== undefined) {\n        setParts.push('description = ?');\n        values.push(updateData.description);\n      }\n      if (updateData.color !== undefined) {\n        setParts.push('color = ?');\n        values.push(updateData.color);\n      }\n      if (updateData.isActive !== undefined) {\n        setParts.push('is_active = ?');\n        values.push(updateData.isActive);\n      }\n\n      if (setParts.length === 0) {\n        return await this.getCategoryById(categoryId); // Return current category if no updates\n      }\n\n      values.push(categoryId);\n\n      await database.query(`\n        UPDATE categories\n        SET ${setParts.join(', ')}\n        WHERE id = ?\n      `, values);\n\n      return await this.getCategoryById(categoryId);\n    } catch (error) {\n      console.error('Update category error:', error);\n      throw error;\n    }\n  }\n\n  async deleteCategory(categoryId: string): Promise<boolean> {\n    try {\n      // Check if category has products\n      const products = await database.query('SELECT COUNT(*) as count FROM products WHERE category_id = ?', [categoryId]);\n\n      if (products[0].count > 0) {\n        throw new Error(`Cannot delete category: ${products[0].count} products are assigned to this category`);\n      }\n\n      await database.query('DELETE FROM categories WHERE id = ?', [categoryId]);\n      return true;\n    } catch (error) {\n      console.error('Delete category error:', error);\n      throw error;\n    }\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":109333},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, serial, decimal, boolean, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table for authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull(), // superadmin, rivenditore, agente, cliente\n  companyId: varchar(\"company_id\"),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Companies/Organizations hierarchy\nexport const companies = pgTable(\"companies\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // rivenditore, sottoazienda, agente, cliente\n  parentId: varchar(\"parent_id\"),\n  status: text(\"status\").default('active'), // active, inactive, pending\n  contactInfo: json(\"contact_info\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Agents - company representatives/salespeople\nexport const agents = pgTable(\"agents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").default('agente'), // agente, responsabile_vendite, account_manager\n  isActive: boolean(\"is_active\").default(true),\n  permissions: json(\"permissions\"), // permissions for various operations\n  territory: text(\"territory\"), // geographical or client territory\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Categories for products\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  color: text(\"color\").default('#3B82F6'), // hex color for UI\n  isActive: boolean(\"is_active\").default(true),\n  companyId: varchar(\"company_id\"), // Foreign key to companies - null for global categories\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Products/Applications\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  version: text(\"version\").notNull(),\n  description: text(\"description\"),\n  categoryId: varchar(\"category_id\"), // Foreign key to categories\n  // Pricing and configuration (only modifiable by superadmin)\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  discount: decimal(\"discount\", { precision: 5, scale: 2 }).default('0'),\n  licenseType: text(\"license_type\").notNull(), // permanente, trial, abbonamento_mensile, abbonamento_annuale\n  maxUsers: integer(\"max_users\").default(1),\n  maxDevices: integer(\"max_devices\").default(1),\n  trialDays: integer(\"trial_days\").default(30), // trial period in days\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Product modules/features\nexport const modules = pgTable(\"modules\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  basePrice: decimal(\"base_price\", { precision: 10, scale: 2 }),\n});\n\n// Clients\nexport const clients = pgTable(\"clients\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\"),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  status: text(\"status\").default('pending'), // convalidato, in_attesa, sospeso\n  contactInfo: json(\"contact_info\"),\n  isMultiSite: boolean(\"is_multi_site\").default(false),\n  isMultiUser: boolean(\"is_multi_user\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Licenses\nexport const licenses = pgTable(\"licenses\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  clientId: varchar(\"client_id\").notNull(),\n  productId: varchar(\"product_id\").notNull(),\n  activationKey: text(\"activation_key\").notNull().unique(),\n  expiryDate: timestamp(\"expiry_date\"),\n  activationDate: timestamp(\"activation_date\"), // when license was activated\n  status: text(\"status\").default('pending'), // attiva, scaduta, sospesa, demo, in_attesa_convalida\n  computerKey: text(\"computer_key\"), // device-specific key\n  activeModules: json(\"active_modules\"),\n  assignedCompany: varchar(\"assigned_company\"),\n  assignedAgent: varchar(\"assigned_agent\"),\n  renewalEnabled: boolean(\"renewal_enabled\").default(false), // automatic renewal enabled\n  renewalPeriod: text(\"renewal_period\"), // monthly, yearly - for subscriptions\n  notes: text(\"notes\"), // additional notes\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  // Pricing, license type, max users/devices are now inherited from product\n});\n\n// Company Wallets - Sistema crediti aziendale\nexport const companyWallets = pgTable(\"company_wallets\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull().unique(),\n  balance: decimal(\"balance\", { precision: 10, scale: 2 }).default('0.00'), // saldo crediti (1 credito = 1 euro)\n  totalRecharges: decimal(\"total_recharges\", { precision: 10, scale: 2 }).default('0.00'), // totale ricariche effettuate\n  totalSpent: decimal(\"total_spent\", { precision: 10, scale: 2 }).default('0.00'), // totale speso\n  lastRechargeDate: timestamp(\"last_recharge_date\"),\n  stripeCustomerId: text(\"stripe_customer_id\"), // ID cliente Stripe per ricariche\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Wallet Transactions - Storico movimenti crediti\nexport const walletTransactions = pgTable(\"wallet_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyId: varchar(\"company_id\").notNull(),\n  type: text(\"type\").notNull(), // ricarica, spesa, trasferimento_in, trasferimento_out\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(), // importo in crediti\n  balanceBefore: decimal(\"balance_before\", { precision: 10, scale: 2 }).notNull(),\n  balanceAfter: decimal(\"balance_after\", { precision: 10, scale: 2 }).notNull(),\n  description: text(\"description\").notNull(),\n  relatedEntityType: text(\"related_entity_type\"), // license, recharge, transfer\n  relatedEntityId: varchar(\"related_entity_id\"), // ID della licenza, ricarica, o trasferimento\n  fromCompanyId: varchar(\"from_company_id\"), // per trasferimenti\n  toCompanyId: varchar(\"to_company_id\"), // per trasferimenti\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\"), // per ricariche Stripe\n  createdBy: varchar(\"created_by\"), // utente che ha creato la transazione\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Transactions - Modificato per supportare crediti\nexport const transactions = pgTable(\"transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  licenseId: varchar(\"license_id\").notNull(),\n  clientId: varchar(\"client_id\"), // client who needs to pay\n  companyId: varchar(\"company_id\"), // company of the client\n  type: text(\"type\").notNull(), // attivazione, rinnovo, posticipato\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(), // ora in crediti\n  discount: decimal(\"discount\", { precision: 10, scale: 2 }).default('0.00'),\n  finalAmount: decimal(\"final_amount\", { precision: 10, scale: 2 }).notNull(), // amount - discount\n  paymentMethod: text(\"payment_method\"), // crediti, contanti, bonifico, carta_di_credito, stripe, paypal\n  status: text(\"status\").default('in_attesa'), // in_attesa, pagato_crediti, contanti, bonifico, carta_di_credito, dall_agente, dal_rivenditore, gratis, altro\n  paymentLink: text(\"payment_link\"), // Stripe payment link\n  paymentDate: timestamp(\"payment_date\"), // when payment was completed\n  creditsUsed: decimal(\"credits_used\", { precision: 10, scale: 2 }), // crediti utilizzati dal wallet\n  notes: text(\"notes\"),\n  modifiedBy: varchar(\"modified_by\"), // user who last modified the record\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Activation logs\nexport const activationLogs = pgTable(\"activation_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  licenseId: varchar(\"license_id\").notNull(),\n  keyType: text(\"key_type\").notNull(), // activation, computer\n  deviceInfo: json(\"device_info\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  result: text(\"result\").notNull(), // success, failed\n  errorMessage: text(\"error_message\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Access logs\nexport const accessLogs = pgTable(\"access_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull(),\n  action: text(\"action\").notNull(),\n  resource: text(\"resource\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Sistema di registrazione dispositivi - Tabella Testa (Header)\nexport const testaRegAzienda = pgTable(\"Testa_Reg_Azienda\", {\n  partitaIva: varchar(\"PartitaIva\", { length: 20 }).primaryKey(),\n  nomeAzienda: text(\"NomeAzienda\").notNull(),\n  prodotto: text(\"Prodotto\").notNull(),\n  versione: varchar(\"Versione\", { length: 50 }),\n  modulo: text(\"Modulo\"),\n  utenti: integer(\"Utenti\").default(0),\n  totDispositivi: integer(\"TotDispositivi\").default(0),\n  idLicenza: varchar(\"ID_Licenza\", { length: 36 }), // FK verso tabella licenze (nullable)\n  totOrdini: integer(\"TotOrdini\").default(0),\n  totVendite: decimal(\"TotVendite\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Sistema di registrazione dispositivi - Tabella Dettaglio (Details)  \nexport const dettRegAzienda = pgTable(\"Dett_Reg_Azienda\", {\n  id: serial(\"ID\").primaryKey(),\n  partitaIva: varchar(\"PartitaIva\", { length: 20 }).notNull(),\n  uidDispositivo: text(\"UID_Dispositivo\").notNull(),\n  sistemaOperativo: varchar(\"SistemaOperativo\", { length: 100 }),\n  note: text(\"Note\"),\n  dataAttivazione: timestamp(\"DataAttivazione\"),\n  dataUltimoAccesso: timestamp(\"DataUltimoAccesso\"),\n  ordini: integer(\"Ordini\").default(0),\n  vendite: decimal(\"Vendite\", { precision: 15, scale: 2 }).default(\"0.00\"),\n  computerKey: text(\"Computer_Key\"), // Chiave di binding dispositivo\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertCompanySchema = createInsertSchema(companies).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertAgentSchema = createInsertSchema(agents).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertModuleSchema = createInsertSchema(modules).omit({ \n  id: true \n});\n\nexport const insertClientSchema = createInsertSchema(clients).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertLicenseSchema = createInsertSchema(licenses).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertTransactionSchema = createInsertSchema(transactions).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertCompanyWalletSchema = createInsertSchema(companyWallets).omit({ \n  id: true, \n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertWalletTransactionSchema = createInsertSchema(walletTransactions).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertActivationLogSchema = createInsertSchema(activationLogs).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertAccessLogSchema = createInsertSchema(accessLogs).omit({ \n  id: true, \n  createdAt: true \n});\n\nexport const insertTestaRegAziendaSchema = createInsertSchema(testaRegAzienda).omit({ \n  createdAt: true,\n  updatedAt: true\n});\n\nexport const insertDettRegAziendaSchema = createInsertSchema(dettRegAzienda).omit({ \n  id: true,\n  createdAt: true,\n  updatedAt: true\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Company = typeof companies.$inferSelect;\nexport type InsertCompany = z.infer<typeof insertCompanySchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type Module = typeof modules.$inferSelect;\nexport type InsertModule = z.infer<typeof insertModuleSchema>;\n\nexport type Client = typeof clients.$inferSelect;\nexport type InsertClient = z.infer<typeof insertClientSchema>;\n\nexport type License = typeof licenses.$inferSelect;\nexport type InsertLicense = z.infer<typeof insertLicenseSchema>;\n\nexport type Transaction = typeof transactions.$inferSelect;\nexport type InsertTransaction = z.infer<typeof insertTransactionSchema>;\n\nexport type CompanyWallet = typeof companyWallets.$inferSelect;\nexport type InsertCompanyWallet = z.infer<typeof insertCompanyWalletSchema>;\n\nexport type WalletTransaction = typeof walletTransactions.$inferSelect;\nexport type InsertWalletTransaction = z.infer<typeof insertWalletTransactionSchema>;\n\nexport type ActivationLog = typeof activationLogs.$inferSelect;\nexport type InsertActivationLog = z.infer<typeof insertActivationLogSchema>;\n\nexport type AccessLog = typeof accessLogs.$inferSelect;\nexport type InsertAccessLog = z.infer<typeof insertAccessLogSchema>;\n\nexport type TestaRegAzienda = typeof testaRegAzienda.$inferSelect;\nexport type InsertTestaRegAzienda = z.infer<typeof insertTestaRegAziendaSchema>;\n\nexport type DettRegAzienda = typeof dettRegAzienda.$inferSelect;\nexport type InsertDettRegAzienda = z.infer<typeof insertDettRegAziendaSchema>;\n\n// API Response types\nexport type LicenseWithDetails = License & {\n  client: Client;\n  product: Product;\n  company?: Company;\n};\n\nexport type UserWithCompany = User & {\n  company?: Company;\n};\n\nexport type DashboardStats = {\n  activeLicenses: number;\n  demoLicenses: number;\n  totalClients: number;\n  monthlyRevenue: number;\n  todayActivations: number;\n  demoConversions: number;\n  expiringRenewals: number;\n  dailyRevenue: number;\n};","size_bytes":14724},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./hooks/use-auth\";\nimport { SidebarProvider } from \"./contexts/SidebarContext\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Login from \"@/pages/login\";\nimport NotFound from \"@/pages/not-found\";\nimport LicensesPage from \"@/pages/licenses\";\nimport ClientsPage from \"@/pages/clients\";\nimport CompaniesPage from \"@/pages/companies\";\nimport ProductsPage from \"@/pages/products\";\nimport TransactionsPage from \"@/pages/transactions\";\nimport SettingsPage from \"@/pages/settings\";\nimport LogsPage from \"@/pages/logs\";\nimport SoftwareRegistrationsPage from \"@/pages/software-registrations\";\nimport UsersPage from \"@/pages/users\";\nimport WalletPage from \"@/pages/wallet\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n      <Route path=\"/licenses\" component={LicensesPage} />\n      <Route path=\"/clients\" component={ClientsPage} />\n      <Route path=\"/companies\" component={CompaniesPage} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/transactions\" component={TransactionsPage} />\n      <Route path=\"/software-registrations\" component={SoftwareRegistrationsPage} />\n      <Route path=\"/users\" component={UsersPage} />\n      <Route path=\"/wallet\" component={WalletPage} />\n      <Route path=\"/settings\" component={SettingsPage} />\n      <Route path=\"/logs\" component={LogsPage} />\n      <Route path=\"/login\" component={Login} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <SidebarProvider>\n            <Toaster />\n            <Router />\n          </SidebarProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":2138},"client/src/index.css":{"content":"/* FontAwesome CDN integration */\n@import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(123, 38%, 57%);\n  --secondary-foreground: hsl(60, 9.1%, 97.8%);\n  --accent: hsl(36, 98%, 48%);\n  --accent-foreground: hsl(60, 9.1%, 97.8%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --surface: hsl(0, 0%, 98%);\n  --error: hsl(0, 73%, 41%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --surface: hsl(240, 10%, 5%);\n  --error: hsl(0, 62.8%, 30.6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Roboto', sans-serif;\n  }\n}\n\n@layer utilities {\n  .bg-surface {\n    background-color: var(--surface);\n  }\n\n  .text-primary {\n    color: var(--primary);\n  }\n\n  .bg-primary {\n    background-color: var(--primary);\n  }\n\n  .text-secondary {\n    color: var(--secondary);\n  }\n\n  .bg-secondary {\n    background-color: var(--secondary);\n  }\n\n  .text-accent {\n    color: var(--accent);\n  }\n\n  .bg-accent {\n    background-color: var(--accent);\n  }\n\n  .text-error {\n    color: var(--error);\n  }\n\n  .bg-error {\n    background-color: var(--error);\n  }\n}\n\n/* Custom scrollbar for horizontal scroll areas */\n.overflow-x-auto::-webkit-scrollbar {\n  height: 8px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 4px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb {\n  background: #c1c1c1;\n  border-radius: 4px;\n}\n\n.overflow-x-auto::-webkit-scrollbar-thumb:hover {\n  background: #a1a1a1;\n}\n\n.recharts-tooltip-content {\n    background: white !important;\n    border: 1px solid #e2e8f0 !important;\n    border-radius: 6px !important;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;\n  }\n\n  /* Excel-style table */\n  .excel-table {\n  font-size: 13px;\n}\n\n/* Compact tabs styling */\n.tabs-content {\n  margin-top: 1rem;\n}\n\n/* Compact card spacing */\n.compact-card .card-header {\n  padding-bottom: 0.75rem;\n}\n\n.compact-card .card-content {\n  padding-top: 0.5rem;\n}","size_bytes":3326},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/contexts/SidebarContext.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface SidebarContextType {\n  isCollapsed: boolean;\n  setIsCollapsed: (collapsed: boolean) => void;\n  sidebarWidth: string;\n  contentMargin: string;\n}\n\nconst SidebarContext = createContext<SidebarContextType | undefined>(undefined);\n\nexport const SidebarProvider = ({ children }: { children: ReactNode }) => {\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  const sidebarWidth = isCollapsed ? 'w-16' : 'w-64';\n  const contentMargin = isCollapsed ? 'ml-16' : 'ml-64';\n\n  return (\n    <SidebarContext.Provider value={{\n      isCollapsed,\n      setIsCollapsed,\n      sidebarWidth,\n      contentMargin\n    }}>\n      {children}\n    </SidebarContext.Provider>\n  );\n};\n\nexport const useSidebar = () => {\n  const context = useContext(SidebarContext);\n  if (context === undefined) {\n    throw new Error('useSidebar must be used within a SidebarProvider');\n  }\n  return context;\n};","size_bytes":959},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/api\";\n\ninterface User {\n  id: string;\n  username: string;\n  name: string;\n  email: string;\n  role: string;\n  companyId?: string;\n  company?: {\n    id: string;\n    name: string;\n    type: string;\n  };\n}\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (username: string, password: string) => Promise<void>;\n  logout: () => void;\n  forceReauth: () => void;\n  isTokenValid: () => Promise<boolean>;\n  refreshAuth: () => Promise<boolean>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [, setLocation] = useLocation();\n\n  const checkTokenValidity = async (): Promise<boolean> => {\n    const token = localStorage.getItem('token');\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Math.floor(Date.now() / 1000);\n      return payload.exp > currentTime;\n    } catch (e) {\n      localStorage.removeItem('token');\n      setUser(null);\n      return false;\n    }\n  };\n\n  const refreshAuth = async (): Promise<boolean> => {\n    const token = localStorage.getItem('token');\n\n    if (!token || !(await checkTokenValidity())) {\n      logout();\n      return false;\n    }\n\n    try {\n      const response = await fetch('/api/user', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        const userData = await response.json();\n\n        setUser({\n          id: userData.id,\n          username: userData.username,\n          name: userData.name || userData.username,\n          email: userData.email || '',\n          role: userData.role,\n          companyId: userData.companyId || null,\n          company: userData.company\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n\n      logout();\n      return false;\n    }\n  };\n\n\n  // Define logout function before using it\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('token'); // Remove old token key as well\n    setUser(null);\n\n    setLocation('/login');\n  };\n\n  const forceReauth = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('token'); // Remove old token key as well\n    setUser(null);\n    setLoading(false);\n    setLocation('/login'); // Ensure redirect on forced reauthentication\n  };\n\n  useEffect(() => {\n    const initAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const isValid = await checkTokenValidity();\n        if (isValid) {\n          const refreshed = await refreshAuth();\n          if (!refreshed) {\n            setLocation('/login');\n          }\n        } else {\n\n          setLocation('/login'); // Redirect to login if token is invalid on initial load\n        }\n      } else {\n        setLocation('/login'); // Redirect to login if no token is found\n      }\n      setLoading(false);\n    };\n\n    initAuth();\n  }, [setLocation]); // Depend on setLocation for redirection\n\n  // Check token validity periodically\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      if (user) { // Only check if there's a user logged in\n        const isValid = checkTokenValidity();\n        if (!isValid) {\n\n          logout(); // Use logout to handle state reset and redirection\n        } else {\n          // Optionally refresh auth data if token is valid but might be stale\n          await refreshAuth();\n        }\n      }\n    }, 15 * 60 * 1000); // Check every 15 minutes\n\n    return () => clearInterval(interval); // Cleanup interval on component unmount or user change\n  }, [user, logout, setLocation]); // Rerun effect if user, logout, or setLocation changes\n\n  const login = async (username: string, password: string) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, password }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || 'Invalid credentials');\n      }\n\n      const data = await response.json();\n\n\n      localStorage.setItem('token', data.token);\n\n      // Ensure companyId is properly set from login response\n      const userData = data.user;\n      console.log('Login successful, user data received:', userData);\n\n      // Set user data from response - ensure all company data is properly mapped\n      setUser({\n        id: userData.id,\n        username: userData.username,\n        name: userData.name,\n        email: userData.email,\n        role: userData.role,\n        companyId: userData.companyId || userData.company_id,\n        company: userData.company\n      });\n\n      setLoading(false);\n    } catch (error) {\n      setUser(null);\n      setLoading(false);\n      throw error;\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ \n      user, \n      loading, \n      login, \n      logout, \n      forceReauth,\n      isTokenValid: checkTokenValidity,\n      refreshAuth\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}","size_bytes":5783},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"export async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n  };\n\n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const response = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n  });\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({}));\n    throw new Error(errorData.message || `HTTP error! status: ${response.status}`);\n  }\n\n  return response;\n}","size_bytes":619},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = data ? { \"Content-Type\": \"application/json\" } : {};\n  \n  if (token) {\n    headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const url = queryKey[0] as string;\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers['Authorization'] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(url, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1752},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/clients.tsx":{"content":"import { useEffect, useState, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function ClientsPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const [selectedClient, setSelectedClient] = useState<any>(null);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isViewModalOpen, setIsViewModalOpen] = useState(false);\n  const [isNewModalOpen, setIsNewModalOpen] = useState(false);\n  const { contentMargin } = useSidebar();\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [companyFilter, setCompanyFilter] = useState(\"all\");\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n\n\n  // Fetch clients\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients', user?.companyId],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      console.log('Fetching clients for user:', user?.username, 'Role:', user?.role, 'Company ID:', user?.companyId);\n\n      const response = await fetch('/api/clients', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          alert('La sessione √® scaduta. Verrai reindirizzato al login.');\n          setLocation('/login');\n          return []; // Return empty array if redirected\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const data = await response.json();\n\n\n      // Server already filters clients correctly for admin users by company hierarchy\n      // No need for additional client-side filtering\n\n      return data;\n    }\n  });\n\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          alert('La sessione √® scaduta. Verrai reindirizzato al login.');\n          setLocation('/login');\n          return []; // Return empty array if redirected\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  const { data: licenses = [] } = useQuery({\n    queryKey: ['/api/licenses'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 401 || response.status === 403) {\n          alert('La sessione √® scaduta. Verrai reindirizzato al login.');\n          setLocation('/login');\n          return []; // Return empty array if redirected\n        }\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    },\n  });\n\n  // Safe array definitions\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n  const safeLicenses = Array.isArray(licenses) ? licenses : [];\n\n  // Function to get company name by ID\n  const getCompanyName = (companyId: string) => {\n    const company = safeCompanies.find((c: any) => c.id === companyId);\n    return company ? company.name : 'N/A';\n  };\n\n  // Function to get client licenses count\n  const getClientLicensesCount = (clientId: string) => {\n    const count = safeLicenses.filter((license: any) => \n      license.clientId === clientId || \n      license.client_id === clientId || \n      license.client?.id === clientId\n    ).length;\n\n    return count;\n  };\n\n  // Function to get client's licensed products\n  const getClientProducts = (clientId: string) => {\n    const clientLicenses = safeLicenses.filter((license: any) => \n      license.clientId === clientId || \n      license.client_id === clientId || \n      license.client?.id === clientId\n    );\n    const products = clientLicenses.map((license: any) => \n      license.product?.name || license.productName\n    ).filter(Boolean);\n    const uniqueProducts = Array.from(new Set(products)); // Remove duplicates\n\n    return uniqueProducts;\n  };\n\n    // Function to get accessible companies for admin (simulated hierarchy)\n    const getAccessibleCompanies = () => {\n        if (!user?.companyId || !safeCompanies.length) return [];\n\n        // Build company hierarchy - include user's company and all its subcompanies\n        const hierarchy: any[] = [];\n        const userCompany = safeCompanies.find((c: any) => c.id === user.companyId);\n\n        if (userCompany) {\n            hierarchy.push(userCompany);\n\n            // Find all subcompanies recursively\n            const findSubcompanies = (parentId: string) => {\n                const subcompanies = safeCompanies.filter((c: any) => \n                    (c.parent_id === parentId || c.parentId === parentId)\n                );\n                subcompanies.forEach((sub: any) => {\n                    hierarchy.push(sub);\n                    findSubcompanies(sub.id);\n                });\n            };\n\n            findSubcompanies(user.companyId);\n        }\n\n        console.log(`getAccessibleCompanies for admin ${user.username}:`, hierarchy.map(c => ({id: c.id, name: c.name})));\n        return hierarchy;\n    };\n\n  // Filtered clients\n  const filteredClients = useMemo(() => {\n    return safeClients.filter((client: any) => {\n      const matchesSearch = client.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           client.email?.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesStatus = statusFilter === \"all\" || client.status === statusFilter;\n      const matchesCompany = companyFilter === \"all\" || \n                            (client.company_id || client.companyId) === companyFilter;\n\n      return matchesSearch && matchesStatus && matchesCompany;\n    });\n  }, [clients, searchTerm, statusFilter, companyFilter]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      'convalidato': 'default',\n      'in_attesa': 'outline',\n      'sospeso': 'destructive'\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || 'outline'}>\n        {status === 'convalidato' ? 'Convalidato' : \n         status === 'in_attesa' ? 'In Attesa' : \n         status === 'sospeso' ? 'Sospeso' : status}\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n\n      <main className={`flex-1 ${contentMargin} bg-surface transition-all duration-300 ease-in-out`}>\n        <TopBar />\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Gestione Clienti</h1>\n              <p className=\"text-gray-600\">Visualizza e gestisci tutti i clienti del sistema</p>\n            </div>\n            <Button \n              className=\"bg-primary hover:bg-blue-700\"\n              onClick={() => setIsNewModalOpen(true)}\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              Nuovo Cliente\n            </Button>\n          </div>\n\n          {/* Search and Filter Section */}\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\n                <CardTitle>Elenco Clienti ({filteredClients.length} di {clients.length})</CardTitle>\n\n                <div className=\"flex flex-col md:flex-row gap-2 w-full md:w-auto\">\n                  <Input\n                    placeholder=\"Cerca per nome o email...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"md:w-64\"\n                  />\n\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger className=\"md:w-40\">\n                      <SelectValue placeholder=\"Stato\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tutti gli stati</SelectItem>\n                      <SelectItem value=\"convalidato\">Convalidato</SelectItem>\n                      <SelectItem value=\"in_attesa\">In Attesa</SelectItem>\n                      <SelectItem value=\"sospeso\">Sospeso</SelectItem>\n                    </SelectContent>\n                  </Select>\n\n                  <Select value={companyFilter} onValueChange={setCompanyFilter}>\n                    <SelectTrigger className=\"md:w-48\">\n                      <SelectValue placeholder=\"Azienda\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tutte le aziende</SelectItem>\n                      {safeCompanies.map((company: any) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              {loading ? (\n                <div className=\"flex items-center justify-center h-48\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"bg-gray-50\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Nome</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Email</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Azienda</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Stato</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Licenze</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Prodotti</th>\n                        <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase\">Azioni</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white divide-y divide-gray-200\">\n                      {filteredClients.map((client: any, index: number) => {\n                        console.log(`Rendering client ${index + 1}:`, client);\n                        const clientProducts = getClientProducts(client.id);\n                        const licensesCount = getClientLicensesCount(client.id);\n\n                        return (\n                          <tr key={client.id} className=\"hover:bg-gray-50\">\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">\n                              {client.name || 'N/A'}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              {client.email || 'N/A'}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              <div className=\"flex items-center\">\n                                <i className=\"fas fa-building text-gray-400 mr-2\"></i>\n                                <button\n                                  onClick={() => setLocation('/companies')}\n                                  className=\"text-blue-600 hover:text-blue-800 hover:underline\"\n                                >\n                                  {getCompanyName(client.company_id || client.companyId)}\n                                </button>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap\">\n                              {getStatusBadge(client.status || 'unknown')}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                              <div className=\"flex items-center\">\n                                <i className=\"fas fa-key text-blue-500 mr-2\"></i>\n                                <button\n                                  onClick={() => setLocation('/licenses')}\n                                  className=\"font-medium text-blue-600 hover:text-blue-800 hover:underline\"\n                                >\n                                  {licensesCount}\n                                </button>\n                              </div>\n                            </td>\n                            <td className=\"px-6 py-4 text-sm text-gray-500 max-w-xs\">\n                              {clientProducts.length > 0 ? (\n                                <div className=\"flex flex-wrap gap-1\">\n                                  {clientProducts.slice(0, 2).map((product, idx) => (\n                                    <button\n                                      key={idx}\n                                      onClick={() => setLocation('/products')}\n                                      className=\"px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded-full hover:bg-blue-200 transition-colors\"\n                                    >\n                                      {String(product)}\n                                    </button>\n                                  ))}\n                                  {clientProducts.length > 2 && (\n                                    <button\n                                      onClick={() => setLocation('/products')}\n                                      className=\"px-2 py-1 bg-gray-100 text-gray-600 text-xs rounded-full hover:bg-gray-200 transition-colors\"\n                                    >\n                                      +{clientProducts.length - 2}\n                                    </button>\n                                  )}\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400 italic\">Nessun prodotto</span>\n                              )}\n                            </td>\n                            <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\" \n                                className=\"mr-2\"\n                                onClick={() => {\n                                  setSelectedClient(client);\n                                  setIsViewModalOpen(true);\n                                }}\n                                title=\"Visualizza dettagli cliente\"\n                              >\n                                <i className=\"fas fa-eye\"></i>\n                              </Button>\n                              <Button \n                                variant=\"ghost\" \n                                size=\"sm\"\n                                className=\"mr-2\"\n                                onClick={() => {\n                                  setSelectedClient(client);\n                                  setIsEditModalOpen(true);\n                                }}\n                              >\n                                <i className=\"fas fa-edit\"></i>\n                              </Button>\n                              {user?.role === 'superadmin' && (\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  className=\"text-red-600 hover:text-red-800\"\n                                  onClick={async () => {\n                                    if (confirm(`Sei sicuro di voler eliminare il cliente \"${client.name}\"? Questa azione non pu√≤ essere annullata.`)) {\n                                      try {\n                                        const response = await fetch(`/api/clients/${client.id}`, {\n                                          method: 'DELETE',\n                                          headers: {\n                                            'Authorization': `Bearer ${localStorage.getItem('token')}`\n                                          }\n                                        });\n\n                                        if (response.ok) {\n                                          // Refresh the page to show updated list\n                                          window.location.reload();\n                                        } else {\n                                          const error = await response.json();\n                                          alert(`Errore nell'eliminazione: ${error.message}`);\n                                        }\n                                      } catch (error) {\n                                        console.error('Error deleting client:', error);\n                                        alert('Errore di connessione durante l\\'eliminazione del cliente');\n                                      }\n                                    }\n                                  }}\n                                >\n                                  <i className=\"fas fa-trash\"></i>\n                                </Button>\n                              )}\n                            </td>\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n\n                  {filteredClients.length === 0 && clients.length > 0 && (\n                    <div className=\"text-center py-12\">\n                      <p className=\"text-gray-500\">Nessun cliente trovato con i filtri selezionati</p>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => {\n                          setSearchTerm(\"\");\n                          setStatusFilter(\"all\");\n                          setCompanyFilter(\"all\");\n                        }}\n                        className=\"mt-2\"\n                      >\n                        Rimuovi filtri\n                      </Button>\n                    </div>\n                  )}\n\n                  {clients.length === 0 && (\n                    <div className=\"text-center py-12\">\n                      <p className=\"text-gray-500\">Nessun cliente trovato</p>\n                    </div>\n                  )}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* New Client Modal */}\n        <Dialog open={isNewModalOpen} onOpenChange={setIsNewModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Nuovo Cliente</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n\n              // Check if token exists\n              const token = localStorage.getItem('token');\n              if (!token) {\n                alert('La sessione √® scaduta. Verrai reindirizzato al login.');\n                setLocation('/login');\n                return;\n              }\n\n              const formData = new FormData(e.target as HTMLFormElement);\n\n              const clientData = {\n                name: formData.get('name') as string,\n                email: formData.get('email') as string,\n                companyId: formData.get('companyId') as string,\n                status: 'convalidato',\n                isMultiSite: formData.get('multiSite') === 'on',\n                isMultiUser: formData.get('multiUser') === 'on',\n                contactInfo: {\n                  phone: formData.get('phone') as string || '',\n                  company: formData.get('company') as string || ''\n                }\n              };\n\n              try {\n                const response = await fetch('/api/clients', {\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                  },\n                  body: JSON.stringify(clientData)\n                });\n\n                if (response.ok) {\n                  const result = await response.json();\n                  console.log('Client created successfully:', result);\n                  setIsNewModalOpen(false);\n                  // Refresh clients list\n                  window.location.reload();\n                } else if (response.status === 401 || response.status === 403) {\n                  // Remove expired token and redirect to login\n                  localStorage.removeItem('token');\n                  alert('La sessione √® scaduta. Verrai reindirizzato al login.');\n                  setLocation('/login');\n                } else {\n                  const error = await response.json();\n                  console.error('Failed to create client:', error);\n                  alert(`Errore nella creazione del cliente: ${error.message || 'Errore sconosciuto'}`);\n                }\n              } catch (error) {\n                console.error('Error creating client:', error);\n                alert('Errore di connessione durante la creazione del cliente');\n              }\n            }}>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-client-name\">Nome Cliente *</Label>\n                  <Input\n                    id=\"new-client-name\"\n                    name=\"name\"\n                    required\n                    placeholder=\"Nome completo del cliente\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-client-email\">Email *</Label>\n                  <Input\n                    id=\"new-client-email\"\n                    name=\"email\"\n                    type=\"email\"\n                    required\n                    placeholder=\"email@esempio.com\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-client-company-select\">Azienda *</Label>\n                  <select \n                    name=\"companyId\" \n                    required\n                    className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                  >\n                    <option value=\"\">Seleziona azienda</option>\n                    {safeCompanies.map((company: any) => (\n                      <option key={company.id} value={company.id}>\n                        {company.name}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-client-phone\">Telefono</Label>\n                  <Input\n                    id=\"new-client-phone\"\n                    name=\"phone\"\n                    placeholder=\"+39 123 456 7890\"\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"new-client-company\">Persona di riferimento e annotazioni</Label>\n                  <Input\n                    id=\"new-client-company\"\n                    name=\"company\"\n                    placeholder=\"Persona di riferimento e annotazioni\"\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"new-multi-site\"\n                      name=\"multiSite\"\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor=\"new-multi-site\" className=\"text-sm\">\n                      Multi-Sede\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <input\n                      type=\"checkbox\"\n                      id=\"new-multi-user\"\n                      name=\"multiUser\"\n                      className=\"rounded border-gray-300\"\n                    />\n                    <Label htmlFor=\"new-multi-user\" className=\"text-sm\">\n                      Multi-Utente\n                    </Label>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => setIsNewModalOpen(false)}\n                  >\n                    Annulla\n                  </Button>\n                  <Button type=\"submit\" className=\"bg-primary hover:bg-blue-700\">\n                    <i className=\"fas fa-save mr-2\"></i>\n                    Crea Cliente\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Edit Modal */}\n        <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n          <DialogContent className=\"sm:max-w-[500px] max-h-[90vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Modifica Cliente</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target as HTMLFormElement);\n\n              const updateData = {\n                name: formData.get('name') as string,\n                email: formData.get('email') as string,\n                companyId: formData.get('companyId') as string,\n                status: formData.get('status') as string,\n                isMultiSite: formData.get('multiSite') === 'on',\n                isMultiUser: formData.get('multiUser') === 'on',\n              };\n\n              try {\n                const token = localStorage.getItem('token');\n                const response = await fetch(`/api/clients/${selectedClient?.id}`, {\n                  method: 'PATCH',\n                  headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                  },\n                  body: JSON.stringify(updateData)\n                });\n\n                if (response.ok) {\n                  setIsEditModalOpen(false);\n                  // Invalida la cache per aggiornare i dati\n                  queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n                  queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n                  queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n                } else {\n                  const error = await response.json();\n                  alert(`Errore nell'aggiornamento: ${error.message || 'Errore sconosciuto'}`);\n                }\n              } catch (error) {\n                console.error('Error updating client:', error);\n                alert('Errore di connessione durante l\\'aggiornamento del cliente');\n              }\n            }}>\n            <div className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-client-name\">Nome Cliente *</Label>\n                <Input\n                  id=\"edit-client-name\"\n                  name=\"name\"\n                  defaultValue={selectedClient?.name || ''}\n                  placeholder=\"Nome completo del cliente\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-client-email\">Email *</Label>\n                <Input\n                  id=\"edit-client-email\"\n                  name=\"email\"\n                  type=\"email\"\n                  defaultValue={selectedClient?.email || ''}\n                  placeholder=\"email@esempio.com\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-client-company-select\">Azienda *</Label>\n                <select \n                  id=\"edit-client-company-select\"\n                  name=\"companyId\" \n                  required\n                  defaultValue={selectedClient?.company_id || selectedClient?.companyId || ''}\n                  className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                >\n                  <option value=\"\">Seleziona azienda</option>\n                  {safeCompanies.map((company: any) => (\n                    <option key={company.id} value={company.id}>\n                      {company.name}\n                    </option>\n                  ))}\n                </select>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"edit-client-status\">Stato</Label>\n                <select \n                  name=\"status\" \n                  defaultValue={selectedClient?.status || 'in_attesa'}\n                  className=\"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\"\n                >\n                  <option value=\"in_attesa\">In Attesa</option>\n                  <option value=\"convalidato\">Convalidato</option>\n                  <option value=\"sospeso\">Sospeso</option>\n                </select>\n              </div>\n\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"edit-multi-site\"\n                    name=\"multiSite\"\n                    defaultChecked={selectedClient?.is_multi_site || selectedClient?.isMultiSite}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"edit-multi-site\" className=\"text-sm\">\n                    Multi-Sede\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"edit-multi-user\"\n                    name=\"multiUser\"\n                    defaultChecked={selectedClient?.is_multi_user || selectedClient?.isMultiUser}\n                    className=\"rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"edit-multi-user\" className=\"text-sm\">\n                    Multi-Utente\n                  </Label>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button \n                  type=\"button\"\n                  variant=\"outline\" \n                  onClick={() => setIsEditModalOpen(false)}\n                >\n                  Annulla\n                </Button>\n                <Button type=\"submit\" className=\"bg-primary hover:bg-blue-700\">\n                  <i className=\"fas fa-save mr-2\"></i>\n                  Aggiorna Cliente\n                </Button>\n              </div>\n            </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* View Modal */}\n        <Dialog open={isViewModalOpen} onOpenChange={setIsViewModalOpen}>\n          <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n              <DialogTitle>Dettagli Cliente: {selectedClient?.name}</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"font-semibold\">Nome:</Label>\n                  <p className=\"text-gray-600\">{selectedClient?.name}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Email:</Label>\n                  <p className=\"text-gray-600\">{selectedClient?.email}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Azienda:</Label>\n                  <p className=\"text-gray-600\">{getCompanyName(selectedClient?.company_id)}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Stato:</Label>\n                  {selectedClient && getStatusBadge(selectedClient.status)}\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Multi-Sede:</Label>\n                  <p className=\"text-gray-600\">{selectedClient?.is_multi_site ? 'S√¨' : 'No'}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Multi-Utente:</Label>\n                  <p className=\"text-gray-600\">{selectedClient?.is_multi_user ? 'S√¨' : 'No'}</p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Data Creazione:</Label>\n                  <p className=\"text-gray-600\">\n                    {selectedClient?.created_at ? new Date(selectedClient.created_at).toLocaleDateString('it-IT') : 'N/A'}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"font-semibold\">Licenze Attive:</Label>\n                  <p className=\"text-gray-600\">{getClientLicensesCount(selectedClient?.id || '')}</p>\n                </div>\n              </div>\n\n              <div>\n                <Label className=\"font-semibold\">Informazioni Contatto:</Label>\n                <div className=\"mt-2 p-3 bg-gray-50 rounded\">\n                  {selectedClient?.contactInfo ? (\n                    <div>\n                      {selectedClient.contactInfo.phone && (\n                        <p><strong>Telefono:</strong> {selectedClient.contactInfo.phone}</p>\n                      )}\n                      <div>\n                        <Label className=\"font-semibold\">Persona di riferimento e annotazioni:</Label>\n                        <p className=\"text-gray-600\">{selectedClient?.contactInfo?.company || 'Nessuna informazione'}</p>\n                      </div>\n                    </div>\n                  ) : (\n                    <p className=\"text-gray-500\">Nessuna informazione di contatto</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex justify-end pt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsViewModalOpen(false)}\n                >\n                  Chiudi\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </main>\n    </div>\n  );\n}","size_bytes":37166},"client/src/pages/companies.tsx":{"content":"import { useEffect, useState, useMemo } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CompaniesPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const [expandedCompanies, setExpandedCompanies] = useState<Set<string>>(new Set());\n  const [selectedCompany, setSelectedCompany] = useState<any>(null);\n  const { contentMargin } = useSidebar();\n  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isCreateAgentOpen, setIsCreateAgentOpen] = useState(false);\n  const [isCreateUserOpen, setIsCreateUserOpen] = useState(false);\n  const [isManageUsersOpen, setIsManageUsersOpen] = useState(false);\n  const [isEditUserOpen, setIsEditUserOpen] = useState(false);\n  const [selectedUser, setSelectedUser] = useState<any>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'rivenditore',\n    parentId: '',\n    status: 'active',\n    contactInfo: { email: '', phone: '', address: '' }\n  });\n  const [agentFormData, setAgentFormData] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    role: 'agente',\n    territory: ''\n  });\n  const [userFormData, setUserFormData] = useState({\n    username: '',\n    name: '',\n    email: '',\n    password: '',\n    role: 'cliente'\n  });\n  const [editUserFormData, setEditUserFormData] = useState({\n    username: '',\n    name: '',\n    email: '',\n    password: '',\n    role: 'cliente',\n    status: 'active'\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  // Fetch companies\n  const { data: companies = [], isLoading, error } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user,\n    select: (data) => Array.isArray(data) ? data : [], // Ensure always array\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch('/api/companies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.status === 401 || response.status === 403) {\n        // Token scaduto o invalido, reindirizza al login\n        localStorage.removeItem('token');\n        setLocation('/login');\n        throw new Error('Authentication failed');\n      }\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Companies data received:', data);\n      return data;\n    },\n    retry: (failureCount, error: any) => {\n      // Non riprovare se √® un errore di autenticazione\n      if (error?.message?.includes('Authentication failed')) {\n        return false;\n      }\n      return failureCount < 3;\n    }\n  });\n\n  // Safe companies array\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n\n  // Fetch clients\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n    enabled: !!user,\n  });\n\n  // Fetch agents (placeholder for now)\n  const { data: agents = [] } = useQuery({\n    queryKey: ['/api/agents'],\n    enabled: !!user,\n    queryFn: async () => {\n      // For now return empty array, will implement API later\n      return [];\n    },\n  });\n\n  // Fetch users for credential management\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/users'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/users', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      return response.json();\n    }\n  });\n\n  // Helper functions\n  const getCompanyClientCount = (companyId: string) => {\n    const safeClients = Array.isArray(clients) ? clients : [];\n    return safeClients.filter((client: any) => \n      (client.company_id || client.companyId) === companyId\n    ).length;\n  };\n\n  const getCompanyAgentCount = (companyId: string) => {\n    const safeAgents = Array.isArray(agents) ? agents : [];\n    return safeAgents.filter((agent: any) => agent.companyId === companyId).length;\n  };\n\n  const getCompanyHierarchy = () => {\n    const companyMap = new Map();\n    const rootCompanies: any[] = [];\n\n    // Create company map\n    safeCompanies.forEach((company: any) => {\n      companyMap.set(company.id, { ...company, children: [] });\n    });\n\n    // Build hierarchy\n    safeCompanies.forEach((company: any) => {\n      const parentId = company.parent_id || company.parentId;\n      // Check if parentId is null, undefined, 0, '0', or empty string\n      const isRoot = !parentId || parentId === '0' || parentId === 0 || parentId === '';\n\n      if (!isRoot) {\n        const parent = companyMap.get(parentId);\n        if (parent) {\n          parent.children.push(companyMap.get(company.id));\n        } else {\n          // Se il parent non √® nella mappa (potrebbe non essere accessibile), \n          // aggiungi come root company\n          rootCompanies.push(companyMap.get(company.id));\n        }\n      } else {\n        rootCompanies.push(companyMap.get(company.id));\n      }\n    });\n\n    return rootCompanies;\n  };\n\n  // Filter companies based on user permissions\n  const getAccessibleCompanies = () => {\n    if (!user) {\n      console.log('No user found');\n      return [];\n    }\n\n    console.log('User role:', user.role);\n    console.log('User company ID:', user.companyId);\n    console.log('Companies array length:', safeCompanies.length);\n\n    // Superadmin vede tutto\n    if (user.role === 'superadmin') {\n      console.log('Superadmin: returning all companies');\n      return safeCompanies;\n    }\n\n    // Admin vede la sua azienda e le sue sotto-aziende\n    if (user.role === 'admin') {\n      const userCompanyId = user.companyId;\n      if (!userCompanyId) {\n        console.log('Admin without company ID: returning empty array');\n        return [];\n      }\n\n      // Trova l'azienda dell'admin e tutte le sue sotto-aziende (ricorsivamente)\n      const getCompanyHierarchy = (companyId: string): string[] => {\n        const result = [companyId];\n        const children = safeCompanies.filter((c: any) => \n          c.parent_id === companyId || c.parentId === companyId\n        );\n\n        children.forEach(child => {\n          result.push(...getCompanyHierarchy(child.id));\n        });\n\n        return result;\n      };\n\n      const accessibleIds = getCompanyHierarchy(userCompanyId);\n      const filtered = safeCompanies.filter((company: any) => \n        accessibleIds.includes(company.id)\n      );\n\n      console.log(`Admin: user company ${userCompanyId}, hierarchy IDs:`, accessibleIds);\n      console.log(`Admin: filtered ${filtered.length} companies from ${safeCompanies.length}`);\n      return filtered;\n    }\n\n    // Altri ruoli vedono tutte le aziende per ora\n    console.log('Other role: returning all companies');\n    return safeCompanies;\n  };\n\n  // Filtered companies with permission check\n  const filteredHierarchy = useMemo(() => {\n    console.log('filteredHierarchy: User role:', user?.role);\n    console.log('filteredHierarchy: All companies count:', safeCompanies.length);\n\n    if (!safeCompanies || safeCompanies.length === 0) {\n      console.log('No companies available');\n      return [];\n    }\n\n    const accessibleCompanies = getAccessibleCompanies();\n    console.log('filteredHierarchy: Accessible companies count:', accessibleCompanies.length);\n\n    // Create hierarchy from accessible companies only\n    const companyMap = new Map();\n    const rootCompanies: any[] = [];\n\n    // Create company map\n    accessibleCompanies.forEach((company: any) => {\n      companyMap.set(company.id, { ...company, children: [] });\n    });\n\n    // Build hierarchy\n    accessibleCompanies.forEach((company: any) => {\n      const parentId = company.parent_id || company.parentId;\n      const isRoot = !parentId || parentId === '0' || parentId === 0 || parentId === '';\n\n      if (!isRoot) {\n        const parent = companyMap.get(parentId);\n        if (parent) {\n          parent.children.push(companyMap.get(company.id));\n        } else {\n          // Se il parent non √® accessibile, mostra come root\n          rootCompanies.push(companyMap.get(company.id));\n        }\n      } else {\n        rootCompanies.push(companyMap.get(company.id));\n      }\n    });\n\n    if (!searchTerm && typeFilter === \"all\") {\n      return rootCompanies;\n    }\n\n    const filterCompany = (company: any): any => {\n      if (!company) return null;\n\n      const matchesSearch = !searchTerm || \n        company.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        company.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        company.partitaIva?.toLowerCase().includes(searchTerm.toLowerCase());\n\n      // Include client companies in filtering - they should be visible when type is \"all\" or \"cliente\"\n      const matchesType = typeFilter === \"all\" || \n                         company.type === typeFilter ||\n                         (typeFilter === \"cliente\" && company.type === \"cliente\");\n\n      if (matchesSearch && matchesType) {\n        const filteredChildren = company.children\n          ?.map(filterCompany)\n          .filter(Boolean) || [];\n\n        return {\n          ...company,\n          children: filteredChildren\n        };\n      }\n\n      // If company doesn't match but has matching children, include it\n      const filteredChildren = company.children\n        ?.map(filterCompany)\n        .filter(Boolean) || [];\n\n      if (filteredChildren.length > 0) {\n        return {\n          ...company,\n          children: filteredChildren\n        };\n      }\n\n      return null;\n    };\n\n    return rootCompanies.map(filterCompany).filter(Boolean);\n  }, [companies, searchTerm, typeFilter, user]);\n\n  // Mutations for CRUD operations\n  const createCompanyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to create company');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      setIsCreateDialogOpen(false);\n      setFormData({ name: '', type: 'rivenditore', parentId: '', status: 'active', contactInfo: { email: '', phone: '', address: '' } });\n      toast({ title: \"Azienda creata con successo\" });\n    }\n  });\n\n  const updateCompanyMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/companies/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update company');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      setIsEditDialogOpen(false);\n      toast({ title: \"Azienda aggiornata con successo\" });\n    }\n  });\n\n  const createAgentMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/agents', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ ...data, companyId: selectedCompany?.id })\n      });\n      if (!response.ok) throw new Error('Failed to create agent');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/agents'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      setIsCreateAgentOpen(false);\n      setAgentFormData({ name: '', email: '', phone: '', role: 'agente', territory: '' });\n      toast({ title: \"Agente creato con successo\" });\n    }\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ ...data, companyId: selectedCompany?.id })\n      });\n      if (!response.ok) throw new Error('Failed to create user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      setIsCreateUserOpen(false);\n      setUserFormData({ username: '', name: '', email: '', password: '', role: 'cliente' });\n      toast({ title: \"Utente creato con successo\" });\n    }\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string, data: any }) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) throw new Error('Failed to update user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsEditUserOpen(false);\n      toast({ title: \"Credenziali utente aggiornate con successo\" });\n    }\n  });\n\n  const toggleExpand = (companyId: string) => {\n    const newExpanded = new Set(expandedCompanies);\n    if (newExpanded.has(companyId)) {\n      newExpanded.delete(companyId);\n    } else {\n      newExpanded.add(companyId);\n    }\n    setExpandedCompanies(newExpanded);\n  };\n\n  const handleEditCompany = (company: any) => {\n    setSelectedCompany(company);\n    setFormData({\n      name: company.name || '',\n      type: company.type || 'rivenditore',\n      parentId: company.parent_id || company.parentId || '',\n      status: company.status || 'active',\n      contactInfo: company.contact_info || company.contactInfo || { email: '', phone: '', address: '' }\n    });\n    setIsEditDialogOpen(true);\n  };\n\n  const handleSubmitCompany = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (isEditDialogOpen && selectedCompany) {\n      updateCompanyMutation.mutate({ id: selectedCompany.id, data: formData });\n    } else {\n      createCompanyMutation.mutate(formData);\n    }\n  };\n\n  const handleSubmitAgent = (e: React.FormEvent) => {\n    e.preventDefault();\n    createAgentMutation.mutate(agentFormData);\n  };\n\n  const handleSubmitUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    createUserMutation.mutate(userFormData);\n  };\n\n  const handleEditUser = (user: any) => {\n    setSelectedUser(user);\n    setEditUserFormData({\n      username: user.username || '',\n      name: user.name || '',\n      email: user.email || '',\n      password: '', // Leave empty for security\n      role: user.role || 'cliente',\n      status: user.status || 'active'\n    });\n    setIsEditUserOpen(true);\n  };\n\n  const handleSubmitEditUser = (e: React.FormEvent) => {\n    e.preventDefault();\n    const updateData = { ...editUserFormData };\n    // Only include password if it's provided\n    if (!updateData.password) {\n      delete updateData.password;\n    }\n    updateUserMutation.mutate({ id: selectedUser.id, data: updateData });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-green-100 text-green-800';\n      case 'inactive': return 'bg-red-100 text-red-800';\n      case 'pending': return 'bg-yellow-100 text-yellow-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case 'rivenditore': return 'fas fa-store';\n      case 'sottoazienda': return 'fas fa-sitemap';\n      case 'agente': return 'fas fa-user-tie';\n      case 'cliente': return 'fas fa-user';\n      default: return 'fas fa-building';\n    }\n  };\n\n  const CompanyNode = ({ company, level = 0 }: { company: any, level?: number }) => {\n    const hasChildren = company.children && company.children.length > 0;\n    const isExpanded = expandedCompanies.has(company.id);\n    const clientCount = getCompanyClientCount(company.id);\n    const agentCount = getCompanyAgentCount(company.id);\n\n    return (\n      <div className={`${level > 0 ? 'ml-6 border-l-2 border-gray-200 pl-4' : ''}`}>\n        <Card className=\"mb-3 hover:shadow-md transition-shadow\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3 flex-1\">\n                {hasChildren && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleExpand(company.id)}\n                    className=\"p-1 h-6 w-6\"\n                  >\n                    <i className={`fas ${isExpanded ? 'fa-chevron-down' : 'fa-chevron-right'} text-xs`}></i>\n                  </Button>\n                )}\n\n                <div className=\"flex items-center space-x-2\">\n                  <i className={`${getTypeIcon(company.type)} text-blue-600`}></i>\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{company.name}</h3>\n                    <p className=\"text-sm text-gray-500 capitalize\">{company.type}</p>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <Badge className={getStatusColor(company.status || 'active')}>\n                  {company.status || 'Attiva'}\n                </Badge>\n\n                <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                  <button\n                    onClick={() => setLocation('/clients')}\n                    className=\"flex items-center hover:text-green-600 hover:underline\"\n                  >\n                    <i className=\"fas fa-users mr-1\"></i>\n                    {clientCount} clienti\n                  </button>\n\n                  <span className=\"text-gray-300\">|</span>\n\n                  <span className=\"flex items-center\">\n                    <i className=\"fas fa-user-tie mr-1\"></i>\n                    {agentCount} agenti\n                  </span>\n                </div>\n\n                <div className=\"flex space-x-1\">\n                  {(user?.role === 'superadmin' || user?.role === 'admin' || user?.role === 'rivenditore' || \n                    (user?.role === 'agente' && company.id === user?.companyId)) && (\n                    <>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedCompany(company);\n                          setIsManageUsersOpen(true);\n                        }}\n                        title=\"Gestisci Credenziali\"\n                      >\n                        <i className=\"fas fa-key text-purple-600\"></i>\n                      </Button>\n\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => {\n                          setSelectedCompany(company);\n                          setIsCreateUserOpen(true);\n                        }}\n                        title=\"Nuovo Utente\"\n                      >\n                        <i className=\"fas fa-user-plus text-green-600\"></i>\n                      </Button>\n                    </>\n                  )}\n\n                  {(user?.role === 'superadmin' || user?.role === 'admin' || user?.role === 'rivenditore' || \n                    (user?.role === 'agente' && company.id === user?.companyId)) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSelectedCompany(company);\n                        setIsCreateAgentOpen(true);\n                      }}\n                      title=\"Nuovo Agente\"\n                    >\n                      <i className=\"fas fa-user-tie text-blue-600\"></i>\n                    </Button>\n                  )}\n\n                  {(user?.role === 'superadmin' || user?.role === 'admin' || user?.role === 'rivenditore' || \n                    (user?.role === 'agente' && company.id === user?.companyId)) && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => handleEditCompany(company)}\n                      title=\"Modifica Azienda\"\n                    >\n                      <i className=\"fas fa-edit text-gray-600\"></i>\n                    </Button>\n                  )}\n\n                  {user?.role === 'superadmin' && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={async () => {\n                        if (confirm(`Sei sicuro di voler eliminare l'azienda \"${company.name}\"? Questa azione non pu√≤ essere annullata.`)) {\n                          try {\n                            const response = await fetch(`/api/companies/${company.id}`, {\n                              method: 'DELETE',\n                              headers: {\n                                'Authorization': `Bearer ${localStorage.getItem('token')}`\n                              }\n                            });\n\n                            if (response.ok) {\n                              queryClient.invalidateQueries({ queryKey: ['/api/companies'] });\n                              toast({ title: \"Azienda eliminata con successo\" });\n                            } else {\n                              const error = await response.json();\n                              toast({ \n                                title: \"Errore nell'eliminazione\", \n                                description: error.message,\n                                variant: \"destructive\"\n                              });\n                            }\n                          } catch (error) {\n                            console.error('Error deleting company:', error);\n                            toast({ \n                              title: \"Errore di connessione\", \n                              description: \"Errore durante l'eliminazione dell'azienda\",\n                              variant: \"destructive\" \n                            });\n                          }\n                        }\n                      }}\n                      title=\"Elimina Azienda\"\n                      className=\"text-red-600 hover:text-red-800\"\n                    >\n                      <i className=\"fas fa-trash\"></i>\n                    </Button>\n                  )}\n                </div>\n              </div>\n            </div>\n\n\n          </CardContent>\n        </Card>\n\n        {/* Render children */}\n        {hasChildren && isExpanded && (\n          <div className=\"space-y-2\">\n            {company.children.map((child: any) => (\n              <CompanyNode key={child.id} company={child} level={level + 1} />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) return null;\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n\n      <main className={`flex-1 ${contentMargin} bg-surface transition-all duration-300 ease-in-out`}>\n        <TopBar />\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Gestione Aziende</h1>\n              <p className=\"text-gray-600\">\n                {user?.role === 'superadmin' ? 'Visualizza la struttura gerarchica completa delle aziende' :\n                 user?.role === 'admin' ? 'Gestisci la tua azienda e le sotto-aziende associate' :\n                 user?.role === 'rivenditore' ? 'Gestisci la tua rete di sotto-aziende e agenti' :\n                 'Visualizza i dettagli della tua azienda'}\n              </p>\n            </div>\n\n            {(user?.role === 'superadmin' || user?.role === 'admin' || user?.role === 'rivenditore') && (\n              <Button \n                onClick={() => setIsCreateDialogOpen(true)}\n                className=\"bg-primary hover:bg-blue-700\"\n              >\n                <i className=\"fas fa-plus mr-2\"></i>\n                Nuova Azienda\n              </Button>\n            )}\n          </div>\n\n          {/* Filters */}\n          <Card>\n            <CardHeader className=\"pb-4\">\n              <CardTitle>Filtri e Ricerca</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex flex-col md:flex-row gap-4\">\n                <Input\n                  placeholder=\"Cerca aziende per nome...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"flex-1\"\n                />\n\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\n                  <SelectTrigger className=\"md:w-48\">\n                    <SelectValue placeholder=\"Tipo azienda\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n                    <SelectItem value=\"rivenditore\">Rivenditore</SelectItem>\n                    <SelectItem value=\"sottoazienda\">Sotto-azienda</SelectItem>\n                    <SelectItem value=\"agente\">Agente</SelectItem>\n                    <SelectItem value=\"cliente\">Cliente</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Button \n                  variant=\"outline\"\n                  onClick={() => {\n                    setSearchTerm(\"\");\n                    setTypeFilter(\"all\");\n                  }}\n                >\n                  Reset\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Company Tree */}\n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <div className=\"flex items-center justify-center h-48\">\n                <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n              </div>\n            ) : filteredHierarchy.length === 0 ? (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-building text-gray-400 text-2xl\"></i>\n                  </div>\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna azienda trovata</h3>\n                  <p className=\"text-gray-500\">\n                    {safeCompanies.length === 0 ? \"Non ci sono aziende disponibili\" : \"Nessun risultato con i filtri selezionati\"}\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"space-y-4\">\n                {filteredHierarchy.map((company: any) => (\n                  <CompanyNode key={company.id} company={company} />\n                ))}\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n\n      {/* Create/Edit Company Dialog */}\n      <Dialog open={isCreateDialogOpen || isEditDialogOpen} onOpenChange={(open) => {\n        if (!open) {\n          setIsCreateDialogOpen(false);\n          setIsEditDialogOpen(false);\n          setFormData({ name: '', type: 'rivenditore', parentId: '', status: 'active', contactInfo: { email: '', phone: '', address: '' } });\n        }\n      }}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              {isEditDialogOpen ? `Modifica ${selectedCompany?.name}` : 'Nuova Azienda'}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitCompany} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Nome Azienda</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"type\">Tipo</Label>\n              <Select value={formData.type} onValueChange={(value) => setFormData({ ...formData, type: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"rivenditore\">Rivenditore</SelectItem>\n                  <SelectItem value=\"sottoazienda\">Sotto-azienda</SelectItem>\n                  <SelectItem value=\"agente\">Agente</SelectItem>\n                  <SelectItem value=\"cliente\">Cliente</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"parentId\">Azienda Madre (opzionale)</Label>\n              <Select \n                value={formData.parentId || \"none\"} \n                onValueChange={(value) => setFormData({ ...formData, parentId: value === \"none\" ? \"\" : value })}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleziona azienda madre\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Nessuna (azienda principale)</SelectItem>\n                  {(companies as any[]).map((company: any) => (\n                    <SelectItem key={company.id} value={company.id}>\n                      {company.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"email\">Email</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.contactInfo.email}\n                onChange={(e) => setFormData({ \n                  ...formData, \n                  contactInfo: { ...formData.contactInfo, email: e.target.value }\n                })}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"phone\">Telefono</Label>\n              <Input\n                id=\"phone\"\n                value={formData.contactInfo.phone}\n                onChange={(e) => setFormData({ \n                  ...formData, \n                  contactInfo: { ...formData.contactInfo, phone: e.target.value }\n                })}\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => {\n                  setIsCreateDialogOpen(false);\n                  setIsEditDialogOpen(false);\n                }}\n              >\n                Annulla\n              </Button>\n              <Button type=\"submit\" disabled={createCompanyMutation.isPending || updateCompanyMutation.isPending}>\n                {createCompanyMutation.isPending || updateCompanyMutation.isPending ? 'Salvando...' : \n                 isEditDialogOpen ? 'Aggiorna' : 'Crea'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create Agent Dialog */}\n      <Dialog open={isCreateAgentOpen} onOpenChange={setIsCreateAgentOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              Nuovo Agente per {selectedCompany?.name}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitAgent} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"agentName\">Nome Completo</Label>\n              <Input\n                id=\"agentName\"\n                value={agentFormData.name}\n                onChange={(e) => setAgentFormData({ ...agentFormData, name: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"agentEmail\">Email</Label>\n              <Input\n                id=\"agentEmail\"\n                type=\"email\"\n                value={agentFormData.email}\n                onChange={(e) => setAgentFormData({ ...agentFormData, email: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"agentPhone\">Telefono</Label>\n              <Input\n                id=\"agentPhone\"\n                value={agentFormData.phone}\n                onChange={(e) => setAgentFormData({ ...agentFormData, phone: e.target.value })}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"agentRole\">Ruolo</Label>\n              <Select value={agentFormData.role} onValueChange={(value) => setAgentFormData({ ...agentFormData, role: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"agente\">Agente</SelectItem>\n                  <SelectItem value=\"responsabile_vendite\">Responsabile Vendite</SelectItem>\n                  <SelectItem value=\"account_manager\">Account Manager</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"territory\">Territorio (opzionale)</Label>\n              <Input\n                id=\"territory\"\n                value={agentFormData.territory}\n                onChange={(e) => setAgentFormData({ ...agentFormData, territory: e.target.value })}\n                placeholder=\"es. Nord Italia, Lombardia, etc.\"\n              />\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateAgentOpen(false)}>\n                Annulla\n              </Button>\n              <Button type=\"submit\" disabled={createAgentMutation.isPending}>\n                {createAgentMutation.isPending ? 'Creando...' : 'Crea Agente'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Manage Users Dialog */}\n      <Dialog open={isManageUsersOpen} onOpenChange={setIsManageUsersOpen}>\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              Gestione Credenziali - {selectedCompany?.name}\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"text-sm text-gray-600 mb-4\">\n              Gestisci le credenziali di accesso degli utenti dell'azienda. \n              Puoi modificare username, password e ruoli.\n            </div>\n\n            {/* Users Table */}\n            <div className=\"border rounded-lg overflow-hidden\">\n              <div className=\"bg-gray-50 px-4 py-3 border-b\">\n                <h3 className=\"font-medium text-gray-900\">Utenti Azienda</h3>\n              </div>\n              <div className=\"divide-y\">\n                {(users as any[])\n                  .filter((user: any) => user.company === selectedCompany?.id)\n                  .map((user: any) => (\n                    <div key={user.id} className=\"p-4 flex items-center justify-between hover:bg-gray-50\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"flex-1\">\n                            <h4 className=\"font-medium text-gray-900\">{user.name}</h4>\n                            <p className=\"text-sm text-gray-600\">@{user.username}</p>\n                            <p className=\"text-sm text-gray-500\">{user.email}</p>\n                          </div>\n                          <div className=\"text-center\">\n                            <Badge className={user.role === 'superadmin' ? 'bg-red-100 text-red-800' :\n                                           user.role === 'rivenditore' ? 'bg-blue-100 text-blue-800' :\n                                           user.role === 'agente' ? 'bg-green-100 text-green-800' :\n                                           'bg-gray-100 text-gray-800'}>\n                              {user.role}\n                            </Badge>\n                          </div>\n                          <div className=\"text-center\">\n                            <Badge variant={user.status === 'active' ? 'default' : 'destructive'}>\n                              {user.status || 'active'}\n                            </Badge>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"ml-4\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => handleEditUser(user)}\n                        >\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Modifica\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n\n                {(users as any[]).filter((user: any) => user.company === selectedCompany?.id).length === 0 && (\n                  <div className=\"p-8 text-center text-gray-500\">\n                    <i className=\"fas fa-users text-2xl mb-2\"></i>\n                    <p>Nessun utente trovato per questa azienda</p>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"flex justify-end pt-4\">\n              <Button variant=\"outline\" onClick={() => setIsManageUsersOpen(false)}>\n                Chiudi\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit User Credentials Dialog */}\n      <Dialog open={isEditUserOpen} onOpenChange={setIsEditUserOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              Modifica Credenziali - {selectedUser?.name}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitEditUser} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"editUsername\">Username</Label>\n              <Input\n                id=\"editUsername\"\n                value={editUserFormData.username}\n                onChange={(e) => setEditUserFormData({ ...editUserFormData, username: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"editName\">Nome Completo</Label>\n              <Input\n                id=\"editName\"\n                value={editUserFormData.name}\n                onChange={(e) => setEditUserFormData({ ...editUserFormData, name: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"editEmail\">Email</Label>\n              <Input\n                id=\"editEmail\"\n                type=\"email\"\n                value={editUserFormData.email}\n                onChange={(e) => setEditUserFormData({ ...editUserFormData, email: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"editPassword\">Nuova Password (lascia vuoto per mantenere)</Label>\n              <Input\n                id=\"editPassword\"\n                type=\"password\"\n                value={editUserFormData.password}\n                onChange={(e) => setEditUserFormData({ ...editUserFormData, password: e.target.value })}\n                placeholder=\"Lascia vuoto per non modificare\"\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"editRole\">Ruolo</Label>\n              <Select value={editUserFormData.role} onValueChange={(value) => setEditUserFormData({ ...editUserFormData, role: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cliente\">Cliente</SelectItem>\n                  <SelectItem value=\"agente\">Agente</SelectItem>\n                  <SelectItem value=\"rivenditore\">Rivenditore</SelectItem>\n                  {user?.role === 'superadmin' && (\n                    <SelectItem value=\"admin\">Admin</SelectItem>\n                  )}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"editStatus\">Stato</Label>\n              <Select value={editUserFormData.status} onValueChange={(value) => setEditUserFormData({ ...editUserFormData, status: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"active\">Attivo</SelectItem>\n                  <SelectItem value=\"inactive\">Inattivo</SelectItem>\n                  <SelectItem value=\"suspended\">Sospeso</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditUserOpen(false)}>\n                Annulla\n              </Button>\n              <Button type=\"submit\" disabled={updateUserMutation.isPending}>\n                {updateUserMutation.isPending ? 'Salvando...' : 'Salva Modifiche'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Create User Dialog */}\n      <Dialog open={isCreateUserOpen} onOpenChange={setIsCreateUserOpen}>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>\n              Nuovo Utente per {selectedCompany?.name}\n            </DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleSubmitUser} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                value={userFormData.username}\n                onChange={(e) => setUserFormData({ ...userFormData, username: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"userName\">Nome Completo</Label>\n              <Input\n                id=\"userName\"\n                value={userFormData.name}\n                onChange={(e) => setUserFormData({ ...userFormData, name: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"userEmail\">Email</Label>\n              <Input\n                id=\"userEmail\"\n                type=\"email\"\n                value={userFormData.email}\n                onChange={(e) => setUserFormData({ ...userFormData, email: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={userFormData.password}\n                onChange={(e) => setUserFormData({ ...userFormData, password: e.target.value })}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"userRole\">Ruolo</Label>\n              <Select value={userFormData.role} onValueChange={(value) => setUserFormData({ ...userFormData, role: value })}>\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"cliente\">Cliente</SelectItem>\n                  <SelectItem value=\"agente\">Agente</SelectItem>\n                  <SelectItem value=\"rivenditore\">Rivenditore</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateUserOpen(false)}>\n                Annulla\n              </Button>\n              <Button type=\"submit\" disabled={createUserMutation.isPending}>\n                {createUserMutation.isPending ? 'Creando...' : 'Crea Utente'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":46565},"client/src/pages/dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport AlertPanel from \"@/components/alerts/alert-panel\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\n\nexport default function Dashboard() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { contentMargin } = useSidebar();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  // Fetch dashboard statistics\n  const { data: stats = {} as any, isLoading: statsLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n    enabled: !!user,\n  });\n\n  // Fetch recent activity data - filtered by user role and company\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user,\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n    enabled: !!user,\n  });\n\n  const { data: products = [] } = useQuery({\n    queryKey: ['/api/products'],\n    enabled: !!user,\n  });\n\n  const { data: licenses = [] } = useQuery({\n    queryKey: ['/api/licenses'],\n    enabled: !!user,\n  });\n\n  \n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Calculate enhanced statistics with safe arrays\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const safeProducts = Array.isArray(products) ? products : [];\n  const safeLicenses = Array.isArray(licenses) ? licenses : [];\n  \n  const activeCompanies = safeCompanies.filter(c => c.status === 'active').length;\n  const validatedClients = safeClients.filter(c => c.status === 'convalidato').length;\n  const pendingClients = safeClients.filter(c => c.status === 'in_attesa').length;\n  const recentLicenses = safeLicenses.filter(l => {\n    const createdDate = new Date(l.createdAt || l.created_at);\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n    return createdDate >= thirtyDaysAgo;\n  }).length;\n\n  const expiringLicenses = safeLicenses.filter(l => {\n    if (!l.expiryDate && !l.expiry_date && !l.expires_at) return false;\n    const expiryDate = new Date(l.expiryDate || l.expiry_date || l.expires_at);\n    const thirtyDaysFromNow = new Date();\n    thirtyDaysFromNow.setDate(thirtyDaysFromNow.getDate() + 30);\n    return expiryDate <= thirtyDaysFromNow && expiryDate > new Date();\n  }).length;\n\n  // Get actual counts from data\n  const totalLicenses = safeLicenses.length;\n  const activeLicenses = safeLicenses.filter(l => l.status === 'attiva').length;\n  const demoLicenses = safeLicenses.filter(l => l.status === 'demo' || l.license_type === 'trial').length;\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n      \n      <main className={`flex-1 ${contentMargin} bg-surface transition-all duration-300 ease-in-out`}>\n        <TopBar />\n        \n        <div className=\"p-6 space-y-6\">\n          {/* Welcome Header */}\n          <div className=\"bg-gradient-to-r from-blue-600 to-indigo-700 rounded-lg p-6 text-white\">\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <h1 className=\"text-2xl font-bold mb-2\">\n                  Benvenuto, {user.name}\n                </h1>\n                <p className=\"text-blue-100\">\n                  Panoramica generale del sistema di gestione licenze\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Primary Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Licenze Totali</p>\n                    <p className=\"text-3xl font-bold text-gray-900\">\n                      {statsLoading ? '...' : totalLicenses}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-key text-blue-600 text-xl\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <i className=\"fas fa-arrow-up text-green-500 mr-1\"></i>\n                  <span className=\"text-green-600 font-medium\">+{recentLicenses}</span>\n                  <span className=\"text-gray-500 ml-1\">negli ultimi 30 giorni</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Licenze Attive</p>\n                    <p className=\"text-3xl font-bold text-green-700\">\n                      {statsLoading ? '...' : activeLicenses}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-check-circle text-green-600 text-xl\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <i className=\"fas fa-exclamation-triangle text-orange-500 mr-1\"></i>\n                  <span className=\"text-orange-600 font-medium\">{expiringLicenses}</span>\n                  <span className=\"text-gray-500 ml-1\">in scadenza (30gg)</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Clienti Attivi</p>\n                    <p className=\"text-3xl font-bold text-indigo-700\">\n                      {validatedClients}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-indigo-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-users text-indigo-600 text-xl\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <i className=\"fas fa-clock text-yellow-500 mr-1\"></i>\n                  <span className=\"text-yellow-600 font-medium\">{pendingClients}</span>\n                  <span className=\"text-gray-500 ml-1\">in attesa validazione</span>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Aziende Partner</p>\n                    <p className=\"text-3xl font-bold text-purple-700\">\n                      {activeCompanies}\n                    </p>\n                  </div>\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-building text-purple-600 text-xl\"></i>\n                  </div>\n                </div>\n                <div className=\"mt-4 flex items-center text-sm\">\n                  <i className=\"fas fa-store text-blue-500 mr-1\"></i>\n                  <span className=\"text-blue-600 font-medium\">\n                    {safeCompanies.filter(c => c.type === 'rivenditore').length}\n                  </span>\n                  <span className=\"text-gray-500 ml-1\">rivenditori</span>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Detailed Analytics Grid */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* License Status Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-chart-pie text-blue-600 mr-2\"></i>\n                  Stato Licenze\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {[\n                    { status: 'attiva', label: 'Attive', color: 'bg-green-500', count: safeLicenses.filter(l => l.status === 'attiva').length },\n                    { status: 'demo', label: 'Demo/Trial', color: 'bg-blue-500', count: safeLicenses.filter(l => l.status === 'demo').length },\n                    { status: 'scaduta', label: 'Scadute', color: 'bg-red-500', count: safeLicenses.filter(l => l.status === 'scaduta').length },\n                    { status: 'in_attesa_convalida', label: 'In Attesa', color: 'bg-yellow-500', count: safeLicenses.filter(l => l.status === 'in_attesa_convalida').length },\n                    { status: 'sospesa', label: 'Sospese', color: 'bg-gray-500', count: safeLicenses.filter(l => l.status === 'sospesa').length }\n                  ].map(item => (\n                    <div key={item.status} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <div className={`w-3 h-3 rounded-full ${item.color} mr-3`}></div>\n                        <span className=\"text-sm text-gray-700\">{item.label}</span>\n                      </div>\n                      <Badge variant=\"outline\">{item.count}</Badge>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-4 pt-4 border-t\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => setLocation('/licenses')}\n                  >\n                    <i className=\"fas fa-external-link-alt mr-2\"></i>\n                    Vedi Tutte le Licenze\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Company Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <i className=\"fas fa-sitemap text-green-600 mr-2\"></i>\n                  Distribuzione Aziende\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {[\n                    { type: 'rivenditore', label: 'Rivenditori', icon: 'fa-store', count: safeCompanies.filter(c => c.type === 'rivenditore').length },\n                    { type: 'sottoazienda', label: 'Sotto-aziende', icon: 'fa-sitemap', count: safeCompanies.filter(c => c.type === 'sottoazienda').length },\n                    { type: 'agente', label: 'Agenti', icon: 'fa-user-tie', count: safeCompanies.filter(c => c.type === 'agente').length },\n                    { type: 'cliente', label: 'Clienti Corporate', icon: 'fa-user', count: safeCompanies.filter(c => c.type === 'cliente').length }\n                  ].map(item => (\n                    <div key={item.type} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center\">\n                        <i className={`fas ${item.icon} text-blue-600 mr-3`}></i>\n                        <span className=\"text-sm text-gray-700\">{item.label}</span>\n                      </div>\n                      <Badge variant=\"outline\">{item.count}</Badge>\n                    </div>\n                  ))}\n                </div>\n                <div className=\"mt-4 pt-4 border-t\">\n                  <Button \n                    variant=\"outline\" \n                    className=\"w-full\"\n                    onClick={() => setLocation('/companies')}\n                  >\n                    <i className=\"fas fa-external-link-alt mr-2\"></i>\n                    Gestisci Aziende\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Quick Actions & Alerts */}\n            <div className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center\">\n                    <i className=\"fas fa-bolt text-yellow-600 mr-2\"></i>\n                    Azioni Rapide\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => setLocation('/clients')}\n                  >\n                    <i className=\"fas fa-user-plus mr-2\"></i>\n                    Nuovo Cliente\n                  </Button>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => setLocation('/products')}\n                  >\n                    <i className=\"fas fa-box mr-2\"></i>\n                    Gestisci Prodotti\n                  </Button>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => setLocation('/companies')}\n                  >\n                    <i className=\"fas fa-building mr-2\"></i>\n                    Nuova Azienda\n                  </Button>\n                  \n                  <Button \n                    className=\"w-full justify-start\" \n                    variant=\"outline\"\n                    onClick={() => setLocation('/transactions')}\n                  >\n                    <i className=\"fas fa-chart-line mr-2\"></i>\n                    Report Vendite\n                  </Button>\n                </CardContent>\n              </Card>\n\n              <AlertPanel />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":14908},"client/src/pages/licenses.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport ExpiringLicensesList from \"@/components/license/expiring-licenses-list\";\nimport LicenseModal from \"@/components/license/license-modal\";\nimport { Search, Key, Plus, Filter, Calendar, CheckCircle, AlertTriangle, Clock, Settings, Edit2, Eye, X, RefreshCw, RotateCcw } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { format } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport { Textarea } from \"@/components/ui/textarea\";\n\ninterface License {\n  id: string;\n  activationKey: string;\n  licenseType: string;\n  maxUsers: number;\n  maxDevices: number;\n  price: string;\n  status: string;\n  activationDate: string;\n  expiryDate: string;\n  computerKey: string;\n  client: { name: string; company_id?: string; companyId?: string };\n  product: { name: string; version?: string };\n  notes?: string;\n  renewalEnabled?: boolean;\n  renewalPeriod?: string;\n  discount?: string;\n}\n\n// Define types for client and product for clarity\ninterface Client {\n  id: string;\n  name: string;\n  email: string;\n  companyId?: string;\n  isMultiSite: boolean;\n  isMultiUser: boolean;\n  contactInfo: {\n    phone: string;\n    company: string;\n  };\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  version?: string;\n  description?: string;\n  supportedLicenseTypes: string[];\n}\n\ninterface LicenseWithDetails extends License {\n  client: Client;\n  product: Product;\n}\n\n// Componente per la ricerca clienti con autocompletamento\ninterface ClientSearchInputProps {\n  clients: Client[];\n  companies: any[];\n  onClientSelect: (clientId: string) => void;\n}\n\nfunction ClientSearchInput({ clients, companies, onClientSelect }: ClientSearchInputProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n\n  // Safe arrays\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n  \n  // Funzione per ottenere il nome dell'azienda\n  const getCompanyName = (companyId: string) => {\n    const company = safeCompanies.find((c: any) => c.id === companyId);\n    return company ? company.name : 'N/A';\n  };\n\n  // Filtra i clienti in base al termine di ricerca\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const filteredClients = safeClients.filter((client: Client) => {\n    const searchLower = searchTerm.toLowerCase();\n    const clientMatch = client.name?.toLowerCase().includes(searchLower) || \n                       client.email?.toLowerCase().includes(searchLower);\n    const companyName = getCompanyName(client.companyId || client.company_id || '');\n    const companyMatch = companyName.toLowerCase().includes(searchLower);\n    \n    return clientMatch || companyMatch;\n  }).sort((a, b) => {\n    // Ordina prima per azienda, poi per nome cliente\n    const companyA = getCompanyName(a.companyId || a.company_id || '');\n    const companyB = getCompanyName(b.companyId || b.company_id || '');\n    \n    if (companyA !== companyB) {\n      return companyA.localeCompare(companyB);\n    }\n    return (a.name || '').localeCompare(b.name || '');\n  });\n\n  const handleClientSelect = (client: Client) => {\n    setSelectedClient(client);\n    setSearchTerm(`${client.name} - ${getCompanyName(client.companyId || client.company_id || '')}`);\n    setIsOpen(false);\n    onClientSelect(client.id);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n    setIsOpen(true);\n    if (!e.target.value) {\n      setSelectedClient(null);\n      onClientSelect('');\n    }\n  };\n\n  return (\n    <div className=\"relative client-search-container\">\n      <Input\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleInputChange}\n        onFocus={() => setIsOpen(true)}\n        placeholder=\"Cerca cliente o azienda...\"\n        className=\"w-full\"\n        autoComplete=\"off\"\n      />\n      \n      {isOpen && searchTerm && filteredClients.length > 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto client-search-dropdown\">\n          {filteredClients.slice(0, 20).map((client: Client) => {\n            const companyName = getCompanyName(client.companyId || client.company_id || '');\n            return (\n              <div\n                key={client.id}\n                onClick={() => handleClientSelect(client)}\n                className=\"px-3 py-2 cursor-pointer hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n              >\n                <div className=\"flex flex-col\">\n                  <div className=\"font-medium text-sm text-gray-900\">\n                    {client.name}\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    {client.email}\n                  </div>\n                  <div className=\"text-xs text-blue-600 font-medium\">\n                    <i className=\"fas fa-building mr-1\"></i>\n                    {companyName}\n                  </div>\n                </div>\n              </div>\n            );\n          })}\n          \n          {filteredClients.length > 20 && (\n            <div className=\"px-3 py-2 text-xs text-gray-500 text-center bg-gray-50\">\n              Visualizzati primi 20 risultati. Affina la ricerca per vedere di pi√π.\n            </div>\n          )}\n        </div>\n      )}\n      \n      {isOpen && searchTerm && filteredClients.length === 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg client-search-dropdown\">\n          <div className=\"px-3 py-2 text-sm text-gray-500 text-center\">\n            Nessun cliente trovato\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n\nexport default function LicensesPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n  const { contentMargin } = useSidebar();\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [isNewLicenseModalOpen, setIsNewLicenseModalOpen] = useState(false);\n  const [isNewClientModalOpen, setIsNewClientModalOpen] = useState(false);\n  const [isNewProductModalOpen, setIsNewProductModalOpen] = useState(false);\n  const [editingLicense, setEditingLicense] = useState<License | null>(null);\n  const [isLicenseModalOpen, setIsLicenseModalOpen] = useState(false);\n\n  // Gestisce il click esterno per chiudere i dropdown\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as Element;\n      if (!target.closest('.client-search-container')) {\n        // Chiudi tutti i dropdown aperti\n        const dropdowns = document.querySelectorAll('.client-search-dropdown');\n        dropdowns.forEach(dropdown => {\n          (dropdown as HTMLElement).style.display = 'none';\n        });\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  // New client form state\n  const [newClient, setNewClient] = useState({\n    name: '',\n    email: '',\n    companyId: '',\n    isMultiSite: false,\n    isMultiUser: true,\n    contactInfo: {\n      phone: '',\n      company: ''\n    }\n  });\n\n  // New product form state\n  const [newProduct, setNewProduct] = useState({\n    name: '',\n    version: '',\n    description: '',\n    supportedLicenseTypes: ['permanente'] as string[]\n  });\n\n  // Helper function for product license type toggle\n  const handleLicenseTypeToggle = (type: string) => {\n    setNewProduct(prev => ({\n      ...prev,\n      supportedLicenseTypes: prev.supportedLicenseTypes.includes(type)\n        ? prev.supportedLicenseTypes.filter(t => t !== type)\n        : [...prev.supportedLicenseTypes, type]\n    }));\n  };\n\n\n  // Always call useQuery hooks - they will be disabled when user is not available\n  const { data: clients = [] } = useQuery<Client[]>({\n    queryKey: ['/api/clients'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/clients', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch clients');\n      return response.json();\n    }\n  });\n\n  const { data: products = [] } = useQuery<Product[]>({\n    queryKey: ['/api/products'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/products', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch products');\n      return response.json();\n    }\n  });\n\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch companies');\n      return response.json();\n    }\n  });\n\n  const { data: licenses = [] } = useQuery<License[]>({\n    queryKey: ['/api/licenses'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n      const data = await response.json();\n\n      console.log(`Licenses API returned ${data.length} licenses for user ${user?.username}`);\n      \n\n      \n      return data;\n    }\n  });\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  // Clear React Query cache when user changes to prevent stale data\n  useEffect(() => {\n    if (user?.id) {\n      queryClient.invalidateQueries();\n    }\n  }, [user?.id]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Since the server already filters licenses by company hierarchy for admin users,\n  // we don't need complex client-side filtering. Just trust the server response.\n  console.log(`Licenses page: User ${user?.username} (${user?.role}) has ${licenses.length} licenses from server`);\n\n  // Safe arrays for main component\n  const safeLicensesMain = Array.isArray(licenses) ? licenses : [];\n  const safeClientsMain = Array.isArray(clients) ? clients : [];\n  const safeCompaniesMain = Array.isArray(companies) ? companies : [];\n  \n  const filteredLicenses = safeLicensesMain.filter((license: License) => {\n    const searchTermLower = searchTerm.toLowerCase();\n    const clientName = license.client?.name?.toLowerCase() || '';\n    const productName = license.product?.name?.toLowerCase() || '';\n\n    const searchMatch =\n      clientName.includes(searchTermLower) ||\n      productName.includes(searchTermLower) ||\n      license.activationKey?.toLowerCase().includes(searchTermLower);\n\n    const statusMatch = statusFilter === \"all\" || license.status === statusFilter;\n    const typeMatch = typeFilter === \"all\" || license.licenseType === typeFilter;\n\n    return searchMatch && statusMatch && typeMatch;\n  }).sort((a: License, b: License) => {\n    // Ordinamento per data di scadenza crescente\n    const aExpiryDate = a.expiryDate ? new Date(a.expiryDate).getTime() : Number.MAX_SAFE_INTEGER;\n    const bExpiryDate = b.expiryDate ? new Date(b.expiryDate).getTime() : Number.MAX_SAFE_INTEGER;\n    \n    // Le licenze permanenti (senza scadenza) vanno alla fine\n    if (!a.expiryDate && !b.expiryDate) {\n      // Se entrambe sono permanenti, ordina per data di attivazione\n      return new Date(a.activationDate || '').getTime() - new Date(b.activationDate || '').getTime();\n    }\n    \n    if (!a.expiryDate) return 1; // a va dopo b\n    if (!b.expiryDate) return -1; // b va dopo a\n    \n    // Ordinamento crescente per data di scadenza (prima le pi√π prossime alla scadenza)\n    return aExpiryDate - bExpiryDate;\n  });\n\n  const handleEditLicense = (license: License) => {\n    setEditingLicense(license);\n    setIsLicenseModalOpen(true);\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `${Math.round(amount)} crediti`;\n  };\n\n  const isExpired = (expiryDate: string) => {\n    return new Date(expiryDate) < new Date();\n  };\n\n  const isExpiringSoon = (expiryDate: string) => {\n    const expiry = new Date(expiryDate);\n    const today = new Date();\n    const diffTime = expiry.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays <= 30 && diffDays > 0;\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n\n      <main className={`flex-1 ${contentMargin} bg-surface transition-all duration-300 ease-in-out`}>\n        <TopBar />\n\n        <div className=\"p-3 md:p-4 space-y-4\">\n          {/* Header Compatto */}\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3\">\n            <div>\n              <h1 className=\"text-xl md:text-2xl font-bold text-gray-900 mb-1\">Gestione Licenze</h1>\n              <p className=\"text-sm text-gray-600\">Visualizza e gestisci tutte le licenze del sistema</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button \n                className=\"bg-primary hover:bg-blue-700\"\n                onClick={() => setIsNewLicenseModalOpen(true)}\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Nuova Licenza\n              </Button>\n            </div>\n          </div>\n\n          {/* Main Content Grid */}\n          <div className=\"space-y-4\">\n\n\n\n\n            {/* Licenses Grid */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-2\">\n                  <Key className=\"h-5 w-5\" />\n                  <h2 className=\"text-xl font-semibold\">Elenco Licenze</h2>\n                  <Badge variant=\"outline\" className=\"ml-2\">\n                    {filteredLicenses.length} licenze\n                  </Badge>\n                </div>\n              </div>\n\n              {/* Filtri Compatti */}\n            <Card className=\"mb-4\">\n              <CardContent className=\"p-3\">\n                <div className=\"flex flex-col md:flex-row gap-3\">\n                  <div className=\"flex-1\">\n                    <Input\n                      placeholder=\"Cerca per chiave, cliente, prodotto...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-full h-9\"\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Select value={statusFilter} onValueChange={setStatusFilter}>\n                      <SelectTrigger className=\"w-40 h-9\">\n                        <SelectValue placeholder=\"Tutti gli stati\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tutti gli stati</SelectItem>\n                        <SelectItem value=\"attiva\">Attiva</SelectItem>\n                        <SelectItem value=\"demo\">Demo</SelectItem>\n                        <SelectItem value=\"trial\">Trial</SelectItem>\n                        <SelectItem value=\"scaduta\">Scaduta</SelectItem>\n                        <SelectItem value=\"sospesa\">Sospesa</SelectItem>\n                        <SelectItem value=\"in_attesa_convalida\">In Attesa</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Select value={typeFilter} onValueChange={setTypeFilter}>\n                      <SelectTrigger className=\"w-40 h-9\">\n                        <SelectValue placeholder=\"Tutti i tipi\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n                        <SelectItem value=\"permanente\">Permanente</SelectItem>\n                        <SelectItem value=\"trial\">Trial</SelectItem>\n                        <SelectItem value=\"abbonamento_mensile\">Mensile</SelectItem>\n                        <SelectItem value=\"abbonamento_annuale\">Annuale</SelectItem>\n                      </SelectContent>\n                    </Select>\n\n                    <Button \n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => {\n                        setSearchTerm(\"\");\n                        setStatusFilter(\"all\");\n                        setTypeFilter(\"all\");\n                      }}\n                    >\n                      Reset\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Excel-like Table */}\n            {filteredLicenses.length === 0 ? (\n              <Card>\n                <CardContent className=\"p-8 text-center\">\n                  <Key className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Nessuna licenza trovata</h3>\n                  <p className=\"text-muted-foreground\">\n                    Non ci sono licenze che corrispondono ai criteri di ricerca.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"p-0\">\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse\">\n                      <thead>\n                        <tr className=\"border-b bg-muted/50\">\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Chiave Licenza</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Prodotto</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Cliente</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Tipo</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Stato</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Utenti/Dispositivi</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Prezzo</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Attivazione</th>\n                          <th className=\"text-left p-2 font-medium text-xs border-r\">Scadenza</th>\n                          <th className=\"text-left p-2 font-medium text-xs\">Azioni</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredLicenses.map((license: License, index: number) => (\n                          <tr key={license.id} className={`border-b hover:bg-muted/30 ${index % 2 === 0 ? 'bg-white' : 'bg-muted/10'}`}>\n                            <td className=\"p-2 border-r\">\n                              <div className=\"font-mono text-xs\">\n                                {license.activationKey}\n                              </div>\n                              {(() => {\n                                // Trova l'azienda del cliente\n                                const client = safeClientsMain.find((c: Client) => c.id === license.client?.id);\n                                const companyId = client?.companyId || client?.company_id;\n                                const company = safeCompaniesMain.find((comp: any) => comp.id === companyId);\n                                \n                                if (company) {\n                                  return (\n                                    <div className=\"text-xs text-gray-600 mt-0.5\">\n                                      <i className=\"fas fa-building mr-1\"></i>\n                                      {company.name}\n                                    </div>\n                                  );\n                                }\n                                return null;\n                              })()}\n                              {license.computerKey && (\n                                <div className=\"text-xs text-muted-foreground font-mono mt-0.5\">\n                                  {license.computerKey}\n                                </div>\n                              )}\n                              {license.notes && license.notes.includes('registrazione software') && (\n                                <div className=\"text-xs text-blue-600 mt-0.5\">\n                                  <i className=\"fas fa-desktop mr-1\"></i>\n                                  Da registrazione SW\n                                </div>\n                              )}\n                            </td>\n\n                            <td className=\"p-2 border-r\">\n                              <div className=\"font-medium text-xs\">\n                                {license.product?.name || 'N/A'}\n                              </div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                v{license.product?.version || ''}\n                              </div>\n                            </td>\n\n                            <td className=\"p-2 border-r\">\n                              <div className=\"font-medium text-xs\">\n                                {license.client?.name || 'N/A'}\n                              </div>\n                            </td>\n\n                            <td className=\"p-2 border-r\">\n                              <Badge variant=\"outline\" className=\"text-xs px-1 py-0\">\n                                {license.licenseType === 'permanente' ? 'Permanente' :\n                                 license.licenseType === 'abbonamento_mensile' ? 'Mensile' :\n                                 license.licenseType === 'abbonamento_annuale' ? 'Annuale' :\n                                 license.licenseType === 'trial' ? 'Trial' :\n                                 license.licenseType}\n                              </Badge>\n                            </td>\n\n                            <td className=\"p-2 border-r\">\n                              <Badge \n                                variant={\n                                  license.status === 'attiva' ? 'default' :\n                                  license.status === 'scaduta' ? 'destructive' :\n                                  license.status === 'sospesa' ? 'secondary' :\n                                  license.status === 'in_attesa_convalida' ? 'outline' :\n                                  'outline'\n                                }\n                                className=\"text-xs px-1 py-0\"\n                              >\n                                {license.status === 'attiva' ? 'Attiva' :\n                                 license.status === 'scaduta' ? 'Scaduta' :\n                                 license.status === 'sospesa' ? 'Sospesa' :\n                                 license.status === 'demo' ? 'Demo' :\n                                 license.status === 'trial' ? 'Trial' :\n                                 license.status === 'in_attesa_convalida' ? 'In Attesa' :\n                                 license.status}\n                              </Badge>\n                            </td>\n\n                            <td className=\"p-2 border-r text-xs\">\n                              <div>{license.maxUsers || '‚àû'} utenti</div>\n                              <div className=\"text-xs text-muted-foreground\">\n                                {license.maxDevices || '‚àû'} dispositivi\n                              </div>\n                            </td>\n\n                            <td className=\"p-2 border-r text-xs font-medium\">\n                              {formatCurrency(parseFloat(license.price || '0'))}\n                            </td>\n\n                            <td className=\"p-2 border-r text-xs\">\n                              {license.activationDate ? \n                                format(new Date(license.activationDate), 'dd/MM/yyyy', { locale: it }) : \n                                '-'\n                              }\n                            </td>\n\n                            <td className=\"p-2 border-r text-xs\">\n                              {license.expiryDate ? (\n                                <div className={`${\n                                  isExpired(license.expiryDate) ? 'text-red-600 font-bold' :\n                                  isExpiringSoon(license.expiryDate) ? 'text-orange-600 font-medium' :\n                                  'text-green-600'\n                                }`}>\n                                  {format(new Date(license.expiryDate), 'dd/MM/yyyy', { locale: it })}\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {(() => {\n                                      const expiry = new Date(license.expiryDate);\n                                      const today = new Date();\n                                      const diffTime = expiry.getTime() - today.getTime();\n                                      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                                      \n                                      if (diffDays < 0) return `Scaduta da ${Math.abs(diffDays)} giorni`;\n                                      if (diffDays === 0) return 'Scade oggi';\n                                      if (diffDays <= 30) return `Scade in ${diffDays} giorni`;\n                                      return `${diffDays} giorni rimanenti`;\n                                    })()}\n                                  </div>\n                                </div>\n                              ) : (\n                                license.licenseType === 'permanente' ? (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    Permanente\n                                  </Badge>\n                                ) : (\n                                  <span className=\"text-muted-foreground\">Data non impostata</span>\n                                )\n                              )}\n                            </td>\n\n                            <td className=\"p-2\">\n                              <div className=\"flex gap-1\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => handleEditLicense(license)}\n                                  className=\"h-8 w-8 p-0\"\n                                  title=\"Visualizza dettagli licenza\"\n                                >\n                                  <i className=\"fas fa-eye text-xs\"></i>\n                                </Button>\n                                {user.role === 'superadmin' && (\n                                  <Button\n                                    variant=\"ghost\"\n                                    size=\"sm\"\n                                    onClick={async () => {\n                                      const isClassified = license.notes && license.notes.includes('registrazione software');\n                                      const confirmMessage = isClassified \n                                        ? 'Questa √® una licenza classificata da registrazione software. Sei sicuro di voler cancellare questa licenza? Questa azione non pu√≤ essere annullata.'\n                                        : 'Sei sicuro di voler cancellare questa licenza? Questa azione non pu√≤ essere annullata.';\n\n                                      if (confirm(confirmMessage)) {\n                                        try {\n                                          const token = localStorage.getItem('token');\n                                          const response = await fetch(`/api/licenses/${license.id}`, {\n                                            method: 'DELETE',\n                                            headers: {\n                                              'Authorization': `Bearer ${token}`,\n                                              'Content-Type': 'application/json'\n                                            }\n                                          });\n\n                                          if (response.ok) {\n                                            // Invalida la cache e ricarica i dati\n                                            queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n                                            // Ricarica anche la pagina per essere sicuri\n                                            setTimeout(() => window.location.reload(), 500);\n                                          } else {\n                                            const errorData = await response.json().catch(() => ({}));\n                                            alert(`Errore nella cancellazione: ${errorData.message || 'Errore sconosciuto'}`);\n                                          }\n                                        } catch (error) {\n                                          console.error('Error deleting license:', error);\n                                          alert('Errore nella cancellazione della licenza');\n                                        }\n                                      }\n                                    }}\n                                    className=\"h-8 w-8 p-0 text-red-600\"\n                                    title={license.notes && license.notes.includes('registrazione software') ? \"Cancella licenza classificata (solo superadmin)\" : \"Cancella licenza\"}\n                                  >\n                                    <i className=\"fas fa-trash text-xs\"></i>\n                                  </Button>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n            </div>\n          </div>\n        </div>\n\n        {/* New License Modal with Activation */}\n        <Dialog open={isNewLicenseModalOpen} onOpenChange={setIsNewLicenseModalOpen}>\n          <DialogContent className=\"w-[95vw] max-w-[800px] max-h-[95vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <i className=\"fas fa-plus text-blue-500\"></i>\n                Nuova Licenza\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target as HTMLFormElement);\n\n              try {\n                const token = localStorage.getItem('token');\n                const response = await fetch('/api/licenses', {\n                  method: 'POST',\n                  headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify({\n                    clientId: formData.get('clientId'),\n                    productId: formData.get('productId'),\n                    renewalEnabled: formData.get('renewalEnabled') === 'on',\n                    renewalPeriod: formData.get('renewalPeriod') || null,\n                    activeModules: ['core'],\n                    activationKey: formData.get('activationKey') || undefined,\n                    computerKey: formData.get('computerKey') || undefined,\n                    paymentMethod: formData.get('paymentMethod') || 'wallet'\n                    // Note: licenseType, maxUsers, maxDevices, price, discount now inherited from product\n                  })\n                });\n\n                if (response.ok) {\n                  setIsNewLicenseModalOpen(false);\n                  queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n                  // Also invalidate wallet queries to refresh balances\n                  queryClient.invalidateQueries({ queryKey: ['/api/wallets'] });\n                  queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n                  alert('Licenza creata con successo!');\n                  // Reset form\n                  const form = e.target as HTMLFormElement;\n                  form.reset();\n                } else {\n                  const errorData = await response.json().catch(() => ({}));\n                  console.error('Failed to create license:', errorData);\n                  \n                  // Show specific error message for wallet insufficient funds\n                  if (errorData.message && errorData.message.includes('Saldo wallet insufficiente')) {\n                    alert(`‚ùå ${errorData.message}`);\n                  } else if (errorData.message) {\n                    alert(`Errore: ${errorData.message}`);\n                  } else {\n                    alert('Errore nella creazione della licenza');\n                  }\n                }\n              } catch (error) {\n                console.error('Error creating license:', error);\n                alert('Errore nella creazione della licenza');\n              }\n            }}>\n              <div className=\"space-y-6\">\n                {/* Informazioni Base Licenza */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">\n                    <i className=\"fas fa-info-circle mr-2\"></i>\n                    Informazioni Base\n                  </h3>\n\n              {/* Prima Riga: Cliente e Prodotto */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-6\">\n                <div>\n                  <Label htmlFor=\"clientId\" className=\"text-sm font-medium\">Cliente *</Label>\n                  <ClientSearchInput \n                    clients={clients} \n                    companies={companies}\n                    onClientSelect={(clientId) => {\n                      const hiddenInput = document.querySelector('input[name=\"clientId\"]') as HTMLInputElement;\n                      if (hiddenInput) hiddenInput.value = clientId;\n                    }}\n                  />\n                  <input type=\"hidden\" name=\"clientId\" required />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"productId\" className=\"text-sm font-medium\">Prodotto *</Label>\n                  <Select name=\"productId\" required>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleziona prodotto\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {products.map((product: Product) => (\n                        <SelectItem key={product.id} value={product.id}>\n                          {product.name} {product.version && `v${product.version}`}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* NEW ARCHITECTURE: Pricing inherited from product */}\n              <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg\">\n                <h4 className=\"font-semibold text-blue-800 dark:text-blue-200 mb-2\">\n                  <i className=\"fas fa-info-circle mr-2\"></i>\n                  Configurazione Prezzi e Limiti\n                </h4>\n                <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  ‚úÖ La licenza erediter√† automaticamente tutte le configurazioni (prezzo, sconto, tipo licenza, limiti utenti/dispositivi) dal prodotto selezionato.\n                  <br />\n                  üîí Solo i superadmin possono modificare i prezzi e i limiti a livello di prodotto.\n                </p>\n              </div>\n\n              {/* Metodo di Pagamento */}\n              <div className=\"space-y-3\">\n                <h4 className=\"text-md font-semibold text-gray-900 border-b pb-2\">\n                  <i className=\"fas fa-credit-card mr-2\"></i>\n                  Metodo di Pagamento\n                </h4>\n                <div>\n                  <Label htmlFor=\"paymentMethod\" className=\"text-sm font-medium\">Metodo *</Label>\n                  <Select name=\"paymentMethod\" defaultValue=\"manuale\">\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleziona metodo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"manuale\">üí≥ Pagamento Manuale</SelectItem>\n                      <SelectItem value=\"wallet\">üè¶ Crediti Wallet Aziendale</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    Wallet: pagamento automatico con crediti aziendali | Manuale: richiede pagamento esterno\n                  </p>\n                </div>\n              </div>\n\n              {/* Rinnovo Automatico */}\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"renewal-enabled\"\n                    name=\"renewalEnabled\"\n                    className=\"h-4 w-4 text-blue-600 rounded border-gray-300\"\n                  />\n                  <Label htmlFor=\"renewal-enabled\" className=\"text-sm font-medium\">Attiva rinnovo automatico</Label>\n                </div>\n              </div>\n                </div>\n\n                {/* Sezione Attivazione */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-gray-900 border-b pb-2\">\n                    <i className=\"fas fa-key mr-2\"></i>\n                    Attivazione Licenza (Opzionale)\n                  </h3>\n\n                  <div className=\"bg-blue-50 p-4 rounded-lg\">\n                    <p className=\"text-sm text-blue-800 mb-3\">\n                      <i className=\"fas fa-info-circle mr-1\"></i>\n                      Genera automaticamente la chiave di attivazione o inseriscila manualmente. \n                      I dispositivi verranno autorizzati separatamente tramite le registrazioni software.\n                    </p>\n\n                    <div className=\"space-y-3\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"activation-key\">Chiave di Attivazione</Label>\n                        <div className=\"flex space-x-2\">\n                          <Input\n                            id=\"activation-key\"\n                            name=\"activationKey\"\n                            placeholder=\"Genera o inserisci la chiave di attivazione\"\n                            className=\"font-mono text-sm flex-1\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              const key = `LIC-${Date.now().toString().slice(-8)}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\n                              const activationKeyInput = document.getElementById('activation-key') as HTMLInputElement;\n                              if (activationKeyInput) activationKeyInput.value = key;\n                            }}\n                            size=\"sm\"\n                            className=\"px-3 shrink-0\"\n                            title=\"Genera chiave di attivazione\"\n                          >\n                            <i className=\"fas fa-key text-xs\"></i>\n                          </Button>\n                        </div>\n                      </div>\n\n                      <div className=\"bg-blue-50 border border-blue-200 p-3 rounded-lg\">\n                        <p className=\"text-sm text-blue-800\">\n                          <i className=\"fas fa-info-circle mr-2\"></i>\n                          <strong>Nota:</strong> Le chiavi computer sono ora gestite a livello di dispositivo. \n                          Usa la sezione \"Registrazioni Software\" per autorizzare dispositivi specifici.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Attivazione Offline */}\n                  <div className=\"bg-gray-50 p-3 rounded-lg\">\n                    <h4 className=\"text-sm font-medium text-gray-900 mb-2\">\n                      <i className=\"fas fa-download mr-1\"></i>\n                      Attivazione Offline\n                    </h4>\n                    <p className=\"text-xs text-gray-600 mb-3\">\n                      Se il cliente non ha connessione internet, pu√≤ utilizzare l'attivazione offline.\n                    </p>\n                    <Button \n                      type=\"button\" \n                      variant=\"outline\" \n                      size=\"sm\" \n                      className=\"w-full text-xs\"\n                      onClick={() => alert('Funzionalit√† di attivazione offline sar√† implementata')}\n                    >\n                      <i className=\"fas fa-download mr-2\"></i>\n                      Scarica File Offline\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Pulsanti Azione */}\n                <div className=\"flex flex-col md:flex-row justify-end space-y-3 md:space-y-0 md:space-x-3 pt-4 border-t\">\n                  <Button \n                    type=\"button\"\n                    variant=\"outline\" \n                    onClick={() => {\n                      setIsNewLicenseModalOpen(false);\n                      // Reset form\n                      const form = document.querySelector('form') as HTMLFormElement;\n                      if (form) form.reset();\n                    }}\n                    className=\"w-full md:w-auto order-2 md:order-1\"\n                  >\n                    <i className=\"fas fa-times mr-2\"></i>\n                    Annulla\n                  </Button>\n                  <Button type=\"submit\" className=\"bg-primary hover:bg-blue-700 w-full md:w-auto order-1 md:order-2\">\n                    <i className=\"fas fa-save mr-2\"></i>\n                    Crea Licenza\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* New Client Modal */}\n        <Dialog open={isNewClientModalOpen} onOpenChange={setIsNewClientModalOpen}>\n          <DialogContent className=\"w-[95vw] max-w-[600px] max-h-[95vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <i className=\"fas fa-user-plus text-green-500\"></i>\n                Nuovo Cliente\n              </DialogTitle>\n              <DialogDescription>Inserisci i dati del nuovo cliente.</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              try {\n                const token = localStorage.getItem('token');\n                const response = await fetch('/api/clients', {\n                  method: 'POST',\n                  headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(newClient)\n                });\n\n                if (response.ok) {\n                  const createdClient = await response.json();\n                  setIsNewClientModalOpen(false);\n                  queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n                  alert(`Cliente \"${createdClient.name}\" creato con successo!`);\n                  // Reset form state\n                  setNewClient({\n                    name: '',\n                    email: '',\n                    companyId: '',\n                    isMultiSite: false,\n                    isMultiUser: true,\n                    contactInfo: { phone: '', company: '' }\n                  });\n                  // Re-open the new license modal\n                  setIsNewLicenseModalOpen(true);\n                } else {\n                  const errorData = await response.json().catch(() => ({}));\n                  alert(`Errore nella creazione del cliente: ${errorData.message || 'Errore sconosciuto'}`);\n                }\n              } catch (error) {\n                console.error('Error creating client:', error);\n                alert('Errore nella creazione del cliente');\n              }\n            }}>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-name\">Nome Cliente *</Label>\n                    <Input\n                      id=\"client-name\"\n                      value={newClient.name}\n                      onChange={(e) => setNewClient({ ...newClient, name: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-email\">Email Cliente *</Label>\n                    <Input\n                      id=\"client-email\"\n                      type=\"email\"\n                      value={newClient.email}\n                      onChange={(e) => setNewClient({ ...newClient, email: e.target.value })}\n                      required\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-company\">Azienda Cliente</Label>\n                    <Select\n                      name=\"companyId\"\n                      value={newClient.companyId}\n                      onValueChange={(value) => setNewClient({ ...newClient, companyId: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Seleziona azienda\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"\">Nessuna Azienda</SelectItem>\n                        {safeCompaniesMain.map((company: any) => (\n                          <SelectItem key={company.id} value={company.id}>\n                            {company.name}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-phone\">Telefono</Label>\n                    <Input\n                      id=\"client-phone\"\n                      value={newClient.contactInfo.phone}\n                      onChange={(e) => setNewClient({ ...newClient, contactInfo: { ...newClient.contactInfo, phone: e.target.value } })}\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"client-company-contact\">Nome Azienda Contatto</Label>\n                    <Input\n                      id=\"client-company-contact\"\n                      value={newClient.contactInfo.company}\n                      onChange={(e) => setNewClient({ ...newClient, contactInfo: { ...newClient.contactInfo, company: e.target.value } })}\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-2 pt-6\">\n                    <input\n                      id=\"client-multi-site\"\n                      type=\"checkbox\"\n                      checked={newClient.isMultiSite}\n                      onChange={(e) => setNewClient({ ...newClient, isMultiSite: e.target.checked })}\n                      className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                    />\n                    <label htmlFor=\"client-multi-site\" className=\"text-sm font-medium text-gray-700\">\n                      Multi-Site\n                    </label>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <input\n                    id=\"client-multi-user\"\n                    type=\"checkbox\"\n                    checked={newClient.isMultiUser}\n                    onChange={(e) => setNewClient({ ...newClient, isMultiUser: e.target.checked })}\n                    className=\"h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                  />\n                  <label htmlFor=\"client-multi-user\" className=\"text-sm font-medium text-gray-700\">\n                    Multi-User\n                  </label>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-3 mt-6 pt-4 border-t\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewClientModalOpen(false)}>\n                  Annulla\n                </Button>\n                <Button type=\"submit\" className=\"bg-primary hover:bg-green-700\">\n                  Crea Cliente\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* New Product Modal */}\n        <Dialog open={isNewProductModalOpen} onOpenChange={setIsNewProductModalOpen}>\n          <DialogContent className=\"w-[95vw] max-w-[600px] max-h-[95vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle className=\"flex items-center gap-2\">\n                <i className=\"fas fa-box-open text-purple-500\"></i>\n                Nuovo Prodotto\n              </DialogTitle>\n              <DialogDescription>Inserisci i dati del nuovo prodotto.</DialogDescription>\n            </DialogHeader>\n            <form onSubmit={async (e) => {\n              e.preventDefault();\n              try {\n                const token = localStorage.getItem('token');\n                const response = await fetch('/api/products', {\n                  method: 'POST',\n                  headers: {\n                    'Authorization': `Bearer ${token}`,\n                    'Content-Type': 'application/json'\n                  },\n                  body: JSON.stringify(newProduct)\n                });\n\n                if (response.ok) {\n                  const createdProduct = await response.json();\n                  setIsNewProductModalOpen(false);\n                  queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n                  alert(`Prodotto \"${createdProduct.name}\" creato con successo!`);\n                  // Reset form state\n                  setNewProduct({\n                    name: '',\n                    version: '',\n                    description: '',\n                    supportedLicenseTypes: ['permanente']\n                  });\n                  // Re-open the new license modal\n                  setIsNewLicenseModalOpen(true);\n                } else {\n                  const errorData = await response.json().catch(() => ({}));\n                  alert(`Errore nella creazione del prodotto: ${errorData.message || 'Errore sconosciuto'}`);\n                }\n              } catch (error) {\n                console.error('Error creating product:', error);\n                alert('Errore nella creazione del prodotto');\n              }\n            }}>\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"product-name\">Nome Prodotto *</Label>\n                    <Input\n                      id=\"product-name\"\n                      value={newProduct.name}\n                      onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}\n                      required\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"product-version\">Versione</Label>\n                    <Input\n                      id=\"product-version\"\n                      value={newProduct.version}\n                      onChange={(e) => setNewProduct({ ...newProduct, version: e.target.value })}\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"product-description\">Descrizione</Label>\n                  <Textarea\n                    id=\"product-description\"\n                    value={newProduct.description}\n                    onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}\n                    rows={3}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Tipi di Licenza Supportati *</Label>\n                  <div className=\"flex flex-wrap gap-2\">\n                    <Button\n                      type=\"button\"\n                      variant={newProduct.supportedLicenseTypes.includes('permanente') ? 'default' : 'outline'}\n                      onClick={() => handleLicenseTypeToggle('permanente')}\n                      className=\"h-8 px-3 text-sm\"\n                    >\n                      Permanente\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={newProduct.supportedLicenseTypes.includes('trial') ? 'default' : 'outline'}\n                      onClick={() => handleLicenseTypeToggle('trial')}\n                      className=\"h-8 px-3 text-sm\"\n                    >\n                      Trial\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={newProduct.supportedLicenseTypes.includes('abbonamento_mensile') ? 'default' : 'outline'}\n                      onClick={() => handleLicenseTypeToggle('abbonamento_mensile')}\n                      className=\"h-8 px-3 text-sm\"\n                    >\n                      Mensile\n                    </Button>\n                    <Button\n                      type=\"button\"\n                      variant={newProduct.supportedLicenseTypes.includes('abbonamento_annuale') ? 'default' : 'outline'}\n                      onClick={() => handleLicenseTypeToggle('abbonamento_annuale')}\n                      className=\"h-8 px-3 text-sm\"\n                    >\n                      Annuale\n                    </Button>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-3 mt-6 pt-4 border-t\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsNewProductModalOpen(false)}>\n                  Annulla\n                </Button>\n                <Button type=\"submit\" className=\"bg-primary hover:bg-purple-700\">\n                  Crea Prodotto\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n\n        {/* License Details Modal */}\n        <LicenseModal\n          license={editingLicense}\n          isOpen={isLicenseModalOpen}\n          onClose={() => {\n            setIsLicenseModalOpen(false);\n            setEditingLicense(null);\n          }}\n        />\n\n      </main>\n    </div>\n  );\n}","size_bytes":56808},"client/src/pages/login.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Login() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { login, user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (user) {\n      setLocation('/');\n    }\n  }, [user, setLocation]);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await login(username, password);\n      toast({\n        title: \"Login effettuato\",\n        description: \"Benvenuto nella piattaforma LMP\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Errore di login\",\n        description: error.message || \"Credenziali non valide\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-surface p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-key text-white text-xl\"></i>\n          </div>\n          <CardTitle className=\"text-2xl font-bold text-gray-900\">\n            LM Platform\n          </CardTitle>\n          <p className=\"text-sm text-gray-600\">\n            Accedi alla piattaforma di gestione licenze\n          </p>\n        </CardHeader>\n\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Inserisci username\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Inserisci password\"\n                required\n                disabled={isLoading}\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-primary hover:bg-blue-700\"\n              disabled={isLoading}\n            >\n              {isLoading ? (\n                <div className=\"flex items-center space-x-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                  <span>Accesso in corso...</span>\n                </div>\n              ) : (\n                \"Accedi\"\n              )}\n            </Button>\n          </form>\n\n          <div className=\"mt-6 p-4 bg-gray-50 rounded-lg\">\n            <p className=\"text-sm text-gray-600 mb-2\">Credenziali di test:</p>\n            <p className=\"text-sm\"><strong>Username:</strong> admin</p>\n            <p className=\"text-sm\"><strong>Password:</strong> admin123</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":3724},"client/src/pages/logs.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nexport default function LogsPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { contentMargin } = useSidebar();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Mock data for demo\n  const logs = [\n    {\n      id: '1',\n      userId: user.id,\n      userName: user.name,\n      action: 'LOGIN',\n      resource: '/api/auth/login',\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n      createdAt: new Date().toISOString(),\n      level: 'info'\n    },\n    {\n      id: '2',\n      userId: user.id,\n      userName: user.name,\n      action: 'VIEW_LICENSES',\n      resource: '/api/licenses',\n      ipAddress: '192.168.1.100',\n      userAgent: 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',\n      createdAt: new Date(Date.now() - 300000).toISOString(),\n      level: 'info'\n    },\n    {\n      id: '3',\n      userId: 'system',\n      userName: 'Sistema',\n      action: 'LICENSE_ACTIVATION',\n      resource: '/api/licenze/attiva',\n      ipAddress: '87.106.247.35',\n      userAgent: 'QLM Client v2.0',\n      createdAt: new Date(Date.now() - 600000).toISOString(),\n      level: 'success'\n    },\n    {\n      id: '4',\n      userId: 'unknown',\n      userName: 'Utente Sconosciuto',\n      action: 'FAILED_LOGIN',\n      resource: '/api/auth/login',\n      ipAddress: '203.0.113.42',\n      userAgent: 'Mozilla/5.0',\n      createdAt: new Date(Date.now() - 900000).toISOString(),\n      level: 'warning'\n    }\n  ];\n\n  const getLevelBadge = (level: string) => {\n    const variants = {\n      'success': 'default',\n      'info': 'secondary',\n      'warning': 'outline',\n      'error': 'destructive'\n    } as const;\n\n    const colors = {\n      'success': 'text-green-600',\n      'info': 'text-blue-600',\n      'warning': 'text-yellow-600',\n      'error': 'text-red-600'\n    } as const;\n\n    return (\n      <Badge variant={variants[level as keyof typeof variants] || 'outline'}>\n        <i className={`fas fa-circle text-xs mr-1 ${colors[level as keyof typeof colors]}`}></i>\n        {level.toUpperCase()}\n      </Badge>\n    );\n  };\n\n  const getActionIcon = (action: string) => {\n    const icons = {\n      'LOGIN': 'fas fa-sign-in-alt text-green-600',\n      'LOGOUT': 'fas fa-sign-out-alt text-gray-600',\n      'VIEW_LICENSES': 'fas fa-eye text-blue-600',\n      'LICENSE_ACTIVATION': 'fas fa-key text-primary',\n      'FAILED_LOGIN': 'fas fa-times text-red-600',\n      'CREATE_LICENSE': 'fas fa-plus text-green-600',\n      'DELETE_LICENSE': 'fas fa-trash text-red-600'\n    } as const;\n\n    return icons[action as keyof typeof icons] || 'fas fa-info-circle text-gray-600';\n  };\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n      \n      <main className={`flex-1 ${contentMargin} bg-surface transition-all duration-300 ease-in-out`}>\n        <TopBar />\n        \n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Log Attivit√†</h1>\n              <p className=\"text-gray-600\">Monitora tutte le attivit√† e gli accessi del sistema</p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <Select defaultValue=\"all\">\n                <SelectTrigger className=\"w-32\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tutti</SelectItem>\n                  <SelectItem value=\"info\">Info</SelectItem>\n                  <SelectItem value=\"success\">Successo</SelectItem>\n                  <SelectItem value=\"warning\">Avviso</SelectItem>\n                  <SelectItem value=\"error\">Errore</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Esporta\n              </Button>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Eventi Oggi</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">127</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-chart-line text-blue-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Accessi</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">43</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-sign-in-alt text-green-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Avvisi</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">8</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-exclamation-triangle text-yellow-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-gray-600\">Errori</p>\n                    <p className=\"text-2xl font-bold text-gray-900\">2</p>\n                  </div>\n                  <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                    <i className=\"fas fa-times-circle text-red-600\"></i>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Registro Eventi Recenti</CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gray-50\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Livello</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Azione</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Utente</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Risorsa</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">IP</th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Data/Ora</th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white divide-y divide-gray-200\">\n                    {logs.map((log) => (\n                      <tr key={log.id} className=\"hover:bg-gray-50\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          {getLevelBadge(log.level)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center space-x-2\">\n                            <i className={`${getActionIcon(log.action)} text-sm`}></i>\n                            <span className=\"text-sm font-medium text-gray-900\">{log.action}</span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                          {log.userName}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono\">\n                          {log.resource}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500 font-mono\">\n                          {log.ipAddress}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {new Date(log.createdAt).toLocaleString('it-IT')}\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </main>\n    </div>\n  );\n}","size_bytes":10130},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/products.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport Sidebar from \"@/components/layout/sidebar\";\nimport TopBar from \"@/components/layout/topbar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\n\n// License type mapping\nconst licenseTypeLabels: { [key: string]: string } = {\n  'permanente': 'Permanente',\n  'trial': 'Trial',\n  'abbonamento': 'Abbonamento',\n  'abbonamento_mensile': 'Mensile',\n  'abbonamento_annuale': 'Annuale'\n};\n\nconst licenseTypeColors: { [key: string]: string } = {\n  'permanente': 'bg-green-100 text-green-800',\n  'trial': 'bg-yellow-100 text-yellow-800',\n  'abbonamento': 'bg-blue-100 text-blue-800',\n  'abbonamento_mensile': 'bg-blue-100 text-blue-800',\n  'abbonamento_annuale': 'bg-purple-100 text-purple-800'\n};\n\nexport default function ProductsPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { contentMargin } = useSidebar();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isCategoryModalOpen, setIsCategoryModalOpen] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [newProduct, setNewProduct] = useState({\n    name: '',\n    version: '',\n    description: '',\n    categoryId: '',\n    licenseType: '',\n    price: 0,\n    discount: 0,\n    maxUsers: 1,\n    maxDevices: 1,\n    trialDays: 30\n  });\n  const [editProduct, setEditProduct] = useState({\n    name: '',\n    version: '',\n    description: '',\n    categoryId: '',\n    licenseType: '',\n    price: 0,\n    discount: 0,\n    maxUsers: 1,\n    maxDevices: 1,\n    trialDays: 30\n  });\n  const [newCategory, setNewCategory] = useState({\n    name: '',\n    description: '',\n    color: '#3B82F6',\n    companyId: null\n  });\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [licenseTypeFilter, setLicenseTypeFilter] = useState(\"all\");\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: ['/api/products'],\n    enabled: !!user,\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch('/api/products', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Products data received:', data);\n      return data;\n    }\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery({\n    queryKey: ['/api/categories'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/categories', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch categories');\n      }\n      return response.json();\n    }\n  });\n\n  // Fetch companies (for superadmin category creation)\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user && user.role === 'superadmin',\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch companies');\n      }\n      return response.json();\n    }\n  });\n\n  // Fetch licenses\n  const { data: licenses = [] } = useQuery({\n    queryKey: ['/api/licenses'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch licenses');\n      }\n      return response.json();\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n    refetchOnWindowFocus: true // Refresh when window gains focus\n  });\n\n\n  // Function to get license count for a product\n  const getProductLicenseCount = (product: any) => {\n    // Count licenses for this specific product ID\n    const productLicenses = licenses.filter(license => \n      license.product?.id === product.id || \n      license.productId === product.id ||\n      license.product?.name === product.name\n    );\n    return productLicenses.length;\n  };\n\n  const createProductMutation = useMutation({\n    mutationFn: async (productData: typeof newProduct) => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch('/api/products', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(productData)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create product');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsCreateModalOpen(false);\n      setNewProduct({\n        name: '',\n        version: '',\n        description: '',\n        categoryId: '',\n        licenseType: '',\n        price: 0,\n        discount: 0,\n        maxUsers: 1,\n        maxDevices: 1,\n        trialDays: 30\n      });\n      toast({\n        title: \"Prodotto creato\",\n        description: \"Il prodotto √® stato creato con successo.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore nella creazione del prodotto\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const updateProductMutation = useMutation({\n    mutationFn: async ({ id, productData }: { id: string, productData: typeof editProduct }) => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      console.log('Updating product with data:', productData);\n\n      const response = await fetch(`/api/products/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(productData)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('Update product error:', errorData);\n        throw new Error(errorData.message || 'Failed to update product');\n      }\n\n      const result = await response.json();\n      console.log('Update product result:', result);\n      return result;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n      setIsEditModalOpen(false);\n      setSelectedProduct(null);\n      toast({\n        title: \"Prodotto aggiornato\",\n        description: \"Il prodotto √® stato aggiornato con successo.\",\n      });\n    },\n    onError: (error: any) => {\n      console.error('Update mutation error:', error);\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore nell'aggiornamento del prodotto\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (categoryData: typeof newCategory) => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch('/api/categories', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify(categoryData)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to create category');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/categories'] });\n      setIsCategoryModalOpen(false);\n      setNewCategory({\n        name: '',\n        description: '',\n        color: '#3B82F6',\n        companyId: null\n      });\n      toast({\n        title: \"Categoria creata\",\n        description: \"La categoria √® stata creata con successo.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore nella creazione della categoria\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Filter products based on search and license type\n  const filteredProducts = products.filter((product: any) => {\n    const matchesSearch = searchTerm === \"\" || \n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.version?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.description?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesLicenseType = licenseTypeFilter === \"all\" || \n      (product.licenseType === licenseTypeFilter);\n\n    return matchesSearch && matchesLicenseType;\n  });\n\n  const handleCreateSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createProductMutation.mutate(newProduct);\n  };\n\n  const handleEditSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (selectedProduct) {\n      updateProductMutation.mutate({ \n        id: selectedProduct.id, \n        productData: editProduct \n      });\n    }\n  };\n\n  const handleCreateCategory = (e: React.FormEvent) => {\n    e.preventDefault();\n    createCategoryMutation.mutate(newCategory);\n  };\n\n\n\n  if (loading) {\n    return <div className=\"flex justify-center items-center min-h-screen\">Caricamento...</div>;\n  }\n\n  if (!user) {\n    setLocation('/login');\n    return null;\n  }\n\n  return (\n    <>\n      <Sidebar />\n      <TopBar />\n      <div className={`p-6 ${contentMargin}`}>\n      <div className=\"flex flex-col md:flex-flex-row justify-between items-start md:items-center mb-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Gestione Prodotti</h1>\n          <p className=\"text-gray-600\">Gestisci i prodotti software e le loro configurazioni</p>\n        </div>\n\n        {user.role === 'superadmin' && (\n          <div className=\"flex gap-2\">\n            <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n              <DialogTrigger asChild>\n                <Button className=\"bg-primary hover:bg-blue-700\">\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Nuovo Prodotto\n                </Button>\n              </DialogTrigger>\n            </Dialog>\n\n            <Dialog open={isCategoryModalOpen} onOpenChange={setIsCategoryModalOpen}>\n              <DialogTrigger asChild>\n                <Button variant=\"outline\" className=\"border-primary text-primary hover:bg-primary hover:text-white\">\n                  <i className=\"fas fa-tag mr-2\"></i>\n                  Nuova Categoria\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-md\">\n                <DialogHeader>\n                  <DialogTitle>Crea Nuova Categoria</DialogTitle>\n                  <DialogDescription>\n                    Aggiungi una nuova categoria per organizzare i prodotti\n                  </DialogDescription>\n                </DialogHeader>\n                <form onSubmit={handleCreateCategory} className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"category-name\">Nome Categoria *</Label>\n                    <Input\n                      id=\"category-name\"\n                      value={newCategory.name}\n                      onChange={(e) => setNewCategory({ ...newCategory, name: e.target.value })}\n                      placeholder=\"es. Software di Gestione\"\n                      required\n                    />\n                  </div>\n\n                  <div>\n                    <Label htmlFor=\"category-description\">Descrizione</Label>\n                    <Textarea\n                      id=\"category-description\"\n                      value={newCategory.description}\n                      onChange={(e) => setNewCategory({ ...newCategory, description: e.target.value })}\n                      placeholder=\"Descrizione della categoria...\"\n                      rows={3}\n                    />\n                  </div>\n\n                  {user.role === 'superadmin' && (\n                    <div>\n                      <Label htmlFor=\"category-company\">Azienda (opzionale)</Label>\n                      <Select \n                        value={newCategory.companyId || \"global\"} \n                        onValueChange={(value) => setNewCategory({ ...newCategory, companyId: value === \"global\" ? null : value })}\n                      >\n                        <SelectTrigger>\n                          <SelectValue placeholder=\"Seleziona azienda\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"global\">üåê Categoria Globale</SelectItem>\n                          {companies.map((company: any) => (\n                            <SelectItem key={company.id} value={company.id}>\n                              {company.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  )}\n\n                  <div>\n                    <Label htmlFor=\"category-color\">Colore</Label>\n                    <div className=\"flex items-center gap-2\">\n                      <Input\n                        id=\"category-color\"\n                        type=\"color\"\n                        value={newCategory.color}\n                        onChange={(e) => setNewCategory({ ...newCategory, color: e.target.value })}\n                        className=\"w-16 h-10 p-1 border rounded\"\n                      />\n                      <span className=\"text-sm text-gray-500\">{newCategory.color}</span>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end space-x-2 pt-4\">\n                    <Button type=\"button\" variant=\"outline\" onClick={() => setIsCategoryModalOpen(false)}>\n                      Annulla\n                    </Button>\n                    <Button type=\"submit\" disabled={createCategoryMutation.isPending}>\n                      {createCategoryMutation.isPending ? 'Creazione...' : 'Crea Categoria'}\n                    </Button>\n                  </div>\n                </form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        )}\n      </div>\n\n      {/* Create Product Modal */}\n      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Crea Nuovo Prodotto</DialogTitle>\n            <DialogDescription>\n              Inserisci i dettagli del nuovo prodotto software\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleCreateSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Nome Prodotto *</Label>\n              <Input\n                id=\"name\"\n                value={newProduct.name}\n                onChange={(e) => setNewProduct({ ...newProduct, name: e.target.value })}\n                placeholder=\"es. AutoCAD Professional\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"version\">Versione *</Label>\n              <Input\n                id=\"version\"\n                value={newProduct.version}\n                onChange={(e) => setNewProduct({ ...newProduct, version: e.target.value })}\n                placeholder=\"es. 2024.1\"\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"description\">Descrizione</Label>\n              <Textarea\n                id=\"description\"\n                value={newProduct.description}\n                onChange={(e) => setNewProduct({ ...newProduct, description: e.target.value })}\n                placeholder=\"Descrizione del prodotto...\"\n                rows={3}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"category\">Categoria</Label>\n              <Select value={newProduct.categoryId || \"none\"} onValueChange={(value) => setNewProduct({ ...newProduct, categoryId: value === \"none\" ? \"\" : value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleziona categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Nessuna categoria</SelectItem>\n                  {categories.map((category: any) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: category.color }}\n                        ></div>\n                        {category.name}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"licenseType\">Tipo di Licenza *</Label>\n              <Select value={newProduct.licenseType} onValueChange={(value) => setNewProduct({ ...newProduct, licenseType: value })}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleziona tipo licenza\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"permanente\">Permanente</SelectItem>\n                  <SelectItem value=\"trial\">Trial/Demo</SelectItem>\n                  <SelectItem value=\"abbonamento_mensile\">Abbonamento Mensile</SelectItem>\n                  <SelectItem value=\"abbonamento_annuale\">Abbonamento Annuale</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* NEW: Product-Level Pricing Configuration */}\n            <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg space-y-4\">\n              <h4 className=\"font-semibold text-blue-800 dark:text-blue-200\">Configurazione Crediti e Limiti</h4>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"price\">Costo in Crediti *</Label>\n                  <Input\n                    id=\"price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={newProduct.price || ''}\n                    onChange={(e) => setNewProduct({ ...newProduct, price: parseFloat(e.target.value) || 0 })}\n                    placeholder=\"0.00\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"discount\">Sconto Crediti</Label>\n                  <Input\n                    id=\"discount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={newProduct.discount || ''}\n                    onChange={(e) => setNewProduct({ ...newProduct, discount: parseFloat(e.target.value) || 0 })}\n                    placeholder=\"0.00\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"maxUsers\">Max Utenti *</Label>\n                  <Input\n                    id=\"maxUsers\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={newProduct.maxUsers || 1}\n                    onChange={(e) => setNewProduct({ ...newProduct, maxUsers: parseInt(e.target.value) || 1 })}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"maxDevices\">Max Dispositivi *</Label>\n                  <Input\n                    id=\"maxDevices\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={newProduct.maxDevices || 1}\n                    onChange={(e) => setNewProduct({ ...newProduct, maxDevices: parseInt(e.target.value) || 1 })}\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"trialDays\">Giorni Trial</Label>\n                  <Input\n                    id=\"trialDays\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={newProduct.trialDays || 30}\n                    onChange={(e) => setNewProduct({ ...newProduct, trialDays: parseInt(e.target.value) || 30 })}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateModalOpen(false)}>\n                Annulla\n              </Button>\n              <Button type=\"submit\" disabled={createProductMutation.isPending}>\n                {createProductMutation.isPending ? 'Creazione...' : 'Crea Prodotto'}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Search and Filter Section */}\n      <Card className=\"mb-6\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex flex-col md:flex-row gap-4 items-start md:items-center justify-between\">\n            <CardTitle>Prodotti ({filteredProducts.length} di {products.length})</CardTitle>\n\n            <div className=\"flex flex-col md:flex-row gap-2 w-full md:w-auto\">\n              <Input\n                placeholder=\"Cerca per nome, versione o descrizione...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"md:w-80\"\n              />\n\n              <Select value={licenseTypeFilter} onValueChange={setLicenseTypeFilter}>\n                <SelectTrigger className=\"md:w-48\">\n                  <SelectValue placeholder=\"Tipo licenza\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n                  <SelectItem value=\"permanente\">Permanente</SelectItem>\n                  <SelectItem value=\"trial\">Trial</SelectItem>\n                  <SelectItem value=\"abbonamento\">Abbonamento</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n      </Card>\n\n      {/* Products Table */}\n      <Card>\n        <CardContent className=\"p-0\">\n          <div className=\"overflow-x-auto\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50\">\n                  <TableHead className=\"font-semibold\">Prodotto</TableHead>\n                  <TableHead className=\"font-semibold\">Versione</TableHead>\n                  <TableHead className=\"font-semibold\">Categoria</TableHead>\n                  <TableHead className=\"font-semibold\">Descrizione</TableHead>\n                  <TableHead className=\"font-semibold\">Tipi Licenza</TableHead>\n                  <TableHead className=\"font-semibold text-center\">Licenze</TableHead>\n                  <TableHead className=\"font-semibold text-center\">Azioni</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse w-2/3\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/3\"></div></TableCell>\n                      <TableCell><div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredProducts.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-12\">\n                      {products.length === 0 ? (\n                        <div>\n                          <p className=\"text-gray-500 mb-4\">Nessun prodotto trovato</p>\n                          <p className=\"text-sm text-gray-400\">Crea il primo prodotto per iniziare</p>\n                        </div>\n                      ) : (\n                        <div>\n                          <p className=\"text-gray-500 mb-4\">Nessun prodotto trovato con i filtri selezionati</p>\n                          <Button \n                            variant=\"outline\"\n                            onClick={() => {\n                              setSearchTerm(\"\");\n                              setLicenseTypeFilter(\"all\");\n                            }}\n                          >\n                            Rimuovi filtri\n                          </Button>\n                        </div>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredProducts.map((product: any) => {\n                    const licenseCount = getProductLicenseCount(product);\n\n                    return (\n                      <TableRow key={product.id} className=\"hover:bg-gray-50\">\n                        <TableCell className=\"font-medium\">\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-primary bg-opacity-10 rounded-lg flex items-center justify-center\">\n                              <i className=\"fas fa-cube text-primary text-sm\"></i>\n                            </div>\n                            <span className=\"font-semibold\">{product.name}</span>\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <Badge variant=\"outline\" className=\"font-mono\">\n                            {product.version}\n                          </Badge>\n                        </TableCell>\n\n                        <TableCell>\n                          {(() => {\n\n\n                            // Check if product has a category\n                            const hasCategory = product.category && product.category.name;\n                            const categoryId = product.categoryId || product.category_id;\n\n                            if (hasCategory) {\n                              return (\n                                <div className=\"flex items-center gap-2\">\n                                  <div \n                                    className=\"w-3 h-3 rounded-full\" \n                                    style={{ backgroundColor: product.category.color || '#3B82F6' }}\n                                  ></div>\n                                  <div className=\"flex flex-col\">\n                                    <span className=\"text-sm font-medium\">{product.category.name}</span>\n                                    {product.category.companyId ? (\n                                      <span className=\"text-xs text-gray-500\">\n                                        {companies.find(c => c.id === product.category.companyId)?.name || 'Azienda specifica'}\n                                      </span>\n                                    ) : (\n                                      <span className=\"text-xs text-blue-600\">üåê Globale</span>\n                                    )}\n                                  </div>\n                                </div>\n                              );\n                            } else if (categoryId) {\n                              // Product has categoryId but no category object - try to find it in categories\n                              const matchingCategory = categories.find(cat => cat.id === categoryId);\n                              if (matchingCategory) {\n                                return (\n                                  <div className=\"flex items-center gap-2\">\n                                    <div \n                                      className=\"w-3 h-3 rounded-full\" \n                                      style={{ backgroundColor: matchingCategory.color || '#3B82F6' }}\n                                    ></div>\n                                    <div className=\"flex flex-col\">\n                                      <span className=\"text-sm font-medium\">{matchingCategory.name}</span>\n                                      {matchingCategory.companyId ? (\n                                        <span className=\"text-xs text-gray-500\">\n                                          {companies.find(c => c.id === matchingCategory.companyId)?.name || 'Azienda specifica'}\n                                        </span>\n                                      ) : (\n                                        <span className=\"text-xs text-blue-600\">üåê Globale</span>\n                                      )}\n                                    </div>\n                                  </div>\n                                );\n                              } else {\n                                return <span className=\"text-orange-500 italic text-sm\">Categoria non trovata</span>;\n                              }\n                            } else {\n                              return <span className=\"text-gray-400 italic text-sm\">Nessuna categoria</span>;\n                            }\n                          })()}\n                        </TableCell>\n\n                        <TableCell className=\"max-w-xs\">\n                          <div className=\"truncate\" title={product.description || ''}>\n                            {product.description || (\n                              <span className=\"text-gray-400 italic\">Nessuna descrizione</span>\n                            )}\n                          </div>\n                        </TableCell>\n\n                        <TableCell>\n                          <Badge \n                            className={`text-xs ${licenseTypeColors[product.licenseType] || 'bg-gray-100 text-gray-800'}`}\n                          >\n                            {licenseTypeLabels[product.licenseType] || product.licenseType || 'Non definito'}\n                          </Badge>\n                        </TableCell>\n\n                        <TableCell className=\"text-center\">\n                          <Badge variant={licenseCount > 0 ? \"default\" : \"secondary\"}>\n                            {licenseCount}\n                          </Badge>\n                        </TableCell>\n\n                        <TableCell>\n                          <div className=\"flex justify-center space-x-1\">\n                            {(user.role === 'superadmin' || user.role === 'admin') && (\n                              <>\n                                {/* View/Edit button - view only for admin, edit for superadmin */}\n                                <Button \n                                  variant=\"ghost\" \n                                  size=\"sm\"\n                                  onClick={() => {\n                                    console.log('Opening edit modal for product:', product);\n                                    console.log('Product categoryId:', product.categoryId);\n                                    console.log('Product category_id:', product.category_id);\n                                    setEditProduct({\n                                      name: product.name,\n                                      version: product.version,\n                                      description: product.description || '',\n                                      categoryId: product.categoryId || product.category_id || '',\n                                      licenseType: product.licenseType || product.license_type,\n                                      price: product.price || 0,\n                                      discount: product.discount || 0,\n                                      maxUsers: product.maxUsers || product.max_users || 1,\n                                      maxDevices: product.maxDevices || product.max_devices || 1,\n                                      trialDays: product.trialDays || product.trial_days || 30\n                                    });\n                                    setSelectedProduct(product);\n                                    setIsEditModalOpen(true);\n                                  }}\n                                  className=\"text-blue-600 hover:text-blue-800\"\n                                  title={user.role === 'superadmin' ? \"Modifica prodotto\" : \"Visualizza dettagli prodotto\"}\n                                >\n                                  <i className={`fas ${user.role === 'superadmin' ? 'fa-edit' : 'fa-eye'} text-sm`}></i>\n                                </Button>\n\n                                {/* Delete button - only for superadmin */}\n                                {user.role === 'superadmin' && (\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    className=\"text-red-600 hover:text-red-800\"\n                                    onClick={async () => {\n                                      if (confirm(`Sei sicuro di voler eliminare il prodotto \"${product.name}\"?`)) {\n                                        try {\n                                          const token = localStorage.getItem('token');\n                                          const response = await fetch(`/api/products/${product.id}`, {\n                                            method: 'DELETE',\n                                            headers: {\n                                              'Authorization': `Bearer ${token}`\n                                            }\n                                          });\n\n                                          if (response.ok) {\n                                            queryClient.invalidateQueries({ queryKey: ['/api/products'] });\n                                            toast({\n                                              title: \"Prodotto eliminato\",\n                                              description: \"Il prodotto √® stato eliminato con successo.\",\n                                            });\n                                          } else {\n                                            const error = await response.json();\n                                            toast({\n                                              title: \"Errore\",\n                                              description: `Errore nell'eliminazione: ${error.message}`,\n                                              variant: \"destructive\",\n                                            });\n                                          }\n                                        } catch (error) {\n                                          console.error('Error deleting product:', error);\n                                          toast({\n                                            title: \"Errore\",\n                                            description: \"Errore di connessione durante l'eliminazione del prodotto\",\n                                            variant: \"destructive\",\n                                          });\n                                        }\n                                      }\n                                    }}\n                                    title=\"Elimina prodotto\"\n                                  >\n                                    <i className=\"fas fa-trash text-sm\"></i>\n                                  </Button>\n                                )}\n                              </>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Edit Product Modal */}\n      <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}>\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {user.role === 'superadmin' ? 'Modifica Prodotto' : 'Dettagli Prodotto'}\n            </DialogTitle>\n            <DialogDescription>\n              {user.role === 'superadmin' \n                ? 'Modifica i dettagli del prodotto selezionato' \n                : 'Visualizza i dettagli del prodotto selezionato'}\n            </DialogDescription>\n          </DialogHeader>\n          <form onSubmit={handleEditSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"edit-name\">Nome Prodotto *</Label>\n              <Input\n                id=\"edit-name\"\n                value={editProduct.name}\n                onChange={(e) => setEditProduct({ ...editProduct, name: e.target.value })}\n                placeholder=\"es. AutoCAD Professional\"\n                required\n                disabled={user.role !== 'superadmin'}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-version\">Versione *</Label>\n              <Input\n                id=\"edit-version\"\n                value={editProduct.version}\n                onChange={(e) => setEditProduct({ ...editProduct, version: e.target.value })}\n                placeholder=\"es. 2024.1\"\n                required\n                disabled={user.role !== 'superadmin'}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-description\">Descrizione</Label>\n              <Textarea\n                id=\"edit-description\"\n                value={editProduct.description}\n                onChange={(e) => setEditProduct({ ...editProduct, description: e.target.value })}\n                placeholder=\"Descrizione del prodotto...\"\n                rows={3}\n                disabled={user.role !== 'superadmin'}\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-category\">Categoria</Label>\n              <Select \n                value={editProduct.categoryId || \"none\"} \n                onValueChange={(value) => setEditProduct({ ...editProduct, categoryId: value === \"none\" ? \"\" : value })}\n                disabled={user.role !== 'superadmin'}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleziona categoria\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">Nessuna categoria</SelectItem>\n                  {categories.map((category: any) => (\n                    <SelectItem key={category.id} value={category.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <div \n                          className=\"w-3 h-3 rounded-full\" \n                          style={{ backgroundColor: category.color }}\n                        ></div>\n                        {category.name}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"edit-licenseType\">Tipo di Licenza *</Label>\n              <Select \n                value={editProduct.licenseType} \n                onValueChange={(value) => setEditProduct({ ...editProduct, licenseType: value })}\n                disabled={user.role !== 'superadmin'}\n              >\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Seleziona tipo licenza\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"permanente\">Permanente</SelectItem>\n                  <SelectItem value=\"trial\">Trial/Demo</SelectItem>\n                  <SelectItem value=\"abbonamento_mensile\">Abbonamento Mensile</SelectItem>\n                  <SelectItem value=\"abbonamento_annuale\">Abbonamento Annuale</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n\n\n            {/* NEW: Product-Level Pricing Configuration for Edit */}\n            <div className=\"bg-blue-50 dark:bg-blue-950 p-4 rounded-lg space-y-4\">\n              <h4 className=\"font-semibold text-blue-800 dark:text-blue-200\">Configurazione Crediti e Limiti</h4>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-price\">Costo in Crediti *</Label>\n                  <Input\n                    id=\"edit-price\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={editProduct.price || ''}\n                    onChange={(e) => setEditProduct({ ...editProduct, price: parseFloat(e.target.value) || 0 })}\n                    placeholder=\"0.00\"\n                    required\n                    disabled={user.role !== 'superadmin'}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-discount\">Sconto Crediti</Label>\n                  <Input\n                    id=\"edit-discount\"\n                    type=\"number\"\n                    step=\"0.01\"\n                    min=\"0\"\n                    value={editProduct.discount || ''}\n                    onChange={(e) => setEditProduct({ ...editProduct, discount: parseFloat(e.target.value) || 0 })}\n                    placeholder=\"0.00\"\n                    disabled={user.role !== 'superadmin'}\n                  />\n                </div>\n              </div>\n\n\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-maxUsers\">Max Utenti *</Label>\n                  <Input\n                    id=\"edit-maxUsers\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={editProduct.maxUsers || 1}\n                    onChange={(e) => setEditProduct({ ...editProduct, maxUsers: parseInt(e.target.value) || 1 })}\n                    required\n                    disabled={user.role !== 'superadmin'}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-maxDevices\">Max Dispositivi *</Label>\n                  <Input\n                    id=\"edit-maxDevices\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={editProduct.maxDevices || 1}\n                    onChange={(e) => setEditProduct({ ...editProduct, maxDevices: parseInt(e.target.value) || 1 })}\n                    required\n                    disabled={user.role !== 'superadmin'}\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"edit-trialDays\">Giorni Trial</Label>\n                  <Input\n                    id=\"edit-trialDays\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={editProduct.trialDays || 30}\n                    onChange={(e) => setEditProduct({ ...editProduct, trialDays: parseInt(e.target.value) || 30 })}\n                    disabled={user.role !== 'superadmin'}\n                  />\n                </div>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button type=\"button\" variant=\"outline\" onClick={() => setIsEditModalOpen(false)}>\n                {user.role === 'superadmin' ? 'Annulla' : 'Chiudi'}\n              </Button>\n              {user.role === 'superadmin' && (\n                <Button type=\"submit\" disabled={updateProductMutation.isPending}>\n                  {updateProductMutation.isPending ? 'Aggiornamento...' : 'Aggiorna Prodotto'}\n                </Button>\n              )}\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </>\n  );\n}","size_bytes":45918},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { useLocation } from 'wouter';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useSidebar } from '@/contexts/SidebarContext';\nimport TopBar from '@/components/layout/topbar';\nimport Sidebar from '@/components/layout/sidebar';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Separator } from '@/components/ui/separator';\nimport { Badge } from '@/components/ui/badge';\nimport { Switch } from '@/components/ui/switch';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/api';\nimport { \n  Settings as SettingsIcon, \n  CreditCard, \n  Users, \n  Shield, \n  Bell,\n  Database,\n  Eye,\n  EyeOff,\n  Check,\n  X\n} from 'lucide-react';\n\nfunction SettingsContent() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [stripePublicKey, setStripePublicKey] = useState('');\n  const [stripeSecretKey, setStripeSecretKey] = useState('');\n  const [showSecretKey, setShowSecretKey] = useState(false);\n  const [isStripeConfigured, setIsStripeConfigured] = useState(false);\n  const [autoRenewalEnabled, setAutoRenewalEnabled] = useState(true);\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [maintenanceMode, setMaintenanceMode] = useState(false);\n\n  // Verifica configurazione Stripe al caricamento\n  useEffect(() => {\n    checkStripeConfiguration();\n  }, []);\n\n  const checkStripeConfiguration = async () => {\n    try {\n      // PRIMA: Controlla le configurazioni salvate nel database\n      const response = await apiRequest('GET', '/api/stripe/config');\n      const result = await response.json();\n      \n      if (result.success && result.configured) {\n        // Carica le configurazioni dal database\n        console.log('‚úÖ Chiavi Stripe caricate dal database');\n        setStripePublicKey(result.publicKey || '');\n        setStripeSecretKey(result.secretKey || '');\n        setIsStripeConfigured(true);\n        console.log('Chiave pubblica:', result.publicKey?.substring(0, 15) + '...');\n        console.log('Chiave segreta:', result.secretKey?.substring(0, 15) + '...');\n        return;\n      }\n      \n      // FALLBACK: Controlla le variabili d'ambiente di Replit\n      const publicKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;\n      \n      // Verifica che la chiave pubblica sia effettivamente una chiave pubblica (pk_test_ o pk_live_)\n      if (publicKey && (publicKey.startsWith('pk_test_') || publicKey.startsWith('pk_live_'))) {\n        setStripePublicKey(publicKey);\n        setIsStripeConfigured(true);\n      } else if (publicKey) {\n        // Se c'√® una chiave ma non √® pubblica, probabilmente √® stata configurata male\n        console.error('‚ùå PROBLEMA SECRETS REPLIT: VITE_STRIPE_PUBLIC_KEY contiene la chiave segreta invece della pubblica!');\n        console.error('Valore attuale:', publicKey.substring(0, 20) + '...');\n        console.error('üîß SOLUZIONE: Vai su Secrets nel menu laterale di Replit e modifica VITE_STRIPE_PUBLIC_KEY');\n        console.error('Devi inserire la PUBLISHABLE KEY che inizia con pk_test_ (NON la Secret Key sk_test_)');\n        console.error('Dashboard Stripe: https://dashboard.stripe.com/apikeys');\n        setIsStripeConfigured(false);\n      }\n    } catch (error) {\n      console.error('Errore controllo configurazione Stripe:', error);\n    }\n  };\n\n  const testStripeConnection = async () => {\n    try {\n      const response = await fetch('/api/stripe/test', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        }\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Connessione Stripe\",\n          description: \"Connessione con Stripe testata con successo!\",\n        });\n      } else {\n        toast({\n          title: \"Errore Stripe\",\n          description: \"Errore nella connessione con Stripe. Verifica le chiavi.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Errore di connessione\",\n        description: \"Impossibile testare la connessione Stripe.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const saveStripeConfiguration = async () => {\n    try {\n      // Validazione locale prima dell'invio\n      if (!stripePublicKey.startsWith('pk_test_') && !stripePublicKey.startsWith('pk_live_')) {\n        toast({\n          title: \"Errore Chiave Pubblica\",\n          description: \"La chiave pubblica deve iniziare con pk_test_ o pk_live_\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      if (!stripeSecretKey.startsWith('sk_test_') && !stripeSecretKey.startsWith('sk_live_')) {\n        toast({\n          title: \"Errore Chiave Segreta\",\n          description: \"La chiave segreta deve iniziare con sk_test_ o sk_live_\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const response = await apiRequest('POST', '/api/stripe/config', {\n        publicKey: stripePublicKey,\n        secretKey: stripeSecretKey\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        toast({\n          title: \"Configurazione Stripe salvata\",\n          description: \"Le chiavi Stripe sono state salvate con successo. Riavvia l'applicazione per applicare le modifiche.\",\n        });\n        \n        // Aggiorna la configurazione visualizzata con i valori corretti\n        setIsStripeConfigured(true);\n        \n        // Mantieni i valori nei campi dopo il salvataggio per conferma\n        console.log('‚úÖ Chiavi Stripe salvate correttamente');\n        console.log('Chiave pubblica:', stripePublicKey.substring(0, 15) + '...');\n        console.log('Chiave segreta:', stripeSecretKey.substring(0, 15) + '...');\n        \n      } else {\n        const errorData = await response.json();\n        toast({\n          title: \"Errore salvataggio Stripe\",\n          description: errorData.message || \"Errore nel salvataggio delle chiavi Stripe.\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Errore di connessione\",\n        description: error.message || \"Impossibile salvare la configurazione Stripe.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const saveSystemSettings = async () => {\n    try {\n      const settings = {\n        autoRenewalEnabled,\n        emailNotifications,\n        maintenanceMode\n      };\n\n      // Qui implementeremo l'endpoint per salvare le impostazioni\n      toast({\n        title: \"Impostazioni salvate\",\n        description: \"Le impostazioni di sistema sono state aggiornate.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Errore\",\n        description: \"Errore nel salvataggio delle impostazioni.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (user?.role !== 'superadmin') {\n    return (\n      <div className=\"p-6\">\n        <Card>\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <Shield className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Accesso Limitato</h3>\n              <p className=\"text-gray-600\">\n                Solo i superadmin possono accedere alle impostazioni di sistema.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center gap-3\">\n        <SettingsIcon className=\"h-8 w-8 text-blue-600\" />\n        <div>\n          <h1 className=\"text-2xl font-bold\">Impostazioni Sistema</h1>\n          <p className=\"text-gray-600\">Configura le impostazioni globali della piattaforma</p>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"stripe\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"stripe\" className=\"flex items-center gap-2\">\n            <CreditCard className=\"h-4 w-4\" />\n            Stripe\n          </TabsTrigger>\n          <TabsTrigger value=\"system\" className=\"flex items-center gap-2\">\n            <Database className=\"h-4 w-4\" />\n            Sistema\n          </TabsTrigger>\n          <TabsTrigger value=\"notifications\" className=\"flex items-center gap-2\">\n            <Bell className=\"h-4 w-4\" />\n            Notifiche\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"flex items-center gap-2\">\n            <Users className=\"h-4 w-4\" />\n            Utenti\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Configurazione Stripe */}\n        <TabsContent value=\"stripe\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <CreditCard className=\"h-5 w-5\" />\n                Configurazione Stripe\n                {isStripeConfigured ? (\n                  <Badge variant=\"secondary\" className=\"text-green-600 bg-green-50\">\n                    <Check className=\"h-3 w-3 mr-1\" />\n                    Configurato\n                  </Badge>\n                ) : (\n                  <Badge variant=\"secondary\" className=\"text-red-600 bg-red-50\">\n                    <X className=\"h-3 w-3 mr-1\" />\n                    Non configurato\n                  </Badge>\n                )}\n              </CardTitle>\n              <CardDescription>\n                Configura le chiavi API Stripe per abilitare i pagamenti nel sistema wallet\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stripe-public\">Chiave Pubblica Stripe</Label>\n                <Input\n                  id=\"stripe-public\"\n                  value={stripePublicKey}\n                  onChange={(e) => setStripePublicKey(e.target.value)}\n                  placeholder=\"pk_test_...\"\n                  className=\"font-mono text-sm\"\n                />\n                <p className=\"text-xs text-gray-500\">\n                  La chiave pubblica √® sicura da mostrare nel frontend\n                </p>\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"stripe-secret\">Chiave Segreta Stripe</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"stripe-secret\"\n                    type={showSecretKey ? \"text\" : \"password\"}\n                    value={stripeSecretKey}\n                    onChange={(e) => setStripeSecretKey(e.target.value)}\n                    placeholder=\"sk_test_...\"\n                    className=\"font-mono text-sm pr-10\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 h-6 w-6 p-0\"\n                    onClick={() => setShowSecretKey(!showSecretKey)}\n                  >\n                    {showSecretKey ? <EyeOff className=\"h-3 w-3\" /> : <Eye className=\"h-3 w-3\" />}\n                  </Button>\n                </div>\n                <p className=\"text-xs text-red-500\">\n                  ‚ö†Ô∏è Mantieni questa chiave segreta e sicura\n                </p>\n              </div>\n\n              <Separator />\n\n              <div className=\"flex gap-2\">\n                <Button onClick={testStripeConnection} variant=\"outline\">\n                  Testa Connessione\n                </Button>\n                <Button onClick={saveStripeConfiguration}>\n                  Salva Configurazione\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Impostazioni Sistema */}\n        <TabsContent value=\"system\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Database className=\"h-5 w-5\" />\n                Impostazioni Sistema\n              </CardTitle>\n              <CardDescription>\n                Configura le impostazioni globali del sistema di gestione licenze\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-sm font-medium\">Rinnovo Automatico Licenze</Label>\n                  <p className=\"text-xs text-gray-500\">\n                    Abilita il rinnovo automatico giornaliero delle licenze in scadenza\n                  </p>\n                </div>\n                <Switch\n                  checked={autoRenewalEnabled}\n                  onCheckedChange={setAutoRenewalEnabled}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-sm font-medium\">Modalit√† Manutenzione</Label>\n                  <p className=\"text-xs text-gray-500\">\n                    Disabilita temporaneamente l'accesso al sistema per manutenzione\n                  </p>\n                </div>\n                <Switch\n                  checked={maintenanceMode}\n                  onCheckedChange={setMaintenanceMode}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-4\">\n                <Label className=\"text-sm font-medium\">Statistiche Sistema</Label>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">10</div>\n                    <div className=\"text-xs text-blue-600\">Aziende</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-green-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">8</div>\n                    <div className=\"text-xs text-green-600\">Clienti</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-purple-600\">14</div>\n                    <div className=\"text-xs text-purple-600\">Licenze</div>\n                  </div>\n                  <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-orange-600\">2070</div>\n                    <div className=\"text-xs text-orange-600\">Crediti Totali</div>\n                  </div>\n                </div>\n              </div>\n\n              <Separator />\n\n              <Button onClick={saveSystemSettings} className=\"w-full\">\n                Salva Impostazioni Sistema\n              </Button>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifiche */}\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Bell className=\"h-5 w-5\" />\n                Notifiche\n              </CardTitle>\n              <CardDescription>\n                Configura le notifiche email e di sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-0.5\">\n                  <Label className=\"text-sm font-medium\">Notifiche Email</Label>\n                  <p className=\"text-xs text-gray-500\">\n                    Invia notifiche email per eventi importanti del sistema\n                  </p>\n                </div>\n                <Switch\n                  checked={emailNotifications}\n                  onCheckedChange={setEmailNotifications}\n                />\n              </div>\n\n              <Separator />\n\n              <div className=\"space-y-4\">\n                <Label className=\"text-sm font-medium\">Eventi di Notifica</Label>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch id=\"license-expiry\" defaultChecked />\n                    <Label htmlFor=\"license-expiry\" className=\"text-sm\">\n                      Scadenza licenze (7 giorni prima)\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch id=\"payment-failed\" defaultChecked />\n                    <Label htmlFor=\"payment-failed\" className=\"text-sm\">\n                      Pagamenti falliti\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch id=\"low-credits\" defaultChecked />\n                    <Label htmlFor=\"low-credits\" className=\"text-sm\">\n                      Crediti wallet bassi (&lt; 50 crediti)\n                    </Label>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch id=\"new-registration\" />\n                    <Label htmlFor=\"new-registration\" className=\"text-sm\">\n                      Nuove registrazioni software\n                    </Label>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Gestione Utenti */}\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Users className=\"h-5 w-5\" />\n                Gestione Utenti\n              </CardTitle>\n              <CardDescription>\n                Gestisci ruoli utente e permessi di accesso\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"text-center py-8\">\n                <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">In Sviluppo</h3>\n                <p className=\"text-gray-600\">\n                  La gestione utenti avanzata sar√† disponibile nelle prossime versioni.\n                </p>\n                <Button variant=\"outline\" className=\"mt-4\">\n                  Vai a Utenti\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\nexport default function SettingsPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        <TopBar />\n        <main className=\"flex-1 p-6\" style={{ paddingLeft: '280px', minHeight: '100vh' }}>\n          <SettingsContent />\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":19657},"client/src/pages/software-registrations.tsx":{"content":"import { useState, useEffect, useRef } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { Link } from 'wouter';\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Search, Monitor, User, MapPin, Calendar, Activity, Settings, X, Eye, Edit } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { it } from \"date-fns/locale\";\nimport Sidebar from '@/components/layout/sidebar';\nimport { useSidebar } from \"@/contexts/SidebarContext\";\nimport { useAuth } from \"@/hooks/use-auth\"; // Import useAuth hook\n\nimport { useToast } from \"@/hooks/use-toast\";\n\n// Mock user for role checking, replace with actual auth context in a real app\n// const user = {\n//   role: 'superadmin' // or 'admin', 'user', etc.\n// };\n// Use the actual user from useAuth hook\n// const { user } = useAuth();\n\n\ninterface SoftwareRegistration {\n  id: string;\n  nomeSoftware: string;\n  versione: string;\n  ragioneSociale: string;\n  partitaIva?: string;\n  totaleOrdini: number;\n  totaleVenduto: number;\n  sistemaOperativo?: string;\n  indirizzoIp?: string;\n  computerKey?: string;\n  installationPath?: string;\n  status: 'non_assegnato' | 'classificato' | 'licenziato' | 'in_attesa_computer_key';\n  clienteAssegnato?: string;\n  licenzaAssegnata?: string;\n  prodottoAssegnato?: string; // Added to match the dialog\n  aziendaAssegnata?: string; // Added for company assignment\n  note?: string;\n  primaRegistrazione: string;\n  ultimaAttivita: string;\n  createdAt: string;\n  updatedAt: string;\n  // These fields are likely mapped or renamed from API response\n  softwareName?: string; // Assuming API returns this\n  version?: string; // Assuming API returns this\n  clientName?: string; // Assuming API returns this\n  clientId?: string; // Assuming API returns this\n  registrationDate?: string; // Assuming API returns this\n  lastSeen?: string; // Assuming API returns this\n}\n\ninterface Client {\n  id: string;\n  name: string;\n  email: string;\n  status: string;\n  company_id?: string;\n  companyId?: string; // Added for compatibility\n}\n\ninterface License {\n  id: string;\n  activationKey: string;\n  client?: { id: string; name?: string; email?: string; company_id?: string; companyId?: string; }; // Updated to match typical API responses\n  company?: { id: string; name?: string; }; // Added company field for display\n  product: { name: string, version?: string, id: string }; // Added product id and version for completeness\n  status: string;\n  licenseType?: string; // Added for potential display\n  maxDevices?: number; // Added for display\n  expiryDate?: string; // Added for display\n  clientName?: string; // Added fallback if client object is not present\n  companyName?: string; // Added fallback if company object is not present\n  companyId?: string; // Added for compatibility\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  version: string;\n  description?: string;\n}\n\ninterface Company {\n  id: string;\n  name: string;\n  partitaIva?: string;\n}\n\n// Componente per la ricerca intelligente delle aziende\ninterface CompanySearchInputProps {\n  companies: Company[];\n  onCompanySelect: (companyId: string) => void;\n  placeholder?: string;\n  initialCompanyId?: string | null; // Prop for initial company selection\n}\n\nfunction CompanySearchInput({ companies, onCompanySelect, placeholder = \"Cerca azienda...\", initialCompanyId }: CompanySearchInputProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);\n\n  // Set initial company if provided and not already selected\n  useEffect(() => {\n    if (initialCompanyId && (!selectedCompany || selectedCompany.id !== initialCompanyId)) {\n      const company = companies.find(c => c.id === initialCompanyId);\n      if (company) {\n        console.log('Setting initial company:', company);\n        setSelectedCompany(company);\n        setSearchTerm(company.name || '');\n        onCompanySelect(company.id);\n      }\n    } else if (!initialCompanyId && selectedCompany) {\n      // Only clear when no initial company ID and there's currently a selection\n      console.log('Clearing company selection');\n      setSelectedCompany(null);\n      setSearchTerm('');\n      onCompanySelect('');\n    }\n  }, [initialCompanyId]); // Only depend on initialCompanyId\n\n\n  // Filtra le aziende in base al termine di ricerca\n  // Safe arrays\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n\n  const filteredCompanies = safeCompanies.filter((company: Company) => {\n    const searchLower = searchTerm.toLowerCase();\n    return company.name?.toLowerCase().includes(searchLower) ||\n           company.partitaIva?.toLowerCase().includes(searchLower);\n  }).sort((a, b) => (a.name || '').localeCompare(b.name || ''));\n\n  const handleCompanySelect = (company: Company) => {\n    setSelectedCompany(company);\n    setSearchTerm(company.name || '');\n    setIsOpen(false);\n    onCompanySelect(company.id);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n    setIsOpen(true);\n    if (!e.target.value) {\n      setSelectedCompany(null);\n      onCompanySelect('');\n    }\n  };\n\n  return (\n    <div className=\"relative company-search-container\">\n      <Input\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleInputChange}\n        onFocus={() => setIsOpen(true)}\n        placeholder={placeholder}\n        className=\"w-full\"\n        autoComplete=\"off\"\n      />\n\n      {isOpen && searchTerm && filteredCompanies.length > 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto company-search-dropdown\">\n          {filteredCompanies.slice(0, 20).map((company: Company) => (\n            <div\n              key={company.id}\n              onClick={() => handleCompanySelect(company)}\n              className=\"px-3 py-2 cursor-pointer hover:bg-gray-100 border-b border-gray-100 last:border-b-0\"\n            >\n              <div className=\"flex flex-col\">\n                <div className=\"font-medium text-sm text-gray-900\">\n                  <i className=\"fas fa-building mr-2 text-blue-600\"></i>\n                  {company.name}\n                </div>\n                {company.partitaIva && (\n                  <div className=\"text-xs text-gray-600\">\n                    P.IVA: {company.partitaIva}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n\n          {filteredCompanies.length > 20 && (\n            <div className=\"px-3 py-2 text-xs text-gray-500 text-center bg-gray-50\">\n              Visualizzati primi 20 risultati. Affina la ricerca per vedere di pi√π.\n            </div>\n          )}\n        </div>\n      )}\n\n      {isOpen && searchTerm && filteredCompanies.length === 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg company-search-dropdown\">\n          <div className=\"px-3 py-2 text-sm text-gray-500 text-center\">\n            Nessuna azienda trovata\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\n// Componente per la ricerca intelligente dei clienti\ninterface ClientSearchInputProps {\n  clients: Client[];\n  companies: Company[];\n  onClientSelect: (clientId: string) => void;\n  companyId?: string;\n  placeholder?: string;\n  initialClientId?: string; // Add initial client ID prop\n}\n\nfunction ClientSearchInput({ clients, companies, onClientSelect, companyId, placeholder = \"Cerca cliente...\", initialClientId }: ClientSearchInputProps) {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [selectedClient, setSelectedClient] = useState<Client | null>(null);\n\n  // Safe arrays to prevent runtime errors\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n\n  // Funzione per ottenere il nome dell'azienda\n  const getCompanyName = (companyId: string) => {\n    const company = safeCompanies.find((c: Company) => c.id === companyId);\n    return company ? company.name : 'N/A';\n  };\n\n  // Handle initial client selection and company changes\n  useEffect(() => {\n    if (initialClientId && companyId && (!selectedClient || selectedClient.id !== initialClientId)) {\n      const client = safeClients.find(c => c.id === initialClientId);\n      if (client && (client.company_id === companyId || client.companyId === companyId)) {\n        console.log('Setting initial client:', client);\n        setSelectedClient(client);\n        setSearchTerm(client.name || '');\n        onClientSelect(client.id);\n      }\n    } else if ((!companyId || !initialClientId) && selectedClient) {\n      // Only reset when company changes or client is cleared and there's currently a selection\n      console.log('Clearing client selection');\n      setSelectedClient(null);\n      setSearchTerm(\"\");\n      onClientSelect('');\n    }\n  }, [companyId, initialClientId]); // Only depend on the key props\n\n  // Trova i clienti diretti dell'azienda selezionata\n  const directClients = safeClients.filter((client: any) => {\n    const clientCompanyId = client.companyId || client.company_id;\n    return clientCompanyId === companyId;\n  }).map((client: any) => ({\n    ...client,\n    isCompany: false,\n    displayType: 'cliente_diretto'\n  }));\n\n  // Trova le aziende di tipo \"cliente\" che sono sotto-aziende dell'azienda selezionata\n  const clientCompanies = safeCompanies.filter((c: any) => {\n    const parentId = c.parent_id || c.parentId;\n    return c.type === 'cliente' && parentId === companyId;\n  }).map((company: any) => ({\n    id: company.id,\n    name: company.name,\n    email: company.partitaIva ? `P.IVA: ${company.partitaIva}` : '',\n    companyId: company.parent_id || company.parentId,\n    company_id: company.parent_id || company.parentId,\n    isCompany: true,\n    displayType: 'azienda_cliente',\n    partitaIva: company.partitaIva\n  }));\n\n  // Trova i clienti delle sotto-aziende di tipo \"cliente\"\n  const subCompanyClients = safeClients.filter((client: any) => {\n    const clientCompanyId = client.companyId || client.company_id;\n    if (!clientCompanyId) return false;\n    \n    // Verifica se il cliente appartiene a una sotto-azienda di tipo \"cliente\"\n    const clientCompany = safeCompanies.find((c: any) => c.id === clientCompanyId);\n    if (!clientCompany || clientCompany.type !== 'cliente') return false;\n    const parentId = clientCompany.parent_id || clientCompany.parentId;\n    return parentId === companyId;\n  }).map((client: any) => ({\n    ...client,\n    isCompany: false,\n    displayType: 'cliente_sottoadienda'\n  }));\n\n  // Combina tutti i risultati e filtra per il termine di ricerca se presente\n  const allAvailableClients = [...directClients, ...clientCompanies, ...subCompanyClients];\n  \n  const filteredOptions = allAvailableClients.filter((item: any) => {\n    if (!searchTerm) return true;\n    \n    const searchLower = searchTerm.toLowerCase();\n    const nameMatch = item.name?.toLowerCase().includes(searchLower);\n    const emailMatch = item.email?.toLowerCase().includes(searchLower);\n    const pivaMatch = item.partitaIva?.toLowerCase().includes(searchLower);\n    \n    return nameMatch || emailMatch || pivaMatch;\n  }).sort((a, b) => {\n    // Ordina prima per tipo (clienti diretti, poi aziende, poi clienti sotto-aziende)\n    const typeOrder = { 'cliente_diretto': 1, 'azienda_cliente': 2, 'cliente_sottoadienda': 3 };\n    const aOrder = typeOrder[a.displayType as keyof typeof typeOrder] || 999;\n    const bOrder = typeOrder[b.displayType as keyof typeof typeOrder] || 999;\n    \n    if (aOrder !== bOrder) {\n      return aOrder - bOrder;\n    }\n    \n    // Poi per nome\n    return (a.name || '').localeCompare(b.name || '');\n  });\n\n  console.log('ClientSearchInput: Company selected:', companyId);\n  console.log('ClientSearchInput: Available companies:', safeCompanies.map(c => ({ id: c.id, name: c.name, type: c.type, parent_id: c.parent_id })));\n  console.log('ClientSearchInput: Direct clients found:', directClients.length);\n  console.log('ClientSearchInput: Client companies found:', clientCompanies.length);\n  console.log('ClientSearchInput: Sub-company clients found:', subCompanyClients.length);\n  console.log('ClientSearchInput: All filtered options:', filteredOptions.length);\n\n  // Funzione helper per verificare la gerarchia\n  function isInClientHierarchy(targetCompanyId: string, currentCompanyId: string, depth: number = 0): boolean {\n    if (depth > 10) return false;\n    \n    const company = safeCompanies.find((c: any) => c.id === currentCompanyId);\n    if (!company) return false;\n    \n    if (currentCompanyId === targetCompanyId) return true;\n    \n    if (company.type === 'client' && company.parent_id) {\n      return isInClientHierarchy(targetCompanyId, company.parent_id, depth + 1);\n    }\n    \n    return false;\n  }\n\n  // Funzione helper per verificare se un'azienda √® nella gerarchia\n  function isInHierarchy(parentId: string, companyId: string): boolean {\n    const company = safeCompanies.find((c: any) => c.id === companyId);\n    if (!company) return false;\n    \n    let current = company;\n    let depth = 0;\n    \n    while (current && depth < 10) {\n      if (current.parent_id === parentId || current.parentId === parentId) {\n        return true;\n      }\n      current = safeCompanies.find((c: any) => c.id === (current.parent_id || current.parentId));\n      depth++;\n    }\n    \n    return false;\n  }\n\n  const handleClientSelect = (client: Client) => {\n    setSelectedClient(client);\n    setSearchTerm(client.name || '');\n    setIsOpen(false);\n    onClientSelect(client.id);\n  };\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchTerm(e.target.value);\n    setIsOpen(true);\n    if (!e.target.value) {\n      setSelectedClient(null);\n      onClientSelect(''); // Clear selection if input is cleared\n    }\n  };\n\n  return (\n    <div className=\"relative client-search-container\">\n      <Input\n        type=\"text\"\n        value={searchTerm}\n        onChange={handleInputChange}\n        onFocus={() => setIsOpen(true)}\n        placeholder={companyId ? placeholder : \"Seleziona prima un'azienda\"}\n        className=\"w-full\"\n        autoComplete=\"off\"\n        disabled={!companyId}\n      />\n\n      {isOpen && companyId && filteredOptions.length > 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg max-h-60 overflow-y-auto client-search-dropdown\">\n          {filteredOptions.map((option: any) => {\n            const getBackgroundColor = () => {\n              switch (option.displayType) {\n                case 'cliente_diretto': return 'hover:bg-green-50';\n                case 'azienda_cliente': return 'hover:bg-purple-50';\n                case 'cliente_sottoadienda': return 'hover:bg-blue-50';\n                default: return 'hover:bg-gray-50';\n              }\n            };\n\n            const getIconAndColor = () => {\n              switch (option.displayType) {\n                case 'cliente_diretto': return { icon: 'fas fa-user', color: 'text-green-600' };\n                case 'azienda_cliente': return { icon: 'fas fa-building', color: 'text-purple-600' };\n                case 'cliente_sottoadienda': return { icon: 'fas fa-user-friends', color: 'text-blue-600' };\n                default: return { icon: 'fas fa-user', color: 'text-gray-600' };\n              }\n            };\n\n            const getLabel = () => {\n              switch (option.displayType) {\n                case 'cliente_diretto': return 'Cliente Diretto';\n                case 'azienda_cliente': return 'Azienda Cliente';\n                case 'cliente_sottoadienda': {\n                  const clientCompanyId = option.companyId || option.company_id;\n                  const clientCompany = safeCompanies.find((c: any) => c.id === clientCompanyId);\n                  return `da ${clientCompany?.name || 'Azienda'}`;\n                };\n                default: return '';\n              }\n            };\n\n            const { icon, color } = getIconAndColor();\n\n            return (\n              <div\n                key={`${option.displayType}-${option.id}`}\n                onClick={() => handleClientSelect(option)}\n                className={`px-3 py-2 cursor-pointer ${getBackgroundColor()} border-b border-gray-100 last:border-b-0`}\n              >\n                <div className=\"flex flex-col\">\n                  <div className=\"font-medium text-sm text-gray-900 flex items-center\">\n                    <i className={`${icon} mr-2 ${color}`}></i>\n                    {option.name}\n                    <span className=\"ml-2 px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded-full\">\n                      {getLabel()}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-gray-600\">\n                    {option.email}\n                  </div>\n                  {option.displayType === 'azienda_cliente' && option.partitaIva && (\n                    <div className=\"text-xs text-purple-600 font-medium\">\n                      P.IVA: {option.partitaIva}\n                    </div>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n\n      {isOpen && companyId && filteredOptions.length === 0 && (\n        <div className=\"absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-md shadow-lg client-search-dropdown\">\n          <div className=\"px-3 py-2 text-sm text-gray-500 text-center\">\n            {searchTerm ? \"Nessun cliente trovato\" : \"Nessun cliente disponibile per questa azienda\"}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default function SoftwareRegistrations() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [searchInput, setSearchInput] = useState(''); // State for the input field\n  const [searchTerm, setSearchTerm] = useState(''); // State for the actual search term after user action\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedRegistration, setSelectedRegistration] = useState<SoftwareRegistration | null>(null);\n  const [isClassifyDialogOpen, setIsClassifyDialogOpen] = useState(false);\n  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);\n  const [validatingId, setValidatingId] = useState<string | null>(null); // State for validating key\n  const { contentMargin } = useSidebar();\n  const { user } = useAuth(); // Use the actual user from useAuth hook\n\n  const { register, handleSubmit, reset, setValue, watch, formState: { isSubmitting } } = useForm<any>({\n    defaultValues: {\n      authorizeDevice: false // Default value for the checkbox\n    }\n  });\n\n  // Function to execute search\n  const executeSearch = () => {\n    setSearchTerm(searchInput.trim());\n  };\n\n  // Handle Enter key press\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      executeSearch();\n    }\n  };\n\n  // Clear search\n  const clearSearch = () => {\n    setSearchInput('');\n    setSearchTerm('');\n  };\n\n  // Fetch software registrations\n  const { data: registrations = [], isLoading } = useQuery({\n    queryKey: ['/api/software/registrazioni', { status: statusFilter, search: searchTerm }],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        ...(statusFilter && statusFilter !== 'all' && { status: statusFilter }),\n        ...(searchTerm && { search: searchTerm })\n      });\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/software/registrazioni?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch registrations');\n      }\n      const data = await response.json();\n      return data.map((reg: any) => ({\n        ...reg,\n        nomeSoftware: reg.nomeSoftware || reg.softwareName,\n        versione: reg.versione || reg.version,\n        ragioneSociale: reg.ragioneSociale || reg.clientName,\n        computerKey: reg.computerKey,\n        primaRegistrazione: reg.primaRegistrazione || reg.registrationDate,\n        ultimaAttivita: reg.ultimaAttivita || reg.lastSeen,\n        clienteAssegnato: reg.clienteAssegnato,\n        prodottoAssegnato: reg.prodottoAssegnato,\n        licenzaAssegnata: reg.licenzaAssegnata,\n        note: reg.note,\n        clientId: reg.clienteAssegnato // Assuming clientId is the same as clienteAssegnato for display\n      }));\n    }\n  });\n\n  // Fetch clients for classification\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/clients', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch clients');\n      }\n      return response.json();\n    },\n    enabled: isClassifyDialogOpen // Only fetch when the dialog is open\n  });\n\n  // Fetch licenses for classification\n  const { data: licenses = [] } = useQuery({\n    queryKey: ['/api/licenses'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch licenses');\n      }\n      const data = await response.json();\n      return data.map((license: any) => ({\n        ...license,\n        client: license.client || (license.clientId ? { id: license.clientId, name: license.clientName, company_id: license.companyId } : undefined),\n        company: license.company || (license.companyId ? { id: license.companyId, name: license.companyName } : undefined),\n        product: license.product || { id: license.productId, name: license.productName, version: license.productVersion }\n      }));\n    },\n    enabled: true\n  });\n\n  // Fetch products for classification\n  const { data: products = [] } = useQuery({\n    queryKey: ['/api/products'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/products', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      return response.json();\n    },\n    enabled: true\n  });\n\n  // Fetch companies for classification\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch companies');\n      }\n      return response.json();\n    },\n    enabled: true\n  });\n\n  // Safe arrays to prevent runtime errors\n  const safeRegistrations = Array.isArray(registrations) ? registrations : [];\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const safeLicenses = Array.isArray(licenses) ? licenses : [];\n  const safeProducts = Array.isArray(products) ? products : [];\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n\n  // Classify registration mutation\n  const classifyMutation = useMutation({\n    mutationFn: async (data: any) => {\n      let finalLicenseId = data.licenzaAssegnata;\n\n      if (data.clienteAssegnato && data.clienteAssegnato !== 'none' &&\n          data.prodottoAssegnato && data.prodottoAssegnato !== 'none') {\n\n        const clientLicenses = safeLicenses.filter((license: License) =>\n          license.client?.id === data.clienteAssegnato &&\n          (license.product?.id === data.prodottoAssegnato ||\n           license.product?.name === data.prodottoAssegnato) &&\n          (license.status === 'attiva' || license.status === 'in_attesa_convalida' || license.status === 'sospesa')\n        );\n\n        if (clientLicenses.length === 1) {\n          finalLicenseId = clientLicenses[0].id;\n        } else if (clientLicenses.length > 1 && !finalLicenseId) {\n          finalLicenseId = clientLicenses[0].id;\n        }\n      }\n\n      const requestBody = {\n        aziendaAssegnata: data.aziendaAssegnata === 'none' ? null : data.aziendaAssegnata,\n        clienteAssegnato: data.clienteAssegnato === 'none' ? null : data.clienteAssegnato,\n        licenzaAssegnata: (finalLicenseId === 'none' || !finalLicenseId) ? null : finalLicenseId,\n        prodottoAssegnato: data.prodottoAssegnato === 'none' ? null : data.prodottoAssegnato,\n        note: data.note,\n        authorizeDevice: data.authorizeDevice || false\n      };\n\n      console.log('Classifying registration with data:', requestBody);\n\n      const response = await fetch(`/api/software/registrazioni/${selectedRegistration?.id}/classifica`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        body: JSON.stringify(requestBody)\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n\n        // Handle device limit exceeded error specifically\n        if (errorData.code === 'DEVICE_LIMIT_EXCEEDED') {\n          const error = new Error(errorData.message);\n          (error as any).code = 'DEVICE_LIMIT_EXCEEDED';\n          (error as any).maxDevices = errorData.maxDevices;\n          (error as any).currentDevices = errorData.currentDevices;\n          throw error;\n        }\n\n        throw new Error(errorData.message || 'Failed to classify registration');\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Classification successful:', data);\n      queryClient.invalidateQueries({ queryKey: ['/api/software/registrazioni'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/clients'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/licenses'] });\n      setIsClassifyDialogOpen(false);\n      setSelectedRegistration(null);\n      reset();\n    },\n    onError: (error: any) => {\n      console.error('Classification error:', error);\n\n      // Handle device limit exceeded error with a custom dialog\n      if (error.code === 'DEVICE_LIMIT_EXCEEDED') {\n        const message = `‚ö†Ô∏è Limite Dispositivi Raggiunto\\n\\n` +\n          `La licenza selezionata consente massimo ${error.maxDevices} dispositivo${error.maxDevices > 1 ? 'i' : ''}.\\n` +\n          `Attualmente sono gi√† autorizzati ${error.currentDevices} dispositivi.\\n\\n` +\n          `Per autorizzare questo nuovo dispositivo, devi prima rimuovere l'autorizzazione da un altro dispositivo esistente.\\n\\n` +\n          `Vuoi procedere comunque senza autorizzare il dispositivo?`;\n\n        if (confirm(message)) {\n          // Retry without device authorization\n          const currentFormData = watch();\n          classifyMutation.mutate({\n            ...currentFormData,\n            authorizeDevice: false\n          });\n        }\n        return;\n      }\n\n      alert(`Errore nella classificazione: ${error.message}`);\n    }\n  });\n\n  // Handle computer key validation\n  const handleValidateKey = async (registration: any) => {\n    if (!registration.computerKey) {\n      toast({\n        title: \"Errore\",\n        description: \"Computer key mancante\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setValidatingId(registration.id);\n\n    try {\n      const response = await fetch('/api/software-registrations/validate-key', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          registrationId: registration.id,\n          computerKey: registration.computerKey\n        }),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Errore nella validazione');\n      }\n\n      const result = await response.json();\n\n      toast({\n        title: \"Successo\",\n        description: \"Computer key convalidata con successo\",\n      });\n\n      // Refresh data\n      queryClient.invalidateQueries({ queryKey: ['/api/software/registrazioni'] });\n\n    } catch (error: any) {\n      console.error('Validation error:', error);\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore durante la convalida della computer key\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setValidatingId(null);\n    }\n  };\n\n  const onClassifySubmit = (data: any) => {\n    // Validazione: se ci sono assegnazioni esistenti ma non viene selezionata una licenza,\n    // chiedi conferma per rimuovere tutto\n    if (selectedRegistration?.clienteAssegnato && !data.licenzaAssegnata) {\n      const confirmMessage =\n        `‚ö†Ô∏è Attenzione!\\n\\n` +\n        `Stai per rimuovere TUTTE le assegnazioni esistenti:\\n` +\n        `- Cliente: ${selectedRegistration.clienteAssegnato ? safeClients.find(c => c.id === selectedRegistration.clienteAssegnato)?.name || 'Non trovato' : 'Nessuno'}\\n` +\n        `- Licenza: ${selectedRegistration.licenzaAssegnata ? safeLicenses.find(l => l.id === selectedRegistration.licenzaAssegnata)?.activationKey || 'Non trovata' : 'Nessuna'}\\n` +\n        `- Computer Key: ${selectedRegistration.computerKey || 'Nessuna'}\\n\\n` +\n        `La registrazione torner√† allo stato \"Non Assegnato\".\\n\\n` +\n        `Vuoi continuare?`;\n\n      if (!confirm(confirmMessage)) {\n        return; // Annulla l'operazione\n      }\n    }\n\n    // Se non c'√® cliente ma c'√® una licenza, impedisci il salvataggio\n    if (data.licenzaAssegnata && !data.clienteAssegnato) {\n      alert('‚ö†Ô∏è Errore: Non puoi assegnare una licenza senza selezionare un cliente.');\n      return;\n    }\n\n    // Se non c'√® azienda ma c'√® un cliente, impedisci il salvataggio\n    if (data.clienteAssegnato && !data.aziendaAssegnata) {\n      alert('‚ö†Ô∏è Errore: Non puoi assegnare un cliente senza selezionare un\\'azienda.');\n      return;\n    }\n\n    classifyMutation.mutate(data);\n  };\n\n  const getStatusBadge = (status: string) => {\n    const statusMap = {\n      'non_assegnato': { variant: 'destructive', label: 'Non Assegnato' },\n      'classificato': { variant: 'default', label: 'Classificato' },\n      'in_attesa_computer_key': { variant: 'outline', label: 'In Attesa Computer Key' },\n      'licenziato': { variant: 'secondary', label: 'Licenziato' }\n    };\n\n    const statusInfo = statusMap[status as keyof typeof statusMap] || { variant: 'outline', label: status };\n\n    return (\n      <Badge variant={statusInfo.variant as any} data-testid={`badge-status-${status}`}>\n        {statusInfo.label}\n      </Badge>\n    );\n  };\n\n  const formatCurrency = (amount: number) => {\n    return `${Math.round(amount)} crediti`;\n  };\n\n  const filteredRegistrations = safeRegistrations.filter((registration: SoftwareRegistration) => {\n    if (statusFilter !== 'all' && registration.status !== statusFilter) return false;\n    if (searchTerm) {\n      const search = searchTerm.toLowerCase();\n      return (\n        (registration.nomeSoftware || registration.softwareName || '').toLowerCase().includes(search) ||\n        (registration.ragioneSociale || registration.clientName || '').toLowerCase().includes(search) ||\n        (registration.partitaIva || '').toLowerCase().includes(search) ||\n        (registration.computerKey || '').toLowerCase().includes(search) ||\n        (registration.note || '').toLowerCase().includes(search) ||\n        (registration.prodottoAssegnato || '').toLowerCase().includes(search) ||\n        (registration.sistemaOperativo || '').toLowerCase().includes(search) ||\n        (registration.versione || registration.version || '').toLowerCase().includes(search)\n      );\n    }\n    return true;\n  });\n\n  const handleClassify = (id: string) => {\n    const registrationToClassify = safeRegistrations.find((r: SoftwareRegistration) => r.id === id);\n    setSelectedRegistration(registrationToClassify || null);\n\n    reset();\n\n    if (registrationToClassify) {\n      const client = safeClients.find(c => c.id === registrationToClassify.clienteAssegnato);\n      const companyId = client?.company_id || client?.companyId || ''; // Use empty string instead of null\n\n      // Set values using setValue\n      setValue('aziendaAssegnata', companyId);\n      setValue('clienteAssegnato', registrationToClassify.clienteAssegnato || '');\n      setValue('prodottoAssegnato', registrationToClassify.prodottoAssegnato || '');\n      setValue('licenzaAssegnata', registrationToClassify.licenzaAssegnata || '');\n      setValue('note', registrationToClassify.note || '');\n    }\n    setIsClassifyDialogOpen(true);\n  };\n\n  const handleEdit = (registration: SoftwareRegistration) => {\n    setSelectedRegistration(registration);\n\n    console.log('Edit registration:', registration);\n\n    let client = null;\n    let companyId = '';\n    let clientId = '';\n\n    // Always try to get client from assigned license first (most reliable)\n    if (registration.licenzaAssegnata) {\n      const assignedLicense = safeLicenses.find(l => l.id === registration.licenzaAssegnata);\n      console.log('Found assigned license:', assignedLicense);\n\n      if (assignedLicense?.client) {\n        // Get the client ID from the license\n        clientId = assignedLicense.client.id;\n        companyId = assignedLicense.client.company_id || assignedLicense.client.companyId || '';\n\n        // Find the full client object for form population\n        client = safeClients.find(c => c.id === clientId);\n\n        console.log('License client data:', assignedLicense.client);\n        console.log('Found full client from list:', client);\n      }\n    }\n    // Fallback: try to get client from direct assignment (less reliable)\n    else if (registration.clienteAssegnato) {\n      client = safeClients.find(c => c.id === registration.clienteAssegnato);\n      clientId = registration.clienteAssegnato;\n      companyId = client?.company_id || client?.companyId || '';\n      console.log('Direct client assignment found:', client);\n    }\n\n    console.log('Final client:', client);\n    console.log('Final client ID:', clientId);\n    console.log('Final company ID:', companyId);\n    console.log('Computer Key:', registration.computerKey);\n\n    // Reset form first\n    reset({\n      aziendaAssegnata: companyId || '',\n      clienteAssegnato: clientId || '',\n      prodottoAssegnato: registration.prodottoAssegnato || '',\n      licenzaAssegnata: registration.licenzaAssegnata || '',\n      note: registration.note || '',\n      authorizeDevice: !!registration.computerKey\n    });\n\n    console.log('Form values set:', {\n      aziendaAssegnata: companyId || '',\n      clienteAssegnato: clientId || '',\n      prodottoAssegnato: registration.prodottoAssegnato || '',\n      licenzaAssegnata: registration.licenzaAssegnata || '',\n      note: registration.note || '',\n      authorizeDevice: !!registration.computerKey\n    });\n\n    setIsClassifyDialogOpen(true);\n  };\n\n  // Function to view registration details\n  const handleViewRegistration = (id: string) => {\n    const registrationToView = safeRegistrations.find((r: SoftwareRegistration) => r.id === id);\n    setSelectedRegistration(registrationToView || null);\n    setIsViewDialogOpen(true);\n  };\n\n  const handleDeleteRegistration = async (id: string) => {\n    if (confirm('Sei sicuro di voler eliminare questa registrazione?')) {\n      try {\n        const token = localStorage.getItem('token');\n        const response = await fetch(`/api/software/registrazioni/${id}`, {\n          method: 'DELETE',\n          headers: {\n            'Authorization': `Bearer ${token}`,\n            'Content-Type': 'application/json'\n          }\n        });\n\n        if (response.ok) {\n          queryClient.invalidateQueries({ queryKey: ['/api/software/registrazioni'] });\n          alert('Registrazione eliminata con successo!');\n        } else {\n          alert('Errore nell\\'eliminazione della registrazione');\n        }\n      } catch (error) {\n        console.error('Error deleting registration:', error);\n        alert('Errore nell\\'eliminazione della registrazione');\n      }\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto p-6\">\n        <div className=\"space-y-4\">\n          {[...Array(5)].map((_, i) => (\n            <div key={i} className=\"h-24 bg-gray-200 dark:bg-gray-800 rounded-lg animate-pulse\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <div className={`flex-1 ${contentMargin} overflow-auto transition-all duration-300 ease-in-out`}>\n        <div className=\"container mx-auto p-6 space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"heading-registrations\">\n                LmRegister\n              </h1>\n              <p className=\"text-muted-foreground\">\n                Gestisci le registrazioni automatiche dei software installati presso i clienti\n              </p>\n            </div>\n          </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Search className=\"h-5 w-5\" />\n            Filtri di Ricerca\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"search-input\">Ricerca Software/Azienda</Label>\n              <div className=\"flex gap-2\">\n                <Input\n                  id=\"search-input\"\n                  placeholder=\"Cerca in tutti i campi (software, azienda, cliente, prodotto, note, computer key, etc.)...\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  onKeyPress={handleKeyPress}\n                  data-testid=\"input-search\"\n                />\n                <Button\n                  onClick={executeSearch}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"px-4\"\n                  data-testid=\"button-search\"\n                >\n                  <Search className=\"h-4 w-4\" />\n                </Button>\n                {searchTerm && (\n                  <Button\n                    onClick={clearSearch}\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"px-4\"\n                    data-testid=\"button-clear-search\"\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n              {searchTerm && (\n                <div className=\"mt-1 text-xs text-gray-500\">\n                  Ricercando: \"{searchTerm}\" - Trovati: {safeRegistrations.length} risultati\n                </div>\n              )}\n            </div>\n            <div className=\"md:w-48\">\n              <Label htmlFor=\"status-filter\">Stato</Label>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"Tutti gli stati\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Tutti gli stati</SelectItem>\n                  <SelectItem value=\"non_assegnato\">Non Assegnato</SelectItem>\n                  <SelectItem value=\"in_attesa_computer_key\">In Attesa Computer Key</SelectItem>\n                  <SelectItem value=\"classificato\">Classificato</SelectItem>\n                  <SelectItem value=\"licenziato\">Licenziato</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Monitor className=\"h-5 w-5 text-blue-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Totale Registrazioni</p>\n                <p className=\"text-2xl font-bold\" data-testid=\"text-total-registrations\">\n                  {filteredRegistrations.length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Activity className=\"h-5 w-5 text-orange-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Non Assegnate</p>\n                <p className=\"text-2xl font-bold text-orange-600\" data-testid=\"text-unassigned\">\n                  {filteredRegistrations.filter((r: SoftwareRegistration) => r.status === 'non_assegnato').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <User className=\"h-5 w-5 text-green-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">Classificate</p>\n                <p className=\"text-2xl font-bold text-green-600\" data-testid=\"text-classified\">\n                  {filteredRegistrations.filter((r: SoftwareRegistration) => r.status === 'classificato').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Settings className=\"h-5 w-5 text-yellow-500\" />\n              <div>\n                <p className=\"text-sm text-muted-foreground\">In Attesa Computer Key</p>\n                <p className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-waiting-key\">\n                  {filteredRegistrations.filter((r: SoftwareRegistration) => r.status === 'in_attesa_computer_key').length}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {filteredRegistrations.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Monitor className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nessuna registrazione trovata</h3>\n            <p className=\"text-muted-foreground\">\n              Non ci sono registrazioni software che corrispondono ai criteri di ricerca.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse excel-table\">\n                <thead>\n                  <tr className=\"border-b bg-muted/50\">\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[180px]\">Azienda/Cliente</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[200px]\">Software/Prodotto</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[100px]\">Versione</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[100px]\">Ordini</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[100px]\">Venduto</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[80px]\">Stato</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[130px]\">Data Registrazione</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[130px]\">Ultimo Accesso</th>\n                    <th className=\"text-left p-3 font-medium text-sm min-w-[150px]\">Azioni</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredRegistrations.map((registration: SoftwareRegistration, index: number) => (\n                    <tr key={registration.id} className={`border-b hover:bg-muted/30 ${index % 2 === 0 ? 'bg-white' : 'bg-muted/10'}`}>\n                      <td className=\"p-3 border-r\">\n                        <div className=\"flex items-center gap-2\">\n                          <User className=\"h-4 w-4 text-blue-500\" />\n                          <div>\n                            <div className=\"font-medium text-sm text-gray-900\">\n                              {registration.ragioneSociale || 'Non specificato'}\n                            </div>\n                            {registration.licenzaAssegnata && (() => {\n                              const assignedLicense = safeLicenses.find(l => l.id === registration.licenzaAssegnata);\n                              if (assignedLicense) {\n                                const safeCompanies = Array.isArray(companies) ? companies : [];\n                                const clientCompany = safeCompanies.find(c =>\n                                  c.id === assignedLicense.client?.company_id ||\n                                  c.id === assignedLicense.client?.companyId\n                                );\n                                return (\n                                  <div className=\"text-xs text-muted-foreground space-y-1\">\n                                    <div>Cliente: {assignedLicense.client?.name || 'Non specificato'}</div>\n                                    <div>Azienda: {clientCompany?.name || 'Non specificata'}</div>\n                                  </div>\n                                );\n                              }\n                              return <div className=\"text-xs text-muted-foreground\">Cliente: Non assegnato</div>;\n                            })() || <div className=\"text-xs text-muted-foreground\">Cliente: Non assegnato</div>}\n                          </div>\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r\">\n                        <div className=\"flex items-center gap-2\">\n                          <Monitor className=\"h-4 w-4 text-green-500\" />\n                          <div>\n                            <div className=\"font-medium text-sm text-gray-900\">\n                              {registration.nomeSoftware || registration.softwareName || 'Non specificato'}\n                            </div>\n                            {registration.licenzaAssegnata && (() => {\n                              const assignedLicense = safeLicenses.find(l => l.id === registration.licenzaAssegnata);\n                              if (assignedLicense && assignedLicense.product) {\n                                return (\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    Prodotto: {assignedLicense.product.name || 'Non specificato'}\n                                  </div>\n                                );\n                              }\n                              return <div className=\"text-xs text-muted-foreground\">Prodotto: Non assegnato</div>;\n                            })() || <div className=\"text-xs text-muted-foreground\">Prodotto: Non assegnato</div>}\n                            {registration.note && (\n                              <div className=\"text-xs text-muted-foreground truncate max-w-[150px]\" title={registration.note}>\n                                Note: {registration.note}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r\">\n                        <div className=\"flex flex-col gap-1\">\n                          <Badge variant=\"outline\" className=\"text-xs font-mono\">\n                            {registration.versione || registration.version || 'N/A'}\n                          </Badge>\n                          {registration.version && registration.versione && registration.version !== registration.versione && (\n                            <Badge variant=\"secondary\" className=\"text-xs font-mono\">\n                              Rilevata: {registration.versione}\n                            </Badge>\n                          )}\n                          {registration.computerKey && (\n                            <div className=\"mt-1 p-1 bg-green-50 border border-green-200 rounded text-xs\">\n                              <div className=\"font-mono text-green-800 text-xs\" title={registration.computerKey}>\n                                {registration.computerKey.substring(0, 10)}...\n                              </div>\n                            </div>\n                          )}\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r text-center\">\n                        <div className=\"font-medium text-sm\">\n                          {registration.totaleOrdini || 0}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          ordini\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r text-right\">\n                        <div className=\"font-medium text-sm text-green-600\">\n                          {formatCurrency(registration.totaleVenduto || 0)}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          venduto\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r\">\n                        {getStatusBadge(registration.status)}\n                      </td>\n\n                      <td className=\"p-3 border-r text-sm\">\n                        <div className=\"flex flex-col\">\n                          <span className=\"font-medium\">\n                            {(registration.primaRegistrazione || registration.registrationDate) ?\n                              format(new Date(registration.primaRegistrazione || registration.registrationDate!), 'dd/MM/yyyy', { locale: it }) :\n                              'N/A'\n                            }\n                          </span>\n                          <span className=\"text-xs text-muted-foreground\">\n                            {(registration.primaRegistrazione || registration.registrationDate) ?\n                              format(new Date(registration.primaRegistrazione || registration.registrationDate!), 'HH:mm', { locale: it }) :\n                              'N/A'\n                            }\n                          </span>\n                        </div>\n                      </td>\n\n                      <td className=\"p-3 border-r text-sm\">\n                        {(registration.ultimaAttivita || registration.lastSeen) ? (\n                          <div className=\"flex flex-col\">\n                            <span className=\"font-medium\">\n                              {format(new Date(registration.ultimaAttivita || registration.lastSeen!), 'dd/MM/yyyy', { locale: it })}\n                            </span>\n                            <span className=\"text-xs text-muted-foreground\">\n                              {format(new Date(registration.ultimaAttivita || registration.lastSeen!), 'HH:mm', { locale: it })}\n                            </span>\n                          </div>\n                        ) : (\n                          <span className=\"text-muted-foreground italic\">Mai</span>\n                        )}\n                      </td>\n\n                      <td className=\"p-3\">\n                        <div className=\"flex items-center gap-2\">\n                          {/* Visualizza - sempre disponibile per tutti */}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-8 w-8 p-0\"\n                            title=\"Visualizza Dettagli\"\n                            onClick={() => handleViewRegistration(registration.id)}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n\n                          {/* Modifica - disponibile solo per superadmin */}\n                          {user?.role === 'superadmin' && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0\"\n                              title=\"Modifica Registrazione\"\n                              onClick={() => handleEdit(registration)}\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      <Dialog open={isClassifyDialogOpen || isViewDialogOpen} onOpenChange={(open) => {\n        if (!open) {\n          setIsClassifyDialogOpen(false);\n          setIsViewDialogOpen(false);\n          setSelectedRegistration(null);\n          reset();\n        }\n      }}>\n        <DialogContent className=\"w-[95vw] max-w-4xl max-h-[95vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>\n              {isViewDialogOpen ? 'Dettagli Registrazione Software' :\n               (user?.role === 'superadmin' ? 'Classifica Registrazione Software' : 'Convalida Computer Key')}\n            </DialogTitle>\n          </DialogHeader>\n\n          {selectedRegistration && (\n            <div className=\"space-y-6\">\n              {/* Informazioni Base */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Software</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.nomeSoftware}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Versione</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.versione}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Ragione Sociale</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.ragioneSociale}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Partita IVA</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.partitaIva || 'Non specificata'}</p>\n                  </div>\n                </div>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Stato</Label>\n                    <div className=\"p-2\">\n                      {getStatusBadge(selectedRegistration.status)}\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Computer Key</Label>\n                    <p className=\"text-xs font-mono p-2 bg-gray-50 border rounded-md break-all\">\n                      {selectedRegistration.computerKey || 'Non assegnata'}\n                    </p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Sistema Operativo</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.sistemaOperativo || 'Non specificato'}</p>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-600\">Indirizzo IP</Label>\n                    <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">{selectedRegistration.indirizzoIp || 'Non specificato'}</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Informazioni Assegnazione - Modalit√† Visualizzazione con Controlli di Modifica */}\n              {isViewDialogOpen && selectedRegistration && (\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Informazioni Assegnazione</h3>\n\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-600\">Cliente Assegnato</Label>\n                        <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n                          <div className=\"font-medium text-green-800\">\n                            {selectedRegistration.clienteAssegnato ? (\n                              <>\n                                <span className=\"text-green-700\">\n                                  {(() => {\n                                    const client = safeClients.find((c: any) => c.id === selectedRegistration.clienteAssegnato);\n                                    return client ? client.name : 'Cliente non trovato';\n                                  })()}\n                                </span>\n                                <div className=\"text-xs text-green-600 mt-1\">\n                                  {(() => {\n                                    const client = safeClients.find((c: any) => c.id === selectedRegistration.clienteAssegnato);\n                                    return client ? client.email : '';\n                                  })()}\n                                </div>\n                              </>\n                            ) : (\n                              <span className=\"text-gray-500\">Non assegnato</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-600\">Prodotto Assegnato</Label>\n                        <div className=\"p-3 bg-gray-50 border rounded-md\">\n                          <span className=\"text-sm\">\n                            {selectedRegistration.prodottoAssegnato ? \n                              `Prodotto: ${selectedRegistration.prodottoAssegnato}` : \n                              'Nessun prodotto assegnato'\n                            }\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-600\">Azienda</Label>\n                        <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-md\">\n                          <div className=\"font-medium text-blue-800\">\n                            {selectedRegistration.aziendaAssegnata ? (\n                              <>\n                                <span className=\"text-blue-700\">\n                                  {(() => {\n                                    const company = safeCompanies.find((c: any) => c.id === selectedRegistration.aziendaAssegnata);\n                                    return company ? company.name : 'Azienda non trovata';\n                                  })()}\n                                </span>\n                                <div className=\"text-xs text-blue-600 mt-1\">\n                                  P.IVA: {(() => {\n                                    const company = safeCompanies.find((c: any) => c.id === selectedRegistration.aziendaAssegnata);\n                                    return company ? (company.partitaIva || 'N/A') : 'N/A';\n                                  })()}\n                                </div>\n                              </>\n                            ) : (\n                              <span className=\"text-gray-500\">Non assegnato</span>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      <div>\n                        <Label className=\"text-sm font-medium text-gray-600\">Licenza Assegnata</Label>\n                        <div className=\"p-3 bg-orange-50 border border-orange-200 rounded-md\">\n                          {selectedRegistration.licenzaAssegnata ? (\n                            <div>\n                              <span className=\"text-sm font-mono text-orange-700\">\n                                {(() => {\n                                  const license = safeLicenses.find((l: License) => l.id === selectedRegistration.licenzaAssegnata);\n                                  return license ? license.activationKey : selectedRegistration.licenzaAssegnata;\n                                })()}\n                              </span>\n                              <div className=\"text-xs text-orange-600 mt-1\">\n                                Stato: {(() => {\n                                  const license = safeLicenses.find((l: License) => l.id === selectedRegistration.licenzaAssegnata);\n                                  return license ? license.status : 'Sconosciuto';\n                                })()}\n                                | Max dispositivi: {(() => {\n                                  const license = safeLicenses.find((l: License) => l.id === selectedRegistration.licenzaAssegnata);\n                                  return license ? (license.maxDevices || 1) : 'N/A';\n                                })()}\n                              </div>\n                            </div>\n                          ) : (\n                            <span className=\"text-gray-500 text-sm\">Nessuna licenza assegnata</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Informazioni Temporali e Statistiche */}\n                  <div className=\"mt-6\">\n                    <h4 className=\"font-medium text-gray-900 mb-3\">Informazioni Temporali e Statistiche</h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm font-medium text-gray-600\">Prima Registrazione</Label>\n                        <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">\n                          {selectedRegistration.primaRegistrazione \n                            ? format(new Date(selectedRegistration.primaRegistrazione), 'dd/MM/yyyy HH:mm')\n                            : 'Non disponibile'\n                          }\n                        </p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm font-medium text-gray-600\">Ultima Attivit√†</Label>\n                        <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">\n                          {selectedRegistration.ultimaAttivita \n                            ? format(new Date(selectedRegistration.ultimaAttivita), 'dd/MM/yyyy HH:mm')\n                            : 'Non disponibile'\n                          }\n                        </p>\n                      </div>\n                      <div className=\"space-y-1\">\n                        <Label className=\"text-sm font-medium text-gray-600\">Totale Venduto</Label>\n                        <p className=\"text-sm p-2 bg-gray-50 border rounded-md text-green-600 font-medium\">\n                          0 crediti\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Note */}\n                  {selectedRegistration.note && (\n                    <div className=\"mt-4\">\n                      <Label className=\"text-sm font-medium text-gray-600\">Note</Label>\n                      <div className=\"p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n                        <p className=\"text-sm text-yellow-800\">{selectedRegistration.note}</p>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Pulsanti di Modifica per Superadmin */}\n                  {user?.role === 'superadmin' && (\n                    <div className=\"flex justify-between items-center pt-4 border-t mt-6\">\n                      <div className=\"flex gap-2\">\n                        {selectedRegistration.licenzaAssegnata && (\n                          <>\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => {\n                                if (confirm('Rimuovere l\\'assegnazione della licenza?')) {\n                                  classifyMutation.mutate({\n                                    aziendaAssegnata: null,\n                                    clienteAssegnato: null,\n                                    licenzaAssegnata: null,\n                                    prodottoAssegnato: null,\n                                    note: selectedRegistration.note,\n                                    authorizeDevice: false\n                                  });\n                                }\n                              }}\n                              disabled={classifyMutation.isPending}\n                            >\n                              <i className=\"fas fa-unlink mr-2\"></i>\n                              Rimuovi Assegnazione\n                            </Button>\n                            {selectedRegistration.computerKey && (\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm('Rimuovere solo il Computer Key?')) {\n                                    classifyMutation.mutate({\n                                      aziendaAssegnata: selectedRegistration.aziendaAssegnata,\n                                      clienteAssegnato: selectedRegistration.clienteAssegnato,\n                                      licenzaAssegnata: selectedRegistration.licenzaAssegnata,\n                                      prodottoAssegnato: selectedRegistration.prodottoAssegnato,\n                                      note: selectedRegistration.note,\n                                      authorizeDevice: false\n                                    });\n                                  }\n                                }}\n                                disabled={classifyMutation.isPending}\n                              >\n                                <i className=\"fas fa-key mr-2\"></i>\n                                Rimuovi Computer Key\n                              </Button>\n                            )}\n                          </>\n                        )}\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setSelectedRegistration(null);\n                            setIsViewDialogOpen(false);\n                            setIsClassifyDialogOpen(true);\n                          }}\n                        >\n                          <i className=\"fas fa-edit mr-2\"></i>\n                          Modifica Assegnazioni\n                        </Button>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => {\n                            setIsViewDialogOpen(false);\n                            setSelectedRegistration(null);\n                          }}\n                        >\n                          Chiudi\n                        </Button>\n                      </div>\n                    </div>\n                  )}\n                </div>\n              )}\n\n              {/* Maschera di Modifica Semplificata */}\n              {isClassifyDialogOpen && user?.role === 'superadmin' && (\n                <form onSubmit={handleSubmit(onClassifySubmit)} className=\"space-y-4\">\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Modifica Assegnazioni</h3>\n                    \n                    {/* Layout compatto responsivo */}\n                    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n                      {/* Colonna sinistra: Azienda e Cliente */}\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label htmlFor=\"aziendaAssegnata\" className=\"text-sm font-medium\">Azienda</Label>\n                          <Select\n                            value={watch('aziendaAssegnata') || ''}\n                            onValueChange={(value) => {\n                              setValue('aziendaAssegnata', value === 'none' ? null : value);\n                              setValue('clienteAssegnato', null);\n                              setValue('licenzaAssegnata', null);\n                              setValue('prodottoAssegnato', null);\n                            }}\n                          >\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Seleziona azienda...\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"none\">Nessuna azienda</SelectItem>\n                              {safeCompanies\n                                .filter((company: any) => \n                                  // Filtra per mostrare solo le aziende principali (quelle senza parent_id o con parent_id null)\n                                  // e non i clienti individuali\n                                  !company.parent_id && company.type !== 'client'\n                                )\n                                .map((company: any) => (\n                                <SelectItem key={company.id} value={company.id}>\n                                  {company.name} - {company.partitaIva || 'N/A'}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n\n                        <div>\n                          <Label htmlFor=\"clienteAssegnato\" className=\"text-sm font-medium\">Cliente</Label>\n                          {watch('aziendaAssegnata') ? (\n                            <Select\n                              value={watch('clienteAssegnato') || ''}\n                              onValueChange={(value) => {\n                                setValue('clienteAssegnato', value === 'none' ? null : value);\n                                setValue('licenzaAssegnata', null);\n                                setValue('prodottoAssegnato', null);\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Seleziona cliente...\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"none\">Nessun cliente</SelectItem>\n                                {(() => {\n                                  const selectedCompanyId = watch('aziendaAssegnata');\n                                  \n                                  // Get direct clients of the selected company\n                                  const directClients = safeClients.filter((client: any) => \n                                    (client.company_id || client.companyId) === selectedCompanyId\n                                  ).map((client: any) => ({\n                                    ...client,\n                                    displayType: 'Cliente Diretto'\n                                  }));\n                                  \n                                  // Get sub-companies of the selected company that act as clients\n                                  const subCompanyClients = safeCompanies.filter((company: any) => \n                                    (company.parent_id || company.parentId) === selectedCompanyId\n                                  ).map((company: any) => ({\n                                    id: company.id,\n                                    name: company.name,\n                                    email: company.partitaIva || 'Azienda Cliente',\n                                    displayType: 'Azienda Cliente'\n                                  }));\n                                  \n                                  // Combine both lists\n                                  const allOptions = [...directClients, ...subCompanyClients];\n                                  \n                                  return allOptions.map((option: any) => (\n                                    <SelectItem key={option.id} value={option.id}>\n                                      {option.name} ({option.displayType})\n                                    </SelectItem>\n                                  ));\n                                })()}\n                              </SelectContent>\n                            </Select>\n                          ) : (\n                            <div className=\"p-3 bg-gray-50 rounded-md border text-center\">\n                              <p className=\"text-sm text-gray-500\">Seleziona prima un'azienda</p>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Colonna destra: Licenza e Note */}\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label htmlFor=\"licenzaAssegnata\" className=\"text-sm font-medium flex items-center gap-2\">\n                            Licenza\n                            {(selectedRegistration?.clienteAssegnato || selectedRegistration?.licenzaAssegnata) && (\n                              <span className=\"text-red-500 text-xs font-medium\">\n                                * Obbligatoria per mantenere le assegnazioni\n                              </span>\n                            )}\n                          </Label>\n                        {(() => {\n                          const selectedClientId = watch('clienteAssegnato');\n                          const selectedCompanyId = watch('aziendaAssegnata');\n\n                          if (!selectedCompanyId) {\n                            return (\n                              <div className=\"p-3 bg-gray-50 rounded-md border text-center\">\n                                <p className=\"text-sm text-gray-500\">Seleziona prima un'azienda</p>\n                              </div>\n                            );\n                          }\n\n                          if (!selectedClientId) {\n                            return (\n                              <div className=\"p-3 bg-gray-50 rounded-md border text-center\">\n                                <p className=\"text-sm text-gray-500\">Seleziona prima un cliente</p>\n                              </div>\n                            );\n                          }\n\n                          const clientLicenses = safeLicenses.filter((license: License) => {\n                            // Check if the selected \"client\" is actually a company (sub-company)\n                            const selectedIsCompany = safeCompanies.some((company: any) => company.id === selectedClientId);\n                            \n                            if (selectedIsCompany) {\n                              // If selected client is a company, find licenses for clients within that company\n                              const licenseClientCompanyId = license.client?.company_id || license.client?.companyId;\n                              if (licenseClientCompanyId !== selectedClientId) return false;\n                            } else {\n                              // If selected client is a direct client, find licenses for that specific client\n                              const licenseClientId = license.client?.id;\n                              if (licenseClientId !== selectedClientId) return false;\n\n                              // Also ensure the client belongs to the selected parent company\n                              const licenseClientCompanyId = license.client?.company_id || license.client?.companyId;\n                              if (licenseClientCompanyId !== selectedCompanyId) return false;\n                            }\n\n                            return ['attiva', 'in_attesa_convalida', 'sospesa'].includes(license.status);\n                          });\n\n                          if (clientLicenses.length === 0) {\n                            return (\n                              <div className=\"p-3 bg-yellow-50 rounded-md border border-yellow-200\">\n                                <p className=\"text-sm text-yellow-700\">\n                                  <i className=\"fas fa-key mr-2\"></i>\n                                  Nessuna licenza disponibile per questo cliente\n                                </p>\n                              </div>\n                            );\n                          }\n\n                          const selectedLicenseId = watch('licenzaAssegnata');\n\n                          return (\n                            <>\n                              <Select\n                                value={selectedLicenseId || 'none'}\n                                onValueChange={(value) => {\n                                  if (value === 'none' && (selectedRegistration?.clienteAssegnato || selectedRegistration?.licenzaAssegnata)) {\n                                    const confirmMessage =\n                                      `‚ö†Ô∏è Attenzione!\\n\\n` +\n                                      `Selezionando \"Nessuna Licenza\" verranno rimosse TUTTE le assegnazioni esistenti.\\n\\n` +\n                                      `Vuoi continuare?`;\n\n                                    if (!confirm(confirmMessage)) {\n                                      return;\n                                    }\n                                  }\n\n                                  setValue('licenzaAssegnata', value === 'none' ? null : value);\n                                  if (value !== 'none') {\n                                    const selectedLicense = safeLicenses.find(l => l.id === value);\n                                    if (selectedLicense && selectedLicense.product) {\n                                      setValue('prodottoAssegnato', selectedLicense.product.id);\n                                    }\n                                  } else {\n                                    setValue('prodottoAssegnato', null);\n                                  }\n                                }}\n                              >\n                                <SelectTrigger data-testid=\"select-assign-license\">\n                                  <SelectValue placeholder=\"Seleziona licenza\" />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"none\" className=\"text-red-600 font-medium\">\n                                    ‚ö†Ô∏è Nessuna Licenza (rimuove tutto)\n                                  </SelectItem>\n                                  {clientLicenses.map((license: License) => (\n                                    <SelectItem key={license.id} value={license.id}>\n                                      <div className=\"flex flex-col\">\n                                        <span className=\"font-mono text-xs\">{license.activationKey}</span>\n                                        <span className=\"text-xs text-gray-600\">\n                                          {license.product?.name} ({license.status})\n                                        </span>\n                                      </div>\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n\n                              {selectedLicenseId && selectedLicenseId !== 'none' && (() => {\n                                const selectedLicense = safeLicenses.find((license: License) => license.id === selectedLicenseId);\n\n                                if (!selectedLicense || !selectedLicense.product) {\n                                  return (\n                                    <div className=\"p-3 bg-yellow-50 rounded-md border border-yellow-200 mt-2\">\n                                      <p className=\"text-sm text-yellow-700\">\n                                        <i className=\"fas fa-key mr-2\"></i>\n                                        Prodotto non trovato per questa licenza\n                                      </p>\n                                    </div>\n                                  );\n                                }\n\n                                return (\n                                  <div className=\"p-3 bg-green-50 rounded-md border border-green-200 mt-2\">\n                                    <div className=\"flex items-center justify-between\">\n                                      <div>\n                                        <p className=\"text-sm font-medium text-green-800\">\n                                          <i className=\"fas fa-key mr-2\"></i>\n                                          Licenza selezionata\n                                        </p>\n                                        <p className=\"text-xs text-green-600 mt-1\">\n                                          {selectedLicense.product.name} v{selectedLicense.product.version || 'N/A'}\n                                        </p>\n                                        <p className=\"text-xs text-green-600\">\n                                          Stato: {selectedLicense.status} | Dispositivi: {selectedLicense.maxDevices || 1}\n                                        </p>\n                                      </div>\n                                      <i className=\"fas fa-key text-green-500 text-xl\"></i>\n                                    </div>\n                                  </div>\n                                );\n                              })()}\n                            </>\n                          );\n                        })()}\n                        </div>\n\n                        {/* Note compatte */}\n                        <div>\n                          <Label htmlFor=\"note\" className=\"text-sm font-medium\">Note</Label>\n                          <Textarea\n                            id=\"note\"\n                            {...register('note')}\n                            placeholder=\"Aggiungi note sulla classificazione...\"\n                            data-testid=\"textarea-classification-notes\"\n                            className=\"min-h-[60px] text-sm\"\n                            defaultValue={selectedRegistration?.note || ''}\n                          />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Autorizzazione dispositivo per superadmin */}\n                    {(selectedRegistration?.licenzaAssegnata || watch('licenzaAssegnata')) && !selectedRegistration?.computerKey && (\n                      <div className=\"flex items-center space-x-2 pt-3 border-t\">\n                        <input\n                          type=\"checkbox\"\n                          id=\"authorizeDevice\"\n                          {...register('authorizeDevice')}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                          data-testid=\"checkbox-authorize-device\"\n                        />\n                        <Label htmlFor=\"authorizeDevice\" className=\"text-sm font-medium\">\n                          Autorizza dispositivo (genera computer key)\n                        </Label>\n                      </div>\n                    )}\n\n                    {/* Messaggio se il dispositivo √® gi√† autorizzato */}\n                    {selectedRegistration?.computerKey && (\n                      <div className=\"flex items-center space-x-2 pt-3 border-t bg-green-50 p-3 rounded-md\">\n                        <div className=\"h-4 w-4 text-green-600\">üîë</div>\n                        <span className=\"text-sm text-green-800 font-medium\">\n                          Dispositivo gi√† autorizzato con Computer Key: {selectedRegistration.computerKey.substring(0, 15)}...\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Pulsanti azione */}\n                    <div className=\"flex flex-col-reverse md:flex-row justify-between items-start md:items-center gap-3 pt-4 border-t\">\n                      <div className=\"flex flex-wrap gap-2\">\n                        {selectedRegistration?.licenzaAssegnata && (\n                          <>\n                            <Button\n                              type=\"button\"\n                              variant=\"destructive\"\n                              size=\"sm\"\n                              onClick={() => {\n                                if (confirm('Sei sicuro di voler rimuovere l\\'assegnazione della licenza? Questa operazione resetter√† la registrazione a \"Non Assegnato\".')) {\n                                  const removeAssignmentData = {\n                                    aziendaAssegnata: null,\n                                    clienteAssegnato: null,\n                                    licenzaAssegnata: null,\n                                    prodottoAssegnato: null,\n                                    note: selectedRegistration.note,\n                                    authorizeDevice: false\n                                  };\n                                  classifyMutation.mutate(removeAssignmentData);\n                                }\n                              }}\n                              disabled={classifyMutation.isPending}\n                            >\n                              <i className=\"fas fa-unlink mr-2\"></i>\n                              Rimuovi Assegnazione\n                            </Button>\n\n                            {selectedRegistration?.computerKey && (\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm('Sei sicuro di voler rimuovere solo la Computer Key? Il dispositivo non potr√† pi√π accedere al software.')) {\n                                    const removeKeyData = {\n                                      aziendaAssegnata: selectedRegistration.aziendaAssegnata,\n                                      clienteAssegnato: selectedRegistration.clienteAssegnato,\n                                      licenzaAssegnata: selectedRegistration.licenzaAssegnata,\n                                      prodottoAssegnato: selectedRegistration.prodottoAssegnato,\n                                      note: selectedRegistration.note,\n                                      removeComputerKey: true\n                                    };\n                                    classifyMutation.mutate(removeKeyData);\n                                  }\n                                }}\n                                disabled={classifyMutation.isPending}\n                                className=\"text-orange-600 border-orange-300 hover:bg-orange-50\"\n                              >\n                                <i className=\"fas fa-key mr-2\"></i>\n                                Rimuovi Solo Computer Key\n                              </Button>\n                            )}\n                          </>\n                        )}\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setIsClassifyDialogOpen(false)}\n                          data-testid=\"button-cancel-classify\"\n                        >\n                          Annulla\n                        </Button>\n                        <Button\n                          type=\"submit\"\n                          disabled={isSubmitting}\n                          data-testid=\"button-save-classify\"\n                          className=\"px-6\"\n                        >\n                          {isSubmitting ? 'Salvando...' : 'Salva Assegnazioni'}\n                        </Button>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              )}\n\n\n              {/* Sezione per Admin - Solo gestione Computer Key */}\n              {isClassifyDialogOpen && user?.role === 'admin' && (\n                <form onSubmit={handleSubmit(onClassifySubmit)} className=\"space-y-4\">\n                  <div className=\"border-t pt-4\">\n                    <h3 className=\"text-lg font-semibold mb-4\">Gestione Computer Key</h3>\n                    \n                    {/* Mostra informazioni attuali readonly */}\n                    <div className=\"space-y-4 mb-6 bg-gray-50 p-4 rounded-md\">\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Azienda Assegnata</Label>\n                          <p className=\"text-sm p-2 bg-white border rounded-md\">\n                            {(() => {\n                              const company = companies?.find((c: Company) => c.id === selectedRegistration?.aziendaAssegnata);\n                              return company?.name || 'Non assegnata';\n                            })()}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Cliente Assegnato</Label>\n                          <p className=\"text-sm p-2 bg-white border rounded-md\">\n                            {(() => {\n                              const client = clients?.find((c: Client) => c.id === selectedRegistration?.clienteAssegnato);\n                              return client?.name || 'Non assegnato';\n                            })()}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Licenza Assegnata</Label>\n                          <p className=\"text-sm p-2 bg-white border rounded-md\">\n                            {(() => {\n                              const license = licenses?.find((l: License) => l.id === selectedRegistration?.licenzaAssegnata);\n                              return license?.activationKey || 'Non assegnata';\n                            })()}\n                          </p>\n                        </div>\n                        <div>\n                          <Label className=\"text-sm font-medium text-gray-600\">Prodotto Assegnato</Label>\n                          <p className=\"text-sm p-2 bg-white border rounded-md\">\n                            {selectedRegistration?.prodottoAssegnato || 'Non assegnato'}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Note readonly per admin */}\n                    <div>\n                      <Label htmlFor=\"note-admin\">Note</Label>\n                      <Textarea\n                        id=\"note-admin\"\n                        placeholder=\"Solo visualizzazione...\"\n                        className=\"min-h-[80px] bg-gray-50\"\n                        value={selectedRegistration?.note || ''}\n                        readOnly\n                      />\n                      <p className=\"text-xs text-gray-500 mt-1\">Solo il superadmin pu√≤ modificare le note</p>\n                    </div>\n\n                    {/* Sezione Autorizzazione Dispositivo */}\n                    <div className=\"pt-4 border-t\">\n                      {/* Autorizzazione dispositivo per Admin con licenza e senza computer key */}\n                      {selectedRegistration?.licenzaAssegnata && !selectedRegistration?.computerKey && (\n                        <div className=\"flex items-center space-x-2 mb-4\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"authorizeDevice\"\n                            {...register('authorizeDevice')}\n                            className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                            data-testid=\"checkbox-authorize-device\"\n                          />\n                          <Label htmlFor=\"authorizeDevice\" className=\"font-medium\">\n                            Autorizza dispositivo (genera computer key)\n                          </Label>\n                        </div>\n                      )}\n\n                      {/* Messaggio se il dispositivo √® gi√† autorizzato */}\n                      {selectedRegistration?.computerKey && (\n                        <div className=\"flex items-center space-x-2 mb-4 bg-green-50 p-3 rounded-md\">\n                          <div className=\"h-4 w-4 text-green-600\">üîë</div>\n                          <span className=\"text-sm text-green-800 font-medium\">\n                            Dispositivo gi√† autorizzato con Computer Key: {selectedRegistration.computerKey.substring(0, 15)}...\n                          </span>\n                        </div>\n                      )}\n\n                      {/* Avviso se non c'√® licenza */}\n                      {!selectedRegistration?.licenzaAssegnata && (\n                        <div className=\"p-4 bg-yellow-50 border border-yellow-200 rounded-md mb-4\">\n                          <p className=\"text-sm text-yellow-800\">\n                            <i className=\"fas fa-key mr-2\"></i>\n                            Nessuna licenza assegnata. Solo il superadmin pu√≤ assegnare licenze.\n                          </p>\n                        </div>\n                      )}\n\n                      {/* Controlli con pulsanti di azione */}\n                      <div className=\"flex flex-col-reverse md:flex-row justify-between items-start md:items-center gap-3 pt-4 border-t\">\n                        <div className=\"flex flex-wrap gap-2\">\n                          {user?.role === 'superadmin' && selectedRegistration?.licenzaAssegnata && (\n                            <>\n                              <Button\n                                type=\"button\"\n                                variant=\"destructive\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  if (confirm('Sei sicuro di voler rimuovere l\\'assegnazione della licenza? Questa operazione resetter√† la registrazione a \"Non Assegnato\".')) {\n                                    const removeAssignmentData = {\n                                      aziendaAssegnata: null,\n                                      clienteAssegnato: null,\n                                      licenzaAssegnata: null,\n                                      prodottoAssegnato: null,\n                                      note: selectedRegistration.note,\n                                      authorizeDevice: false\n                                    };\n                                    classifyMutation.mutate(removeAssignmentData);\n                                  }\n                                }}\n                                disabled={classifyMutation.isPending}\n                              >\n                                <i className=\"fas fa-unlink mr-2\"></i>\n                                Rimuovi Assegnazione\n                              </Button>\n\n                              {selectedRegistration?.computerKey && (\n                                <Button\n                                  type=\"button\"\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  onClick={() => {\n                                    if (confirm('Sei sicuro di voler rimuovere solo la Computer Key? Il dispositivo non sar√† pi√π autorizzato ma la licenza rimarr√† assegnata.')) {\n                                      const removeKeyData = {\n                                        aziendaAssegnata: selectedRegistration.aziendaAssegnata || null,\n                                        clienteAssegnato: selectedRegistration.clienteAssegnato || null,\n                                        licenzaAssegnata: selectedRegistration.licenzaAssegnata || null,\n                                        prodottoAssegnato: selectedRegistration.prodottoAssegnato || null,\n                                        note: selectedRegistration.note,\n                                        authorizeDevice: false\n                                      };\n                                      classifyMutation.mutate(removeKeyData);\n                                    }\n                                  }}\n                                  disabled={classifyMutation.isPending}\n                                  className=\"border-orange-300 text-orange-700 hover:bg-orange-50\"\n                                >\n                                  <i className=\"fas fa-key mr-2\"></i>\n                                  Rimuovi Solo Computer Key\n                                </Button>\n                              )}\n                            </>\n                          )}\n                        </div>\n                        <div className=\"flex space-x-2 w-full md:w-auto\">\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              reset();\n                              setSelectedRegistration(null);\n                              setIsClassifyDialogOpen(false);\n                            }}\n                            className=\"flex-1 md:flex-none\"\n                          >\n                            Annulla\n                          </Button>\n                          {(() => {\n                            const watchedAzienda = watch('aziendaAssegnata');\n                            const watchedCliente = watch('clienteAssegnato');\n                            const watchedLicenza = watch('licenzaAssegnata');\n\n                            const isFormIncomplete = watchedAzienda && watchedCliente && (!watchedLicenza || watchedLicenza === 'none');\n\n                            return (\n                              <Button\n                                type=\"submit\"\n                                disabled={isSubmitting || isFormIncomplete}\n                                className={`flex-1 md:flex-none ${isFormIncomplete ? 'opacity-50 cursor-not-allowed' : ''}`}\n                                title={isFormIncomplete ? \"Devi selezionare una licenza per completare l'assegnazione\" : \"\"}\n                              >\n                                {isSubmitting ? \"Salvando...\" : \"Salva Assegnazione\"}\n                              </Button>\n                            );\n                          })()}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </form>\n              )}\n\n              {/* Informazioni Temporali e Statistiche */}\n              {selectedRegistration && (\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Informazioni Temporali e Statistiche</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-600\">Prima Registrazione</Label>\n                      <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">\n                        {selectedRegistration.primaRegistrazione ?\n                          format(new Date(selectedRegistration.primaRegistrazione), 'dd/MM/yyyy HH:mm', { locale: it }) :\n                          'N/A'\n                        }\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-600\">Ultima Attivit√†</Label>\n                      <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">\n                        {selectedRegistration.ultimaAttivita ?\n                          format(new Date(selectedRegistration.ultimaAttivita), 'dd/MM/yyyy HH:mm', { locale: it }) :\n                          'Mai'\n                        }\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-600\">Totale Venduto</Label>\n                      <p className=\"text-sm p-2 bg-gray-50 border rounded-md font-medium text-green-600\">\n                        {formatCurrency(selectedRegistration.totaleVenduto || 0)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Note */}\n              {selectedRegistration?.note && (\n                <div className=\"border-t pt-4\">\n                  <Label className=\"text-sm font-medium text-gray-600\">Note</Label>\n                  <div className=\"mt-2 p-3 bg-gray-50 border rounded-md\">\n                    <p className=\"text-sm whitespace-pre-wrap\">{selectedRegistration.note}</p>\n                  </div>\n                </div>\n              )}\n\n              {/* Informazioni Tecniche */}\n              {selectedRegistration && (\n                <div className=\"border-t pt-4\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Informazioni Tecniche</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-600\">Percorso Installazione</Label>\n                      <p className=\"text-xs font-mono p-2 bg-gray-50 border rounded-md break-all\">\n                        {selectedRegistration.installationPath || 'Non specificato'}\n                      </p>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-600\">Totale Ordini</Label>\n                      <p className=\"text-sm p-2 bg-gray-50 border rounded-md\">\n                        {selectedRegistration.totaleOrdini || 0}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Footer - solo per modalit√† visualizzazione */}\n              {isViewDialogOpen && (\n                <div className=\"flex justify-end pt-4 border-t\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setIsViewDialogOpen(false);\n                      setSelectedRegistration(null);\n                    }}\n                  >\n                    Chiudi\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n        </div>\n      </div>\n    </div>\n  );\n};","size_bytes":105263},"client/src/pages/transactions.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport Sidebar from '../components/layout/sidebar';\nimport TopBar from '../components/layout/topbar';\nimport { useSidebar } from '../contexts/SidebarContext';\nimport { useAuth } from '../hooks/use-auth';\nimport { apiRequest } from '../lib/api';\nimport { useToast } from '../hooks/use-toast';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from '../components/ui/card';\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from '../components/ui/table';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '../components/ui/select';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from '../components/ui/dialog';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Label } from '../components/ui/label';\nimport { format } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport { Edit } from 'lucide-react';\n\n\ninterface Transaction {\n  id: string;\n  licenseId: string;\n  clientId: string;\n  companyId?: string;\n  client_name?: string;\n  client_email?: string;\n  company_name?: string;\n  license_key?: string;\n  type: string;\n  amount: number;\n  discount: number;\n  finalAmount?: number;\n  final_amount?: number;\n  paymentMethod?: string;\n  status: string; // in_attesa, contanti, bonifico, carta_di_credito, dall_agente, dal_rivenditore, gratis, altro\n  paymentLink?: string;\n  paymentDate?: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n  modifiedBy?: string; // ID dell'utente che ha modificato il record\n}\n\ninterface Company {\n  id: string;\n  name: string;\n  type: string;\n  parentId?: string;\n  parent_id?: string;\n}\n\ninterface Client {\n  id: string;\n  name: string;\n  email: string;\n  companyId?: string;\n  company_id?: string;\n}\n\nexport function TransactionsPage() {\n  const { collapsed } = useSidebar();\n  const contentMargin = collapsed ? 'ml-16' : 'ml-64';\n  const { user, loading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // State variables - ensure these are always called in the same order\n  const [selectedCompany, setSelectedCompany] = useState<string>('all');\n  const [selectedClient, setSelectedClient] = useState<string>('all');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [selectedTransaction, setSelectedTransaction] = useState<Transaction | null>(null);\n\n  // Always call all hooks before any conditional returns\n  const { data: transactionsData, isLoading: transactionsLoading, error: transactionsError } = useQuery({\n    queryKey: ['/api/transactions'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/transactions');\n      return response.json();\n    },\n    enabled: !!user\n  });\n\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/companies');\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n    queryFn: async () => {\n      const response = await apiRequest('GET', '/api/clients');\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Update transaction status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async (data: { id: string; status: string; paymentMethod?: string }) => {\n      return apiRequest('PATCH', `/api/transactions/${data.id}/status`, {\n        status: data.status,\n        paymentMethod: data.paymentMethod\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Stato aggiornato\",\n        description: \"Lo stato del pagamento √® stato aggiornato con successo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      setSelectedTransaction(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore durante l'aggiornamento dello stato.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Generate payment link mutation\n  const generateLinkMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      return apiRequest('POST', `/api/transactions/${transactionId}/payment-link`);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Link generato\",\n        description: \"Link di pagamento generato con successo.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore durante la generazione del link.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Delete transaction mutation\n  const deleteTransactionMutation = useMutation({\n    mutationFn: async (transactionId: string) => {\n      return apiRequest('DELETE', `/api/transactions/${transactionId}`);\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Transazione eliminata\",\n        description: \"La transazione √® stata eliminata con successo.\",\n      });\n      // Invalidate all related queries\n      queryClient.invalidateQueries({ queryKey: ['/api/transactions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallets'] });\n      // Invalidate wallet transactions for all companies\n      queryClient.invalidateQueries({ \n        predicate: (query) => \n          query.queryKey[0] === '/api/wallet' || \n          (typeof query.queryKey[1] === 'string' && query.queryKey[1].includes('wallet-transactions'))\n      });\n      setSelectedTransaction(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Errore\",\n        description: error.message || \"Errore durante l'eliminazione della transazione.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Now handle conditional returns after all hooks are called\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  if (transactionsError) {\n    console.error('Error loading transactions:', transactionsError);\n  }\n\n  // Debug logging (minimal)\n  if (transactionsError) {\n    console.log('Transactions error:', transactionsError);\n  }\n\n  // Helper functions\n  const getStatusBadge = (status: string) => {\n    const statusConfig: { [key: string]: { variant: any; label: string } } = {\n      'in_attesa': { variant: 'secondary', label: 'In Attesa' },\n      'contanti': { variant: 'default', label: 'Contanti' },\n      'bonifico': { variant: 'default', label: 'Bonifico' },\n      'carta_di_credito': { variant: 'default', label: 'Carta di Credito' },\n      'dall_agente': { variant: 'default', label: 'Dall\\'Agente' },\n      'dal_rivenditore': { variant: 'default', label: 'Dal Rivenditore' },\n      'gratis': { variant: 'outline', label: 'Gratis' },\n      'altro': { variant: 'secondary', label: 'Altro' },\n      // Legacy statuses for backwards compatibility\n      'completed': { variant: 'default', label: 'Completato' },\n      'manual_paid': { variant: 'default', label: 'Pagato Manualmente' },\n      'pending': { variant: 'secondary', label: 'In Attesa' },\n      'in_sospeso': { variant: 'secondary', label: 'In Sospeso' },\n      'failed': { variant: 'destructive', label: 'Fallito' },\n      'cancelled': { variant: 'outline', label: 'Annullato' }\n    };\n\n    const config = statusConfig[status] || { variant: 'outline', label: status };\n    return <Badge variant={config.variant}>{config.label}</Badge>;\n  };\n\n  const generateReport = () => {\n    const csvContent = \"data:text/csv;charset=utf-8,\"\n      + \"ID,Cliente,Tipo,Importo,Sconto,Importo Finale,Metodo Pagamento,Stato,Data Creazione\\n\"\n      + filteredTransactions.map(t =>\n          `${t.id},${t.client_name || 'N/A'},${t.type},${t.amount},${t.discount || 0},${t.final_amount || t.finalAmount || 0},${t.paymentMethod || 'N/A'},${t.status},${new Date(t.createdAt).toLocaleDateString()}`\n        ).join(\"\\n\");\n\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", `transazioni_${new Date().toISOString().split('T')[0]}.csv`);\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  // Simplified payment status update - no extra state needed\n\n  // Ensure all data is always arrays - handle case where API returns empty object due to auth issues\n  const transactions = Array.isArray(transactionsData) ? transactionsData : [];\n  const safeClients = Array.isArray(clients) ? clients : [];\n  const safeCompanies = Array.isArray(companies) ? companies : [];\n\n  // Debug logging for transactions\n  console.log('Transactions received from API:', transactions.length, transactions.map(t => ({\n    id: t.id,\n    amount: t.amount,\n    discount: t.discount,\n    final_amount: t.final_amount,\n    client_name: t.client_name,\n    license_key: t.license_key\n  })));\n\n  // Filter transactions based on selections\n  const filteredTransactions = transactions.filter((transaction: Transaction) => {\n    // First, check if transaction has required data to avoid rendering errors\n    if (!transaction || !transaction.id) {\n      return false;\n    }\n\n    if (statusFilter !== 'all' && transaction.status !== statusFilter) {\n      return false;\n    }\n\n    if (selectedCompany !== 'all') {\n      // Find client for this transaction\n      const client = safeClients.find((c: Client) => c.id === transaction.clientId);\n      if (!client) return false;\n\n      const clientCompanyId = client.companyId || client.company_id;\n      if (clientCompanyId !== selectedCompany) return false;\n    }\n\n    if (selectedClient !== 'all' && transaction.clientId !== selectedClient) {\n      return false;\n    }\n\n    return true;\n  });\n\n  // Filter clients based on selected company\n  const filteredClients = selectedCompany === 'all'\n    ? safeClients\n    : safeClients.filter((c: Client) => c.companyId === selectedCompany || c.company_id === selectedCompany);\n\n  // Calculate statistics - always use final_amount from database\n  const totalRevenue = filteredTransactions.reduce((sum: number, t: Transaction) => {\n    const finalAmount = parseFloat(t.final_amount || t.finalAmount || '0');\n    console.log('Revenue calculation for transaction:', t.id, 'final_amount:', finalAmount);\n    return sum + finalAmount;\n  }, 0);\n\n  const completedTransactions = filteredTransactions.filter((t: Transaction) =>\n    t.status === 'completed' || t.status === 'manual_paid'\n  );\n\n  const pendingTransactions = filteredTransactions.filter((t: Transaction) =>\n    t.status === 'pending' || t.status === 'in_sospeso'\n  );\n\n  const failedTransactions = filteredTransactions.filter((t: Transaction) =>\n    t.status === 'failed'\n  );\n\n  return (\n    <div className=\"min-h-screen flex bg-surface\">\n      <Sidebar />\n\n      <main className=\"flex-1 bg-surface transition-all duration-300 ease-in-out\" style={{ marginLeft: collapsed ? '64px' : '260px' }}>\n        <TopBar />\n\n        <div className=\"p-6 space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Gestione Transazioni</h1>\n              <p className=\"text-gray-600\">Visualizza e monitora tutte le transazioni del sistema</p>\n            </div>\n            <div className=\"flex gap-2\">\n              <Button onClick={generateReport} variant=\"outline\" data-testid=\"button-generate-report\">\n                <i className=\"fas fa-download mr-2\"></i>\n                Genera Report\n              </Button>\n            </div>\n          </div>\n\n          {/* Statistics Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Ricavi Totali</CardTitle>\n                <i className=\"fas fa-euro-sign h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">‚Ç¨{totalRevenue.toFixed(2)}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Pagamenti Completati</CardTitle>\n                <i className=\"fas fa-check-circle h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{completedTransactions.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">In Attesa</CardTitle>\n                <i className=\"fas fa-clock h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{pendingTransactions.length}</div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">Falliti</CardTitle>\n                <i className=\"fas fa-exclamation-triangle h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">{failedTransactions.length}</div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Filters */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Filtri</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"company-filter\">Azienda</Label>\n                  <Select value={selectedCompany} onValueChange={setSelectedCompany}>\n                    <SelectTrigger data-testid=\"select-company-filter\">\n                      <SelectValue placeholder=\"Tutte le aziende\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tutte le aziende</SelectItem>\n                      {safeCompanies.map((company: Company) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"client-filter\">Cliente</Label>\n                  <Select value={selectedClient} onValueChange={setSelectedClient}>\n                    <SelectTrigger data-testid=\"select-client-filter\">\n                      <SelectValue placeholder=\"Tutti i clienti\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tutti i clienti</SelectItem>\n                      {filteredClients.map((client: Client) => (\n                        <SelectItem key={client.id} value={client.id}>\n                          {client.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status-filter\">Stato</Label>\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\n                    <SelectTrigger data-testid=\"select-status-filter\">\n                      <SelectValue placeholder=\"Tutti gli stati\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"all\">Tutti gli stati</SelectItem>\n                      <SelectItem value=\"in_attesa\">In Attesa</SelectItem>\n                      <SelectItem value=\"contanti\">Contanti</SelectItem>\n                      <SelectItem value=\"bonifico\">Bonifico</SelectItem>\n                      <SelectItem value=\"carta_di_credito\">Carta di Credito</SelectItem>\n                      <SelectItem value=\"dall_agente\">Dall'Agente</SelectItem>\n                      <SelectItem value=\"dal_rivenditore\">Dal Rivenditore</SelectItem>\n                      <SelectItem value=\"gratis\">Gratis</SelectItem>\n                      <SelectItem value=\"altro\">Altro</SelectItem>\n                      <SelectItem value=\"failed\">Fallito</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label>&nbsp;</Label>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => {\n                      setSelectedCompany('all');\n                      setSelectedClient('all');\n                      setStatusFilter('all');\n                    }}\n                    className=\"w-full\"\n                  >\n                    Pulisci Filtri\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Transactions Table */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Transazioni ({filteredTransactions.length})</CardTitle>\n              <CardDescription>\n                Lista di tutte le transazioni del sistema\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              {transactionsLoading ? (\n                <div className=\"flex justify-center py-4\">\n                  <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                </div>\n              ) : transactionsError ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-red-500\">Errore nel caricamento delle transazioni: {transactionsError.message}</p>\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => queryClient.invalidateQueries({ queryKey: ['/api/transactions'] })}\n                    className=\"mt-2\"\n                  >\n                    Riprova\n                  </Button>\n                </div>\n              ) : filteredTransactions.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <p className=\"text-gray-500\">Nessuna transazione trovata con i filtri selezionati</p>\n                </div>\n              ) : (\n                <div className=\"overflow-x-auto\">\n                  <Table>\n                    <TableHeader>\n                      <TableRow>\n                        <TableHead>Cliente</TableHead>\n                        <TableHead>Azienda</TableHead>\n                        <TableHead>Tipo</TableHead>\n                        <TableHead>Importo</TableHead>\n                        <TableHead>Sconto</TableHead>\n                        <TableHead>Totale</TableHead>\n                        <TableHead>Stato</TableHead>\n                        <TableHead>Data Pagamento</TableHead>\n                        <TableHead>Data Creazione</TableHead>\n                        <TableHead>Data Modifica</TableHead>\n                        <TableHead>Modificato da</TableHead>\n                        <TableHead>Azioni</TableHead>\n                      </TableRow>\n                    </TableHeader>\n                    <TableBody>\n                      {filteredTransactions.map((transaction) => {\n                        // Always use final_amount from database, never recalculate\n                        const amount = parseFloat(transaction.amount || '0');\n                        const discount = parseFloat(transaction.discount || '0');\n                        const finalAmount = parseFloat(transaction.final_amount || transaction.finalAmount || '0');\n\n                        console.log('Transaction display:', {\n                          id: transaction.id,\n                          amount: amount,\n                          discount: discount,\n                          finalAmount: finalAmount,\n                          status: transaction.status,\n                          client: transaction.client_name\n                        });\n\n                        return (\n                          <TableRow key={transaction.id}>\n                            <TableCell>\n                              <div>\n                                <div className=\"font-medium\">{transaction.client_name || 'N/A'}</div>\n                                <div className=\"text-sm text-gray-500\">{transaction.client_email || ''}</div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"font-medium text-sm\">{transaction.company_name || 'N/A'}</div>\n                            </TableCell>\n                            <TableCell className=\"capitalize\">{transaction.type}</TableCell>\n                            <TableCell>{Math.round(amount)} crediti</TableCell>\n                            <TableCell>{Math.round(discount)} crediti</TableCell>\n                            <TableCell className=\"font-medium\">{Math.round(finalAmount)} crediti</TableCell>\n                            <TableCell>{getStatusBadge(transaction.status)}</TableCell>\n                            <TableCell>\n                              {transaction.paymentDate ? (\n                                <div className=\"text-sm\">\n                                  {new Date(transaction.paymentDate).toLocaleDateString('it-IT')}\n                                  <br />\n                                  <span className=\"text-gray-500\">{new Date(transaction.paymentDate).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">-</span>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {transaction.createdAt ? (\n                                <div className=\"text-sm\">\n                                  {new Date(transaction.createdAt).toLocaleDateString('it-IT')}\n                                  <br />\n                                  <span className=\"text-gray-500\">{new Date(transaction.createdAt).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">-</span>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {transaction.updatedAt ? (\n                                <div className=\"text-sm\">\n                                  {new Date(transaction.updatedAt).toLocaleDateString('it-IT')}\n                                  <br />\n                                  <span className=\"text-gray-500\">{new Date(transaction.updatedAt).toLocaleTimeString('it-IT', { hour: '2-digit', minute: '2-digit' })}</span>\n                                </div>\n                              ) : (\n                                <span className=\"text-gray-400\">-</span>\n                              )}\n                            </TableCell>\n                            <TableCell>\n                              {transaction.modifiedBy || '-'}\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex gap-2\">\n                                {(transaction.status === 'pending' || transaction.status === 'in_sospeso' || transaction.status === 'in_attesa') && (\n                                  <Button\n                                    size=\"sm\"\n                                    onClick={() => {\n                                      console.log('Opening transaction dialog for:', transaction.id, 'status:', transaction.status);\n                                      setSelectedTransaction(transaction);\n                                    }}\n                                    data-testid={`button-update-status-${transaction.id}`}\n                                  >\n                                    Aggiorna Stato\n                                  </Button>\n                                )}\n                                {/* Always show button for admins/superadmins to modify any transaction */}\n                                {(user?.role === 'superadmin' || user?.role === 'admin') &&\n                                 !(transaction.status === 'pending' || transaction.status === 'in_sospeso' || transaction.status === 'in_attesa') && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => {\n                                      console.log('Opening transaction dialog for:', transaction.id, 'status:', transaction.status);\n                                      setSelectedTransaction(transaction);\n                                    }}\n                                    data-testid={`button-modify-status-${transaction.id}`}\n                                  >\n                                    Modifica Stato\n                                  </Button>\n                                )}\n                                {transaction.paymentLink && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => window.open(transaction.paymentLink, '_blank')}\n                                  >\n                                    Link Pagamento\n                                  </Button>\n                                )}\n                                {!transaction.paymentLink && transaction.status === 'pending' && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"outline\"\n                                    onClick={() => generateLinkMutation.mutate(transaction.id)}\n                                    disabled={generateLinkMutation.isPending}\n                                  >\n                                    Genera Link\n                                  </Button>\n                                )}\n                                {user?.role === 'superadmin' && (\n                                  <Button\n                                    size=\"sm\"\n                                    variant=\"destructive\"\n                                    onClick={() => {\n                                      if (confirm(`Sei sicuro di voler eliminare questa transazione? Questa azione non pu√≤ essere annullata.`)) {\n                                        deleteTransactionMutation.mutate(transaction.id);\n                                      }\n                                    }}\n                                    disabled={deleteTransactionMutation.isPending}\n                                    data-testid={`button-delete-transaction-${transaction.id}`}\n                                  >\n                                    <i className=\"fas fa-trash mr-1\"></i>\n                                    Elimina\n                                  </Button>\n                                )}\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </TableBody>\n                  </Table>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Transaction Details Dialog */}\n          <Dialog open={!!selectedTransaction} onOpenChange={() => setSelectedTransaction(null)}>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Dettagli Transazione</DialogTitle>\n                <p className=\"text-sm text-muted-foreground\">Visualizza e modifica i dettagli della transazione selezionata</p>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                {selectedTransaction && (\n                  <>\n                    <div className=\"bg-gray-50 p-4 rounded-lg space-y-2\">\n                      <div><strong>Cliente:</strong> {selectedTransaction.client_name || 'N/A'}</div>\n                      <div><strong>Email:</strong> {selectedTransaction.client_email || 'N/A'}</div>\n                      <div><strong>Azienda:</strong> {selectedTransaction.company_name || 'N/A'}</div>\n                      <div><strong>Licenza:</strong> {selectedTransaction.license_key || 'N/A'}</div>\n                      <div><strong>Importo:</strong> ‚Ç¨{parseFloat(selectedTransaction.amount || '0').toFixed(2)}</div>\n                      <div><strong>Sconto:</strong> ‚Ç¨{parseFloat(selectedTransaction.discount || '0').toFixed(2)}</div>\n                      <div><strong>Importo Finale:</strong> ‚Ç¨{parseFloat(selectedTransaction.final_amount || selectedTransaction.finalAmount || '0').toFixed(2)}</div>\n                      <div><strong>Tipo:</strong> {selectedTransaction.type}</div>\n                      <div><strong>Metodo Pagamento:</strong> {selectedTransaction.paymentMethod || 'N/A'}</div>\n                      <div><strong>Stato Attuale:</strong> {getStatusBadge(selectedTransaction.status)}</div>\n                      <div><strong>Data Creazione:</strong> {selectedTransaction.createdAt ? new Date(selectedTransaction.createdAt).toLocaleString('it-IT') : 'Non disponibile'}</div>\n                      {selectedTransaction.paymentDate && (\n                        <div><strong>Data Pagamento:</strong> {new Date(selectedTransaction.paymentDate).toLocaleString('it-IT')}</div>\n                      )}\n                      <div><strong>Ultima Modifica:</strong> {selectedTransaction.updatedAt ? new Date(selectedTransaction.updatedAt).toLocaleString('it-IT') : 'Non disponibile'}</div>\n                      {selectedTransaction.modifiedBy && (\n                        <div><strong>Modificato da:</strong> {selectedTransaction.modifiedBy}</div>\n                      )}\n                      {selectedTransaction.notes && (\n                        <div><strong>Note:</strong> {selectedTransaction.notes}</div>\n                      )}\n                    </div>\n\n                    {/* Payment Status Update Section */}\n                    {(user?.role === 'superadmin' || user?.role === 'admin') && (\n                      <div className=\"border-t pt-4 space-y-4\">\n                        <h4 className=\"font-medium text-lg\">Aggiorna Stato Pagamento</h4>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"payment-status\">Nuovo Stato</Label>\n                            <Select\n                              value={selectedTransaction.status}\n                              onValueChange={(value) => {\n                                setSelectedTransaction({\n                                  ...selectedTransaction,\n                                  status: value\n                                });\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"in_attesa\">In Attesa</SelectItem>\n                                <SelectItem value=\"contanti\">Contanti</SelectItem>\n                                <SelectItem value=\"bonifico\">Bonifico</SelectItem>\n                                <SelectItem value=\"carta_di_credito\">Carta di Credito</SelectItem>\n                                <SelectItem value=\"dall_agente\">Dall'Agente</SelectItem>\n                                <SelectItem value=\"dal_rivenditore\">Dal Rivenditore</SelectItem>\n                                <SelectItem value=\"gratis\">Gratis</SelectItem>\n                                <SelectItem value=\"altro\">Altro</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"payment-method\">Metodo Pagamento (Opzionale)</Label>\n                            <Select\n                              value={selectedTransaction.paymentMethod || 'nessuno'}\n                              onValueChange={(value) => {\n                                setSelectedTransaction({\n                                  ...selectedTransaction,\n                                  paymentMethod: value === 'nessuno' ? null : value\n                                });\n                              }}\n                            >\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Seleziona metodo\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"nessuno\">Nessuno</SelectItem>\n                                <SelectItem value=\"contanti\">Contanti</SelectItem>\n                                <SelectItem value=\"bonifico\">Bonifico Bancario</SelectItem>\n                                <SelectItem value=\"carta_di_credito\">Carta di Credito</SelectItem>\n                                <SelectItem value=\"paypal\">PayPal</SelectItem>\n                                <SelectItem value=\"stripe\">Stripe</SelectItem>\n                                <SelectItem value=\"assegno\">Assegno</SelectItem>\n                                <SelectItem value=\"altro\">Altro</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                        </div>\n\n                        {/* Save Button */}\n                        <div className=\"flex justify-start\">\n                          <Button\n                            onClick={() => {\n                              console.log('Saving payment status:', selectedTransaction.status, 'method:', selectedTransaction.paymentMethod);\n                              updateStatusMutation.mutate({\n                                id: selectedTransaction.id,\n                                status: selectedTransaction.status,\n                                paymentMethod: selectedTransaction.paymentMethod\n                              });\n                            }}\n                            disabled={updateStatusMutation.isPending}\n                            className=\"bg-primary hover:bg-primary/90\"\n                          >\n                            {updateStatusMutation.isPending ? 'Salvando...' : 'Salva Modifiche'}\n                          </Button>\n                        </div>\n\n                        {/* Quick Actions */}\n                        <div className=\"flex gap-2 flex-wrap\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateStatusMutation.mutate({\n                              id: selectedTransaction.id,\n                              status: 'contanti',\n                              paymentMethod: 'contanti'\n                            })}\n                            disabled={updateStatusMutation.isPending}\n                          >\n                            Segna come Pagato (Contanti)\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateStatusMutation.mutate({\n                              id: selectedTransaction.id,\n                              status: 'bonifico',\n                              paymentMethod: 'bonifico'\n                            })}\n                            disabled={updateStatusMutation.isPending}\n                          >\n                            Segna come Pagato (Bonifico)\n                          </Button>\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => updateStatusMutation.mutate({\n                              id: selectedTransaction.id,\n                              status: 'gratis',\n                              paymentMethod: 'gratis'\n                            })}\n                            disabled={updateStatusMutation.isPending}\n                          >\n                            Segna come Gratis\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                )}\n\n                <div className=\"flex justify-end gap-2 border-t pt-4\">\n                  {selectedTransaction && !selectedTransaction.paymentLink &&\n                   (selectedTransaction.status === 'in_attesa' || selectedTransaction.status === 'pending') &&\n                   (user?.role === 'superadmin' || user?.role === 'admin') && (\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => generateLinkMutation.mutate(selectedTransaction.id)}\n                      disabled={generateLinkMutation.isPending}\n                    >\n                      Genera Link Pagamento\n                    </Button>\n                  )}\n                  {selectedTransaction && user?.role === 'superadmin' && (\n                    <Button\n                      variant=\"destructive\"\n                      onClick={() => {\n                        if (confirm(`Sei sicuro di voler eliminare questa transazione? Questa azione non pu√≤ essere annullata.`)) {\n                          deleteTransactionMutation.mutate(selectedTransaction.id);\n                        }\n                      }}\n                      disabled={deleteTransactionMutation.isPending}\n                    >\n                      <i className=\"fas fa-trash mr-1\"></i>\n                      Elimina Transazione\n                    </Button>\n                  )}\n                  <Button onClick={() => setSelectedTransaction(null)}>\n                    Chiudi\n                  </Button>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default TransactionsPage;","size_bytes":39381},"client/src/pages/users.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardHeader, CardTitle, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, Edit, Trash2, Users, Building } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Sidebar from '@/components/layout/sidebar';\nimport { useSidebar } from \"@/contexts/SidebarContext\";\n\ninterface User {\n  id: string;\n  username: string;\n  name: string;\n  email: string;\n  role: string;\n  companyId?: string;\n  isActive: boolean;\n  createdAt: string;\n  company?: {\n    id: string;\n    name: string;\n    type: string;\n  };\n}\n\ninterface Company {\n  id: string;\n  name: string;\n  type: string;\n  parentId?: string;\n}\n\nexport default function UsersPage() {\n  const [, setLocation] = useLocation();\n  const { user, loading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { contentMargin } = useSidebar();\n  \n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n\n  // Fetch users based on role permissions\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: ['/api/users', user?.id, user?.role, user?.companyId],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/users', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch users');\n      return response.json();\n    }\n  });\n\n  // Fetch companies for user creation\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies', user?.id, user?.role, user?.companyId],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/companies', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch companies');\n      return response.json();\n    }\n  });\n\n  // Create user mutation\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/users', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) throw new Error('Failed to create user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setIsCreateModalOpen(false);\n      toast({\n        title: \"Utente creato\",\n        description: \"L'utente √® stato creato con successo.\"\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Errore\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  // Update user mutation\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updates)\n      });\n      if (!response.ok) throw new Error('Failed to update user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setEditingUser(null);\n      toast({\n        title: \"Utente aggiornato\",\n        description: \"L'utente √® stato aggiornato con successo.\"\n      });\n    }\n  });\n\n  // Delete user mutation\n  const deleteUserMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/users/${id}`, {\n        method: 'DELETE',\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to delete user');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      toast({\n        title: \"Utente eliminato\",\n        description: \"L'utente √® stato eliminato con successo.\"\n      });\n    }\n  });\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  // Clear React Query cache when user changes to prevent stale data\n  useEffect(() => {\n    if (user?.id) {\n      queryClient.invalidateQueries();\n    }\n  }, [user?.id, queryClient]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  // Check permissions\n  if (user.role !== 'superadmin' && user.role !== 'admin') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-bold mb-4\">Accesso Negato</h2>\n          <p>Non hai i permessi per accedere a questa sezione.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const filteredUsers = users.filter((user: User) => {\n    const searchMatch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                       user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                       user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const roleMatch = roleFilter === \"all\" || user.role === roleFilter;\n    return searchMatch && roleMatch;\n  });\n\n  // Define what roles current user can create\n  const getAllowedRoles = () => {\n    if (user.role === 'superadmin') {\n      return [\n        { value: 'admin', label: 'Admin Azienda' },\n        { value: 'user', label: 'Utente' }\n      ];\n    } else if (user.role === 'admin') {\n      return [\n        { value: 'admin', label: 'Admin Sotto-Azienda' },\n        { value: 'user', label: 'Utente' }\n      ];\n    }\n    return [];\n  };\n\n  const getRoleBadgeVariant = (role: string) => {\n    switch (role) {\n      case 'superadmin': return 'destructive';\n      case 'admin': return 'default';\n      case 'user': return 'secondary';\n      default: return 'outline';\n    }\n  };\n\n  const getRoleLabel = (role: string) => {\n    switch (role) {\n      case 'superadmin': return 'Super Admin';\n      case 'admin': return 'Admin';\n      case 'user': return 'Utente';\n      default: return role;\n    }\n  };\n\n  const handleCreateUser = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const formData = new FormData(e.target as HTMLFormElement);\n    \n    const userData = {\n      username: formData.get('username'),\n      name: formData.get('name'),\n      email: formData.get('email'),\n      password: formData.get('password'),\n      role: formData.get('role'),\n      companyId: formData.get('companyId') || user.companyId\n    };\n\n    createUserMutation.mutate(userData);\n  };\n\n  const handleUpdateUser = (userId: string, updates: any) => {\n    updateUserMutation.mutate({ id: userId, updates });\n  };\n\n  const handleDeleteUser = (userId: string) => {\n    if (confirm('Sei sicuro di voler eliminare questo utente?')) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      <Sidebar />\n      <div className={`flex-1 ${contentMargin} overflow-auto transition-all duration-300 ease-in-out`}>\n        <div className=\"p-6 space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold flex items-center gap-2\">\n                <Users className=\"h-8 w-8 text-primary\" />\n                Gestione Utenti\n              </h1>\n              <p className=\"text-muted-foreground mt-2\">\n                {user.role === 'superadmin' \n                  ? 'Gestisci tutti gli utenti del sistema'\n                  : 'Gestisci gli utenti della tua azienda e sotto-aziende'\n                }\n              </p>\n            </div>\n        \n        <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-user\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Nuovo Utente\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Crea Nuovo Utente</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreateUser} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"username\">Username *</Label>\n                  <Input id=\"username\" name=\"username\" required data-testid=\"input-username\" />\n                </div>\n                <div>\n                  <Label htmlFor=\"name\">Nome Completo *</Label>\n                  <Input id=\"name\" name=\"name\" required data-testid=\"input-name\" />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"email\">Email *</Label>\n                <Input id=\"email\" name=\"email\" type=\"email\" required data-testid=\"input-email\" />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"password\">Password *</Label>\n                <Input id=\"password\" name=\"password\" type=\"password\" required data-testid=\"input-password\" />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"role\">Ruolo *</Label>\n                <Select name=\"role\" required>\n                  <SelectTrigger data-testid=\"select-role\">\n                    <SelectValue placeholder=\"Seleziona ruolo\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {getAllowedRoles().map((role) => (\n                      <SelectItem key={role.value} value={role.value}>\n                        {role.label}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {user.role === 'superadmin' && (\n                <div>\n                  <Label htmlFor=\"companyId\">Azienda</Label>\n                  <Select name=\"companyId\">\n                    <SelectTrigger data-testid=\"select-company\">\n                      <SelectValue placeholder=\"Seleziona azienda (opzionale per admin)\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {(Array.isArray(companies) ? companies : []).map((company: Company) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name} ({company.type})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsCreateModalOpen(false)}>\n                  Annulla\n                </Button>\n                <Button type=\"submit\" disabled={createUserMutation.isPending} data-testid=\"button-save-user\">\n                  {createUserMutation.isPending ? 'Creazione...' : 'Crea Utente'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex gap-4\">\n            <div className=\"flex-1\">\n              <Input\n                placeholder=\"Cerca per nome, username o email...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                data-testid=\"input-search\"\n              />\n            </div>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-48\" data-testid=\"select-role-filter\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tutti i ruoli</SelectItem>\n                <SelectItem value=\"superadmin\">Super Admin</SelectItem>\n                <SelectItem value=\"admin\">Admin</SelectItem>\n                <SelectItem value=\"user\">Utente</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Users Grid */}\n      {filteredUsers.length === 0 ? (\n        <Card>\n          <CardContent className=\"p-8 text-center\">\n            <Users className=\"h-12 w-12 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">Nessun utente trovato</h3>\n            <p className=\"text-muted-foreground\">\n              Non ci sono utenti che corrispondono ai criteri di ricerca.\n            </p>\n          </CardContent>\n        </Card>\n      ) : (\n        <Card>\n          <CardContent className=\"p-0\">\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full border-collapse\">\n                <thead>\n                  <tr className=\"border-b bg-muted/50\">\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[180px]\">Nome Utente</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[120px]\">Username</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[200px]\">Email</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[100px]\">Ruolo</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[150px]\">Azienda</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[80px]\">Stato</th>\n                    <th className=\"text-left p-3 font-medium text-sm border-r min-w-[130px]\">Data Creazione</th>\n                    <th className=\"text-center p-3 font-medium text-sm min-w-[100px]\">Azioni</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {isLoading ? (\n                    <tr>\n                      <td colSpan={8} className=\"p-8 text-center\">\n                        <div className=\"flex justify-center\">\n                          <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n                        </div>\n                      </td>\n                    </tr>\n                  ) : (\n                    filteredUsers.map((userItem: User) => (\n                      <tr key={userItem.id} className=\"border-b hover:bg-muted/25 transition-colors\" data-testid={`user-row-${userItem.id}`}>\n                        <td className=\"p-3 border-r\">\n                          <div className=\"flex items-center gap-2\">\n                            <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                              <Users className=\"h-4 w-4 text-primary\" />\n                            </div>\n                            <span className=\"font-medium\" data-testid={`text-user-name-${userItem.id}`}>\n                              {userItem.name}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          <span className=\"text-sm font-mono\">@{userItem.username}</span>\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          <span className=\"text-sm\" data-testid={`text-user-email-${userItem.id}`}>\n                            {userItem.email}\n                          </span>\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          <Badge variant={getRoleBadgeVariant(userItem.role)} data-testid={`badge-role-${userItem.id}`}>\n                            {getRoleLabel(userItem.role)}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          {userItem.company ? (\n                            <div className=\"flex items-center gap-1\">\n                              <Building className=\"h-3 w-3 text-muted-foreground\" />\n                              <span className=\"text-sm\">{userItem.company.name}</span>\n                            </div>\n                          ) : (\n                            <span className=\"text-sm text-muted-foreground\">-</span>\n                          )}\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          <Badge variant={userItem.isActive ? 'default' : 'outline'} data-testid={`badge-status-${userItem.id}`}>\n                            {userItem.isActive ? 'Attivo' : 'Inattivo'}\n                          </Badge>\n                        </td>\n                        <td className=\"p-3 border-r\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {new Date(userItem.createdAt).toLocaleDateString('it-IT')}\n                          </span>\n                        </td>\n                        <td className=\"p-3\">\n                          <div className=\"flex items-center justify-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => setEditingUser(userItem)}\n                              data-testid={`button-edit-${userItem.id}`}\n                              title=\"Modifica utente\"\n                            >\n                              <Edit className=\"h-4 w-4\" />\n                            </Button>\n                            {user.id !== userItem.id && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteUser(userItem.id)}\n                                className=\"text-destructive hover:text-destructive\"\n                                data-testid={`button-delete-${userItem.id}`}\n                                title=\"Elimina utente\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </td>\n                      </tr>\n                    ))\n                  )}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Edit User Modal */}\n      {editingUser && (\n        <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n          <DialogContent className=\"sm:max-w-[500px]\">\n            <DialogHeader>\n              <DialogTitle>Modifica Utente</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={(e) => {\n              e.preventDefault();\n              const formData = new FormData(e.target as HTMLFormElement);\n              const updates: any = {\n                username: formData.get('username'),\n                name: formData.get('name'),\n                email: formData.get('email'),\n                isActive: formData.get('isActive') === 'true'\n              };\n              \n              // Gestisci il companyId\n              const companyId = formData.get('companyId') as string;\n              if (companyId && companyId !== 'none') {\n                updates.companyId = companyId;\n              } else {\n                updates.companyId = null;\n              }\n              \n              // Solo includi la password se √® stata inserita\n              const password = formData.get('password') as string;\n              if (password && password.trim()) {\n                updates.password = password;\n              }\n              \n              handleUpdateUser(editingUser.id, updates);\n            }} className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"edit-username\">Username *</Label>\n                  <Input id=\"edit-username\" name=\"username\" defaultValue={editingUser.username} required />\n                </div>\n                <div>\n                  <Label htmlFor=\"edit-name\">Nome Completo *</Label>\n                  <Input id=\"edit-name\" name=\"name\" defaultValue={editingUser.name} required />\n                </div>\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-email\">Email *</Label>\n                <Input id=\"edit-email\" name=\"email\" type=\"email\" defaultValue={editingUser.email} required />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"edit-password\">Nuova Password</Label>\n                <Input \n                  id=\"edit-password\" \n                  name=\"password\" \n                  type=\"password\" \n                  placeholder=\"Lascia vuoto per mantenere la password attuale\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Inserisci una nuova password solo se vuoi cambiarla\n                </p>\n              </div>\n\n              {user.role === 'superadmin' && (\n                <div>\n                  <Label htmlFor=\"edit-company\">Azienda</Label>\n                  <Select name=\"companyId\" defaultValue={editingUser.companyId || 'none'}>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Seleziona azienda\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"none\">Nessuna azienda</SelectItem>\n                      {(Array.isArray(companies) ? companies : []).map((company: Company) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name} ({company.type})\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              )}\n              \n              <div>\n                <Label htmlFor=\"edit-isActive\">Stato</Label>\n                <Select name=\"isActive\" defaultValue={editingUser.isActive.toString()}>\n                  <SelectTrigger>\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"true\">Attivo</SelectItem>\n                    <SelectItem value=\"false\">Inattivo</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingUser(null)}>\n                  Annulla\n                </Button>\n                <Button type=\"submit\" disabled={updateUserMutation.isPending}>\n                  {updateUserMutation.isPending ? 'Aggiornamento...' : 'Aggiorna Utente'}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":24146},"client/src/pages/wallet.tsx":{"content":"import { useState, useEffect, useCallback, useMemo } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useAuth } from '@/hooks/use-auth';\nimport { useLocation } from 'wouter';\nimport Sidebar from '@/components/layout/sidebar';\nimport TopBar from '@/components/layout/topbar';\nimport { useSidebar } from '@/contexts/SidebarContext';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Badge } from '@/components/ui/badge';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Wallet, CreditCard, ArrowUpDown, ArrowDown, ArrowUp, Euro, Users } from 'lucide-react';\nimport { format } from 'date-fns';\nimport { it } from 'date-fns/locale';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, PaymentElement, useElements, useStripe } from '@stripe/react-stripe-js';\n\n// Function to get Stripe configuration from database\nconst getStripeConfiguration = async () => {\n  try {\n    const response = await apiRequest('GET', '/api/stripe/config');\n    const result = await response.json();\n\n    if (result.success && result.configured && result.publicKey?.startsWith('pk_')) {\n      console.log('‚úÖ Using Stripe config from database');\n      return result.publicKey;\n    }\n  } catch (error) {\n    console.log('Database config not available, trying environment variables');\n  }\n\n  // Fallback to environment variables\n  const envKey = import.meta.env.VITE_STRIPE_PUBLIC_KEY;\n  if (envKey?.startsWith('pk_')) {\n    console.log('‚úÖ Using Stripe config from environment');\n    return envKey;\n  }\n\n  console.error('‚ùå No valid Stripe configuration found');\n  return null;\n};\n\n// Initialize Stripe promise with dynamic configuration\nlet stripePromise: Promise<any> | null = null;\n\nconst getStripePromise = async () => {\n  if (!stripePromise) {\n    const publicKey = await getStripeConfiguration();\n    stripePromise = publicKey ? loadStripe(publicKey) : Promise.resolve(null);\n  }\n  return stripePromise;\n};\n\n// Stripe Payment Form Component\nfunction StripePaymentForm({ amount, companyId, onSuccess, onProcessingChange }: { \n  amount: number; \n  companyId: string; \n  onSuccess: () => void;\n  onProcessingChange?: (processing: boolean) => void;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      console.log('Stripe not ready:', { stripe: !!stripe, elements: !!elements });\n      return;\n    }\n\n    setIsProcessing(true);\n    onProcessingChange?.(true);\n    console.log('Processing payment for amount:', amount);\n\n    try {\n      const { error, paymentIntent } = await stripe.confirmPayment({\n        elements,\n        confirmParams: {\n          return_url: `${window.location.origin}/wallet?payment=success`,\n        },\n        redirect: 'if_required',\n      });\n\n      if (error) {\n        console.error('Stripe payment error:', error);\n        toast({\n          title: \"Pagamento fallito\",\n          description: error.message || \"Errore durante il pagamento\",\n          variant: \"destructive\",\n        });\n      } else if (paymentIntent && paymentIntent.status === 'succeeded') {\n        console.log('Payment succeeded:', paymentIntent);\n\n        // Confirm payment and update wallet balance on backend\n        try {\n          const confirmResponse = await apiRequest('POST', `/api/wallet/${companyId}/confirm-payment`, {\n            paymentIntentId: paymentIntent.id\n          });\n\n          if (confirmResponse.ok) {\n            const result = await confirmResponse.json();\n            console.log('‚úÖ Wallet balance updated:', result);\n            toast({\n              title: \"Ricarica completata\",\n              description: `${amount} crediti aggiunti al wallet! Nuovo saldo: ${result.wallet.balance} crediti`,\n            });\n          } else {\n            throw new Error('Errore conferma pagamento');\n          }\n        } catch (confirmError) {\n          console.error('Payment confirmation error:', confirmError);\n          toast({\n            title: \"Pagamento completato ma...\",\n            description: \"Il pagamento √® riuscito ma c'√® stato un errore nell'aggiornamento del wallet. Contatta il supporto.\",\n            variant: \"destructive\",\n          });\n        }\n\n        onSuccess();\n      } else {\n        console.log('Payment status:', paymentIntent?.status);\n        toast({\n          title: \"Pagamento in elaborazione\",\n          description: \"Il pagamento √® in elaborazione, aggiorna la pagina tra qualche minuto\",\n        });\n      }\n    } catch (error) {\n      console.error('Payment processing error:', error);\n      toast({\n        title: \"Errore\",\n        description: \"Si √® verificato un errore durante il pagamento\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsProcessing(false);\n      onProcessingChange?.(false);\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <PaymentElement />\n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full\"\n      >\n        {isProcessing ? 'Elaborazione...' : `Paga ${amount} ‚Ç¨`}\n      </Button>\n    </form>\n  );\n}\n\nfunction WalletContent() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { user } = useAuth();\n  const [selectedCompanyId, setSelectedCompanyId] = useState<string>('');\n  const [rechargeAmount, setRechargeAmount] = useState('');\n  const [transferData, setTransferData] = useState({\n    fromCompanyId: '',\n    toCompanyId: '',\n    amount: ''\n  });\n\n  // State for filters\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [clientFilter, setClientFilter] = useState(\"\");\n\n  // Get user data from auth context\n  const userCompanyId = user?.companyId;\n  const userRole = user?.role;\n\n  // Fetch companies for admin/superadmin\n  const { data: companies = [] } = useQuery({\n    queryKey: ['/api/companies'],\n    enabled: !!user && (userRole === 'superadmin' || userRole === 'admin'),\n    retry: 1\n  });\n\n  // Determine active company ID based on user role\n  const activeCompanyId = userRole === 'superadmin' ? selectedCompanyId : userCompanyId;\n\n  // Debug logging\n  console.log('Wallet Debug:', {\n    userRole,\n    selectedCompanyId,\n    userCompanyId,\n    activeCompanyId,\n    companiesCount: Array.isArray(companies) ? companies.length : 0\n  });\n  const { data: walletData, isLoading: walletLoading, refetch: refetchWallet } = useQuery({\n    queryKey: ['/api/wallet', activeCompanyId],\n    queryFn: () => {\n      console.log('Fetching wallet for company:', activeCompanyId);\n      return apiRequest('GET', `/api/wallet/${activeCompanyId}`).then(res => res.json());\n    },\n    enabled: !!user && !!activeCompanyId,\n    retry: 1,\n    staleTime: 0, // Always consider data stale\n    cacheTime: 0, // Don't cache the data\n    refetchOnWindowFocus: true // Refetch when window regains focus\n  });\n\n  // Refetch wallet when activeCompanyId changes\n  useEffect(() => {\n    if (activeCompanyId) {\n      console.log('Active company changed to:', activeCompanyId);\n      // Force invalidate and refetch with no cache\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet', activeCompanyId] });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallets'] });\n      refetchWallet();\n    }\n  }, [activeCompanyId, refetchWallet, queryClient]);\n\n  // Extract wallet and transactions from response\n  const wallet = walletData || {};\n  const transactions = walletData?.transactions || [];\n\n  // Debug logging for wallet data\n  console.log('Wallet Data Debug:', {\n    walletData,\n    wallet,\n    balance: wallet.balance,\n    activeCompanyId,\n    selectedCompanyId\n  });\n\n  // Fetch all wallets for superadmin and admin (for their company hierarchy)\n  const { data: allWalletsData = [], isLoading: allWalletsLoading } = useQuery({\n    queryKey: ['/api/wallets'],\n    enabled: !!user && (userRole === 'superadmin' || userRole === 'admin'),\n    retry: 1\n  });\n\n  // Filter wallets based on search, type and client\n  const filteredWallets = useMemo(() => {\n    if (!Array.isArray(allWalletsData)) return [];\n\n    return allWalletsData.filter((wallet: any) => {\n      const company = wallet.company || {};\n      const nameMatch = company.name?.toLowerCase().includes(searchTerm.toLowerCase());\n      const typeMatch = typeFilter === \"all\" || company.type === typeFilter;\n\n      // Filtro per cliente collegato - cerchiamo nei clients associati\n      let clientMatch = true;\n      if (clientFilter) {\n        const hasMatchingClient = wallet.clients?.some((client: any) => \n          client.name?.toLowerCase().includes(clientFilter.toLowerCase()) ||\n          client.email?.toLowerCase().includes(clientFilter.toLowerCase())\n        );\n        clientMatch = hasMatchingClient || false;\n      }\n\n      return nameMatch && typeMatch && clientMatch;\n    });\n  }, [allWalletsData, searchTerm, typeFilter, clientFilter]);\n\n\n  // State for Stripe payment\n  const [clientSecret, setClientSecret] = useState<string | null>(null);\n  const [paymentIntentId, setPaymentIntentId] = useState<string | null>(null);\n  const [showStripeForm, setShowStripeForm] = useState(false);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [dynamicStripePromise, setDynamicStripePromise] = useState<Promise<any> | null>(null);\n  const [selectedTransactions, setSelectedTransactions] = useState<any[]>([]);\n  const [showTransactionsModal, setShowTransactionsModal] = useState(false);\n  const [selectedCompanyName, setSelectedCompanyName] = useState('');\n\n  // Create payment intent mutation\n  const createPaymentIntentMutation = useMutation({\n    mutationFn: (data: { companyId: string; amount: number }) =>\n      apiRequest('POST', `/api/wallet/${data.companyId}/create-payment-intent`, { amount: data.amount }),\n    onSuccess: async (response: any) => {\n      console.log('Payment intent created:', response);\n      setClientSecret(response.clientSecret);\n      setPaymentIntentId(response.paymentIntentId);\n\n      // Load Stripe configuration dynamically when opening payment form\n      const stripePromise = await getStripePromise();\n      setDynamicStripePromise(stripePromise);\n\n      setShowStripeForm(true);\n    },\n    onError: (error: any) => {\n      console.error('Payment intent creation error:', error);\n      toast({\n        title: 'Errore creazione pagamento',\n        description: error.message || 'Errore durante la creazione del pagamento',\n        variant: 'destructive'\n      });\n    }\n  });\n\n\n\n  // Transfer credits mutation\n  const transferMutation = useMutation({\n    mutationFn: (data: { fromCompanyId: string; toCompanyId: string; amount: number }) =>\n      apiRequest('POST', '/api/wallet/transfer', data),\n    onSuccess: () => {\n      toast({ title: 'Trasferimento completato', description: 'I crediti sono stati trasferiti con successo' });\n      queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n      setTransferData({ fromCompanyId: '', toCompanyId: '', amount: '' });\n    },\n    onError: (error: any) => {\n      toast({\n        title: 'Errore trasferimento',\n        description: error.message || 'Errore durante il trasferimento crediti',\n        variant: 'destructive'\n      });\n    }\n  });\n\n  const handleRecharge = () => {\n    const amount = parseFloat(rechargeAmount);\n    if (!amount || amount <= 0) {\n      toast({ title: 'Errore', description: 'Inserire un importo valido', variant: 'destructive' });\n      return;\n    }\n    if (!activeCompanyId) {\n      toast({ title: 'Errore', description: 'Selezionare un\\'azienda', variant: 'destructive' });\n      return;\n    }\n    // Use Stripe payment for real transactions\n    createPaymentIntentMutation.mutate({ companyId: activeCompanyId, amount });\n  };\n\n  const handleStripePaymentSuccess = () => {\n    console.log('Payment completed successfully');\n    setShowStripeForm(false);\n    setClientSecret(null);\n    setPaymentIntentId(null);\n    setRechargeAmount('');\n    // Refresh wallet data\n    queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n    refetchWallet();\n  };\n\n\n\n  const handleTransfer = () => {\n    const amount = parseFloat(transferData.amount);\n    if (!amount || amount <= 0) {\n      toast({ title: 'Errore', description: 'Inserire un importo valido', variant: 'destructive' });\n      return;\n    }\n    if (!transferData.fromCompanyId || !transferData.toCompanyId) {\n      toast({ title: 'Errore', description: 'Selezionare aziende di origine e destinazione', variant: 'destructive' });\n      return;\n    }\n    transferMutation.mutate({\n      fromCompanyId: transferData.fromCompanyId,\n      toCompanyId: transferData.toCompanyId,\n      amount\n    });\n  };\n\n  const handleViewTransactions = async (companyId: string, companyName: string) => {\n    try {\n      console.log('üîç Caricamento transazioni per:', companyName);\n\n      const response = await apiRequest('GET', `/api/company/${companyId}/wallet-transactions`);\n\n      if (!response.ok) {\n        throw new Error(`Errore HTTP: ${response.status}`);\n      }\n\n      const transactions = await response.json();\n      console.log('üìä Transazioni caricate:', transactions.length);\n\n      setSelectedTransactions(transactions);\n      setSelectedCompanyName(companyName);\n      setShowTransactionsModal(true);\n\n    } catch (error) {\n      console.error('‚ùå Errore caricamento transazioni:', error);\n      toast({\n        title: 'Errore',\n        description: 'Impossibile caricare le transazioni',\n        variant: 'destructive'\n      });\n    }\n  };\n\n  const getTransactionIcon = (type: string) => {\n    switch (type) {\n      case 'ricarica': return <ArrowUp className=\"h-4 w-4 text-green-500\" />;\n      case 'spesa': return <ArrowDown className=\"h-4 w-4 text-red-500\" />;\n      case 'trasferimento_in': return <ArrowUp className=\"h-4 w-4 text-blue-500\" />;\n      case 'trasferimento_out': return <ArrowDown className=\"h-4 w-4 text-orange-500\" />;\n      default: return <ArrowUpDown className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getTransactionBadgeVariant = (type: string) => {\n    switch (type) {\n      case 'ricarica': return 'default';\n      case 'spesa': return 'destructive';\n      case 'trasferimento_in': return 'secondary';\n      case 'trasferimento_out': return 'outline';\n      default: return 'secondary';\n    }\n  };\n\n  // Filter companies for transfer (exclude parent companies from being destinations)\n  const getTransferableCompanies = (isDestination: boolean) => {\n    if (!Array.isArray(companies)) return [];\n    \n    if (userRole === 'admin' && userCompanyId) {\n      // Admin can only transfer from their company to sub-companies\n      if (isDestination) {\n        // Show only direct sub-companies (sottoaziende) and clients of the admin's company\n        return (companies as any[]).filter((c: any) => \n          c.parent_id === userCompanyId || c.parentId === userCompanyId\n        );\n      } else {\n        // Show only their company as source\n        return (companies as any[]).filter((c: any) => c.id === userCompanyId);\n      }\n    }\n    \n    if (userRole === 'superadmin') {\n      if (isDestination && transferData.fromCompanyId) {\n        // For superadmin, destination can be sub-companies of the selected source company\n        return (companies as any[]).filter((c: any) => \n          c.parent_id === transferData.fromCompanyId || c.parentId === transferData.fromCompanyId\n        );\n      }\n      // For source selection, show all companies\n      return companies as any[];\n    }\n    \n    return [];\n  };\n\n  return (\n    <div className=\"container mx-auto p-4 space-y-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">üí≥ Sistema Wallet Aziendale</h1>\n            <p className=\"text-muted-foreground\">\n              Gestisci crediti aziendali per rinnovi automatici delle licenze (1 credito = 1 euro)\n            </p>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button \n              variant=\"outline\" \n              onClick={() => {\n                console.log('üîÑ Manual refresh triggered');\n                queryClient.invalidateQueries({ queryKey: ['/api/wallet'] });\n                queryClient.invalidateQueries({ queryKey: ['/api/wallets'] });\n                queryClient.invalidateQueries({ \n                  predicate: (query) => \n                    typeof query.queryKey[1] === 'string' && query.queryKey[1].includes('wallet-transactions')\n                });\n                if (activeCompanyId) {\n                  refetchWallet();\n                }\n              }}\n              className=\"text-sm\"\n            >\n              <i className=\"fas fa-sync-alt mr-2\"></i>\n              Aggiorna Dati\n            </Button>\n          </div>\n        </div>\n\n        {/* Wallet Balance Card - Compact */}\n        {activeCompanyId && walletData && wallet && wallet.balance !== undefined && (\n          <Card className=\"bg-gradient-to-r from-blue-500 to-purple-600 text-white mb-6\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Wallet className=\"h-5 w-5\" />\n                    <h3 className=\"text-lg font-semibold\">Saldo Wallet</h3>\n                  </div>\n                  <div className=\"text-2xl font-bold\">\n                    {(wallet.balance || 0).toFixed(2)} crediti\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-4 text-sm text-right\">\n                  <div>\n                    <p className=\"text-blue-200\">Ricariche</p>\n                    <p className=\"font-semibold\">{(wallet.totalRecharges || 0).toFixed(2)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-blue-200\">Spese</p>\n                    <p className=\"font-semibold\">{(wallet.totalSpent || 0).toFixed(2)}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-blue-200\">Ultima Ricarica</p>\n                    <p className=\"font-semibold text-xs\">\n                      {wallet.lastRechargeDate ? \n                        format(new Date(wallet.lastRechargeDate), 'dd/MM/yyyy', { locale: it }) : \n                        'Mai'\n                      }\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Tabs System */}\n        <Tabs defaultValue=\"panoramica\" className=\"space-y-4\">\n          <TabsList className=\"grid w-full grid-cols-3\">\n            <TabsTrigger value=\"panoramica\" className=\"flex items-center gap-2\">\n              <Wallet className=\"h-4 w-4\" />\n              Panoramica\n            </TabsTrigger>\n            <TabsTrigger value=\"trasferimento\" className=\"flex items-center gap-2\">\n              <ArrowUpDown className=\"h-4 w-4\" />\n              Trasferimento\n            </TabsTrigger>\n            <TabsTrigger value=\"acquisto\" className=\"flex items-center gap-2\">\n              <CreditCard className=\"h-4 w-4\" />\n              Acquisto\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Tab 1: Panoramica */}\n          <TabsContent value=\"panoramica\" className=\"space-y-4\">\n            {/* Filters - Only visible in Panoramica tab */}\n            <Card>\n              <CardContent className=\"pt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium\">Cerca Azienda</Label>\n                    <Input\n                      placeholder=\"Cerca per nome azienda...\"\n                      value={searchTerm}\n                      onChange={(e) => setSearchTerm(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Tipo</Label>\n                    <Select value={typeFilter} onValueChange={setTypeFilter}>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Tutti i tipi\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n                        <SelectItem value=\"rivenditore\">Rivenditore</SelectItem>\n                        <SelectItem value=\"cliente\">Cliente</SelectItem>\n                        <SelectItem value=\"sottoazienda\">SottoAz.Rivenditore</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label className=\"text-sm font-medium\">Cliente Collegato</Label>\n                    <Input\n                      placeholder=\"Cerca per nome cliente...\"\n                      value={clientFilter}\n                      onChange={(e) => setClientFilter(e.target.value)}\n                      className=\"w-full\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Transaction History - Compact */}\n            {transactions.length > 0 && (\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"text-lg\">Storico Transazioni</CardTitle>\n                  <CardDescription>\n                    Ultimi movimenti del wallet selezionato\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n                    {transactions.slice(0, 10).map((transaction: any) => (\n                      <div \n                        key={transaction.id} \n                        className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\"\n                        data-testid={`transaction-${transaction.id}`}\n                      >\n                        <div className=\"flex items-center gap-3\">\n                          {getTransactionIcon(transaction.type)}\n                          <div>\n                            <p className=\"font-medium text-sm\">{transaction.description}</p>\n                            <p className=\"text-xs text-muted-foreground\">\n                              {format(new Date(transaction.createdAt), 'dd/MM/yyyy HH:mm', { locale: it })}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant={getTransactionBadgeVariant(transaction.type)} className=\"text-xs\">\n                            {transaction.type === 'spesa' || transaction.type === 'trasferimento_out' ? '-' : '+'}\n                            {(transaction.amount || 0).toFixed(2)}\n                          </Badge>\n                          <p className=\"text-xs text-muted-foreground mt-1\">\n                            Saldo: {(transaction.balanceAfter || 0).toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* All Wallets Overview - Compact Table */}\n            {((userRole === 'superadmin' && Array.isArray(allWalletsData) && allWalletsData.length > 0) || \n              (userRole === 'admin' && Array.isArray(companies) && companies.length > 0)) && (\n              <Card>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle>Panoramica Tutti i Wallet</CardTitle>\n                  <CardDescription>\n                    Vista generale di tutti i wallet aziendali\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"overflow-x-auto\">\n                    <table className=\"w-full border-collapse\">\n                      <thead>\n                        <tr className=\"border-b bg-muted/50\">\n                          <th className=\"text-left p-3 font-medium text-sm border-r min-w-[200px]\">Azienda</th>\n                          <th className=\"text-left p-3 font-medium text-sm border-r min-w-[100px]\">Tipo</th>\n                          <th className=\"text-left p-3 font-medium text-sm border-r min-w-[180px]\">Cliente</th>\n                          <th className=\"text-right p-3 font-medium text-sm border-r min-w-[120px]\">Saldo</th>\n                          <th className=\"text-right p-3 font-medium text-sm border-r min-w-[120px]\">Ricariche</th>\n                          <th className=\"text-right p-3 font-medium text-sm border-r min-w-[120px]\">Spese</th>\n                          <th className=\"text-center p-3 font-medium text-sm min-w-[100px]\">Azioni</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {filteredWallets.map((item: any) => (\n                          <tr \n                            key={item.company.id}\n                            className={`border-b hover:bg-muted/50 cursor-pointer transition-colors ${\n                              selectedCompanyId === item.company.id ? 'bg-muted' : ''\n                            }`}\n                            onClick={() => setSelectedCompanyId(item.company.id)}\n                            data-testid={`wallet-company-${item.company.id}`}\n                          >\n                            <td className=\"p-3 border-r\">\n                              <div className=\"flex items-center gap-2\">\n                                <div className=\"w-2 h-2 rounded-full bg-blue-500\"></div>\n                                <span className=\"font-medium text-sm\">{item.company.name}</span>\n                              </div>\n                            </td>\n                            <td className=\"p-3 border-r\">\n                              <Badge \n                                variant={item.company.type === 'rivenditore' ? 'default' : \n                                       item.company.type === 'cliente' ? 'secondary' : 'outline'}\n                              >\n                                {item.company.type === 'rivenditore' ? 'Rivenditore' :\n                                 item.company.type === 'cliente' ? 'Cliente' :\n                                 item.company.type === 'sottoazienda' ? 'Sotto-azienda' :\n                                 item.company.type}\n                              </Badge>\n                            </td>\n                            <td className=\"p-3 border-r\">\n                              <div className=\"text-sm\">\n                                {item.clients && item.clients.length > 0 ? (\n                                  <div className=\"space-y-1\">\n                                    {item.clients.slice(0, 2).map((client: any, idx: number) => (\n                                      <div key={idx} className=\"flex items-center gap-1\">\n                                        <Users className=\"h-3 w-3 text-muted-foreground\" />\n                                        <span className=\"text-xs\">{client.name}</span>\n                                      </div>\n                                    ))}\n                                    {item.clients.length > 2 && (\n                                      <div className=\"text-xs text-muted-foreground\">\n                                        +{item.clients.length - 2} altri\n                                      </div>\n                                    )}\n                                  </div>\n                                ) : (\n                                  <span className=\"text-xs text-muted-foreground\">Nessun cliente</span>\n                                )}\n                              </div>\n                            </td>\n                            <td className=\"p-3 text-right\">\n                              <span className=\"font-bold text-blue-600\">\n                                {(item.wallet.balance || 0).toFixed(2)}\n                              </span>\n                            </td>\n                            <td className=\"p-3 text-right text-green-600 text-sm\">\n                              +{(item.wallet.totalRecharges || 0).toFixed(2)}\n                            </td>\n                            <td className=\"p-3 text-right text-red-600 text-sm\">\n                              -{(item.wallet.totalSpent || 0).toFixed(2)}\n                            </td>\n                            <td className=\"p-3 text-center\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleViewTransactions(item.company.id, item.company.name);\n                                }}\n                                className=\"text-xs h-7\"\n                              >\n                                Dettaglio\n                              </Button>\n                            </td>\n                          </tr>\n                        ))}\n                      </tbody>\n                    </table>\n\n                    {/* Summary */}\n                    <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n                      <div className=\"grid grid-cols-3 gap-4 text-center text-sm\">\n                        <div>\n                          <p className=\"text-muted-foreground\">Totale Aziende</p>\n                          <p className=\"text-xl font-bold text-blue-600\">\n                            {filteredWallets.length}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Crediti Sistema</p>\n                          <p className=\"text-xl font-bold text-green-600\">\n                            {filteredWallets.reduce((sum: number, item: any) => sum + (item.wallet.balance || 0), 0).toFixed(2)}\n                          </p>\n                        </div>\n                        <div>\n                          <p className=\"text-muted-foreground\">Ricariche Totali</p>\n                          <p className=\"text-xl font-bold text-orange-600\">\n                            {filteredWallets.reduce((sum: number, item: any) => sum + (item.wallet.totalRecharges || 0), 0).toFixed(2)}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Tab 2: Trasferimento */}\n          <TabsContent value=\"trasferimento\" className=\"space-y-4\">\n            {(userRole === 'admin' || userRole === 'superadmin') ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <ArrowUpDown className=\"h-5 w-5\" />\n                    Trasferisci Crediti\n                  </CardTitle>\n                  <CardDescription>\n                    Trasferisci crediti tra aziende madre e sotto-aziende\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label htmlFor=\"from-company\">Azienda di origine</Label>\n                      <Select \n                        value={transferData.fromCompanyId} \n                        onValueChange={(value) => setTransferData({...transferData, fromCompanyId: value})}\n                      >\n                        <SelectTrigger data-testid=\"select-from-company\" className=\"mt-1\">\n                          <SelectValue placeholder=\"Seleziona azienda origine\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {getTransferableCompanies(false).map((company: any) => (\n                            <SelectItem key={company.id} value={company.id}>\n                              {company.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                    <div>\n                      <Label htmlFor=\"to-company\">Azienda di destinazione</Label>\n                      <Select \n                        value={transferData.toCompanyId} \n                        onValueChange={(value) => setTransferData({...transferData, toCompanyId: value})}\n                      >\n                        <SelectTrigger data-testid=\"select-to-company\" className=\"mt-1\">\n                          <SelectValue placeholder=\"Seleziona azienda destinazione\" />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {getTransferableCompanies(true).map((company: any) => (\n                            <SelectItem key={company.id} value={company.id}>\n                              {company.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    </div>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"transfer-amount\">Importo (crediti)</Label>\n                    <Input\n                      id=\"transfer-amount\"\n                      type=\"number\"\n                      min=\"1\"\n                      step=\"0.01\"\n                      value={transferData.amount}\n                      onChange={(e) => setTransferData({...transferData, amount: e.target.value})}\n                      placeholder=\"Es. 50.00\"\n                      data-testid=\"input-transfer-amount\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleTransfer} \n                    disabled={transferMutation.isPending || !transferData.amount}\n                    className=\"w-full\"\n                    data-testid=\"button-transfer-credits\"\n                  >\n                    {transferMutation.isPending ? 'Trasferimento...' : 'Trasferisci Crediti'}\n                  </Button>\n                  <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg\">\n                    <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                      üí° <strong>Nota:</strong> I trasferimenti sono istantanei e irreversibili. \n                      Assicurati di verificare le aziende e l'importo prima di procedere.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <ArrowUpDown className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Accesso Limitato</h3>\n                  <p className=\"text-muted-foreground\">\n                    Solo gli amministratori possono trasferire crediti tra aziende.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n\n          {/* Tab 3: Acquisto */}\n          <TabsContent value=\"acquisto\" className=\"space-y-4\">\n            {/* Company Selection for Superadmin */}\n            {userRole === 'superadmin' && (\n              <Card className=\"mb-4\">\n                <CardHeader className=\"pb-4\">\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Seleziona Azienda\n                  </CardTitle>\n                  <CardDescription>\n                    Seleziona l'azienda per cui acquistare crediti\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <Select value={selectedCompanyId} onValueChange={(value) => {\n                    console.log('Company selection changed to:', value);\n                    setSelectedCompanyId(value);\n                  }}>\n                    <SelectTrigger className=\"w-full\">\n                      <SelectValue placeholder=\"Seleziona azienda per visualizzare il wallet\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {companies && Array.isArray(companies) ? (companies as any[]).map((company: any) => (\n                        <SelectItem key={company.id} value={company.id}>\n                          {company.name} ({company.type})\n                        </SelectItem>\n                      )) : null}\n                    </SelectContent>\n                  </Select>\n                </CardContent>\n              </Card>\n            )}\n\n            {(userRole === 'admin' || userRole === 'superadmin') && activeCompanyId ? (\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CreditCard className=\"h-5 w-5\" />\n                    Ricarica Wallet\n                  </CardTitle>\n                  <CardDescription>\n                    Aggiungi crediti tramite pagamento sicuro con Stripe\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"recharge-amount\">Importo (crediti)</Label>\n                    <Input\n                      id=\"recharge-amount\"\n                      type=\"number\"\n                      min=\"1\"\n                      step=\"0.01\"\n                      value={rechargeAmount}\n                      onChange={(e) => setRechargeAmount(e.target.value)}\n                      placeholder=\"Es. 100.00\"\n                      data-testid=\"input-recharge-amount\"\n                      className=\"mt-1\"\n                    />\n                  </div>\n                  <Button \n                    onClick={handleRecharge} \n                    disabled={createPaymentIntentMutation.isPending || !rechargeAmount}\n                    className=\"w-full\"\n                    size=\"lg\"\n                  >\n                    {createPaymentIntentMutation.isPending ? 'Creazione Pagamento...' : `Ricarica ${rechargeAmount || '0'} Crediti`}\n                  </Button>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 pt-4\">\n                    <div className=\"p-3 bg-green-50 dark:bg-green-950/30 rounded-lg text-center\">\n                      <Euro className=\"h-6 w-6 mx-auto mb-2 text-green-600\" />\n                      <p className=\"text-sm font-medium text-green-700 dark:text-green-300\">Sicuro</p>\n                      <p className=\"text-xs text-green-600 dark:text-green-400\">Pagamenti protetti</p>\n                    </div>\n                    <div className=\"p-3 bg-blue-50 dark:bg-blue-950/30 rounded-lg text-center\">\n                      <CreditCard className=\"h-6 w-6 mx-auto mb-2 text-blue-600\" />\n                      <p className=\"text-sm font-medium text-blue-700 dark:text-blue-300\">Istantaneo</p>\n                      <p className=\"text-xs text-blue-600 dark:text-blue-400\">Crediti immediati</p>\n                    </div>\n                    <div className=\"p-3 bg-purple-50 dark:bg-purple-950/30 rounded-lg text-center\">\n                      <Wallet className=\"h-6 w-6 mx-auto mb-2 text-purple-600\" />\n                      <p className=\"text-sm font-medium text-purple-700 dark:text-purple-300\">1:1</p>\n                      <p className=\"text-xs text-purple-600 dark:text-purple-400\">1 credito = 1 euro</p>\n                    </div>\n                  </div>\n                  <div className=\"mt-4 p-3 bg-amber-50 dark:bg-amber-950/30 rounded-lg\">\n                    <p className=\"text-sm text-amber-700 dark:text-amber-300\">\n                      üí° <strong>Informazioni:</strong> I crediti acquistati sono disponibili immediatamente \n                      e possono essere utilizzati per rinnovi automatici delle licenze. \n                      Pagamento sicuro tramite Stripe.\n                    </p>\n                  </div>\n                </CardContent>\n              </Card>\n            ) : !activeCompanyId ? (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <Users className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Seleziona un'azienda</h3>\n                  <p className=\"text-muted-foreground\">\n                    Seleziona un'azienda dal menu sopra per procedere con l'acquisto di crediti.\n                  </p>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-8\">\n                  <CreditCard className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">Accesso Limitato</h3>\n                  <p className=\"text-muted-foreground\">\n                    Solo gli amministratori possono acquistare crediti per i wallet aziendali.\n                  </p>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n\n        {/* No wallet message */}\n        {!walletLoading && !wallet && activeCompanyId && userRole !== 'superadmin' && (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <Wallet className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-semibold mb-2\">Wallet non trovato</h3>\n              <p className=\"text-muted-foreground\">\n                Il wallet per questa azienda verr√† creato automaticamente alla prima operazione.\n              </p>\n            </CardContent>\n          </Card>\n        )}\n\n      {/* Stripe Payment Dialog */}\n      <Dialog open={showStripeForm} onOpenChange={(open) => {\n        // Prevent closing during payment processing\n        if (!isProcessing) {\n          setShowStripeForm(open);\n          if (!open) {\n            // Reset state when dialog is closed\n            setClientSecret(null);\n            setPaymentIntentId(null);\n          }\n        }\n      }}>\n        <DialogContent className=\"sm:max-w-[500px]\" onPointerDownOutside={(e) => {\n          // Prevent closing when clicking outside during payment processing\n          if (isProcessing) {\n            e.preventDefault();\n          }\n        }}>\n          <DialogHeader>\n            <DialogTitle>Ricarica Wallet con Stripe</DialogTitle>\n            <DialogDescription>\n              Completa il pagamento per ricaricare {rechargeAmount} crediti\n            </DialogDescription>\n          </DialogHeader>\n          {clientSecret && dynamicStripePromise ? (\n            <Elements stripe={dynamicStripePromise} options={{ \n              clientSecret,\n              appearance: {\n                theme: 'stripe',\n                variables: {\n                  colorPrimary: '#0570de',\n                }\n              }\n            }}>\n              <StripePaymentForm \n                amount={parseFloat(rechargeAmount) || 0} \n                companyId={activeCompanyId || ''} \n                onSuccess={handleStripePaymentSuccess}\n                onProcessingChange={setIsProcessing}\n              />\n            </Elements>\n          ) : dynamicStripePromise === null ? (\n            <div className=\"p-6 text-center\">\n              <div className=\"text-red-600 mb-4\">\n                ‚ö†Ô∏è Configurazione Stripe non valida\n              </div>\n              <p className=\"text-sm text-gray-600 mb-4\">\n                Le chiavi Stripe non sono configurate correttamente nel database.\n                Vai nelle Impostazioni per configurarle.\n              </p>\n              <Button onClick={() => window.location.href = '/settings'} variant=\"outline\">\n                Vai alle Impostazioni\n              </Button>\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center p-6\">\n              <div className=\"animate-spin w-6 h-6 border-2 border-primary border-t-transparent rounded-full\" />\n              <span className=\"ml-2\">Caricamento modulo pagamento...</span>\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Transactions Modal */}\n      <Dialog open={showTransactionsModal} onOpenChange={setShowTransactionsModal}>\n        <DialogContent className=\"sm:max-w-[800px] max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Transazioni Wallet - {selectedCompanyName}</DialogTitle>\n            <DialogDescription>\n              Storico completo delle transazioni del wallet in ordine cronologico decrescente\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {selectedTransactions.length > 0 ? (\n              <div className=\"space-y-3\">\n                {selectedTransactions\n                  .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())\n                  .map((transaction: any) => (\n                  <div \n                    key={transaction.id} \n                    className=\"flex items-center justify-between p-4 border rounded-lg bg-gray-50 dark:bg-gray-800\"\n                  >\n                    <div className=\"flex items-center gap-3\">\n                      {getTransactionIcon(transaction.type)}\n                      <div>\n                        <p className=\"font-medium\">{transaction.description}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                          {format(new Date(transaction.createdAt), 'dd/MM/yyyy HH:mm', { locale: it })}\n                        </p>\n                        {transaction.type === 'ricarica' && transaction.stripePaymentIntentId && (\n                          <p className=\"text-xs text-blue-600 dark:text-blue-400\">\n                            ID Pagamento Stripe: {transaction.stripePaymentIntentId}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <Badge variant={getTransactionBadgeVariant(transaction.type)} className=\"mb-1\">\n                        {transaction.type === 'spesa' || transaction.type === 'trasferimento_out' ? '-' : '+'}\n                        {(transaction.amount || 0).toFixed(2)} crediti\n                      </Badge>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Saldo dopo: {(transaction.balanceAfter || 0).toFixed(2)} crediti\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <div className=\"text-gray-500 mb-4\">\n                  <ArrowUpDown className=\"h-12 w-12 mx-auto mb-2\" />\n                  <h3 className=\"text-lg font-semibold\">Nessuna transazione</h3>\n                  <p className=\"text-sm\">Non ci sono ancora transazioni per questo wallet.</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nexport default function WalletPage() {\n  const { user, loading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { contentMargin } = useSidebar();\n\n  useEffect(() => {\n    if (!loading && !user) {\n      setLocation('/login');\n    }\n  }, [user, loading, setLocation]);\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex\">\n      <Sidebar />\n      <div className=\"flex-1 flex flex-col\">\n        <TopBar />\n        <main className=\"flex-1 p-4\" style={{ paddingLeft: '280px', minHeight: '100vh' }}>\n          <WalletContent />\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":49121},"client/src/types/index.ts":{"content":"export interface User {\n  id: string;\n  username: string;\n  name: string;\n  email: string;\n  role: string;\n  company?: {\n    id: string;\n    name: string;\n    type: string;\n  };\n}\n\nexport interface Company {\n  id: string;\n  name: string;\n  type: string;\n  parentId?: string;\n  status: string;\n  contactInfo?: any;\n  createdAt: Date;\n}\n\nexport interface Product {\n  id: string;\n  name: string;\n  version: string;\n  description?: string;\n  supportedLicenseTypes?: string[];\n  createdAt: Date;\n}\n\nexport interface Client {\n  id: string;\n  companyId?: string;\n  name: string;\n  email: string;\n  status: string;\n  contactInfo?: any;\n  isMultiSite: boolean;\n  isMultiUser: boolean;\n  createdAt: Date;\n}\n\nexport interface License {\n  id: string;\n  clientId: string;\n  productId: string;\n  activationKey: string;\n  computerKey?: string;\n  activationDate?: Date;\n  expiryDate?: Date;\n  licenseType: string;\n  status?: string;\n  maxUsers?: number;\n  maxDevices?: number;\n  price?: number;\n  discount?: number;\n  priceType?: string;\n  activeModules?: string[];\n  assignedCompany?: string;\n  assignedAgent?: string;\n  renewalEnabled?: boolean;\n  renewalPeriod?: string;\n  createdAt: Date;\n}\n\nexport interface DashboardStats {\n  activeLicenses: number;\n  demoLicenses: number;\n  totalClients: number;\n  monthlyRevenue: number;\n  todayActivations: number;\n  demoConversions: number;\n  expiringRenewals: number;\n  dailyRevenue: number;\n}\n\nexport interface LicenseDetailsResponse {\n  status: 'valid' | 'invalid' | 'error';\n  license?: {\n    id: string;\n    product: string;\n    version: string;\n    client: string;\n    expiryDate?: string;\n    activeModules: string[];\n    deviceBound: boolean;\n    maxUsers: number;\n    currentUsers: number;\n  };\n  message?: string;\n  timestamp: string;\n}\n\nexport interface LicenseWithDetails {\n  id: string;\n  clientId: string;\n  productId: string;\n  activationKey: string;\n  computerKey?: string | null;\n  activationDate?: string | null;\n  expiryDate?: string | null;\n  renewalEnabled?: boolean;\n  renewalPeriod?: string;\n  licenseType: string;\n  status: string;\n  maxUsers: number;\n  maxDevices: number;\n  price: string | number;\n  discount: string | number;\n  priceType?: string;\n  activeModules: string[];\n  assignedCompany?: string | null;\n  assignedAgent?: string | null;\n  createdAt: string;\n  client?: {\n    id: string;\n    name: string;\n    email: string;\n    status: string;\n    companyId: string;\n    contactInfo: any;\n    isMultiSite: boolean;\n    isMultiUser: boolean;\n    createdAt: string;\n  };\n  product?: {\n    id: string;\n    name: string;\n    version: string;\n    description: string;\n    supportedLicenseTypes: string[];\n    createdAt: string;\n  };\n  company?: {\n    id: string;\n    name: string;\n    type: string;\n    parentId: string | null;\n    status: string;\n    contactInfo: any;\n    createdAt: string;\n  };\n}","size_bytes":2855},"client/src/components/alerts/alert-panel.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport default function AlertPanel() {\n  const { data: licenses = [] } = useQuery({\n    queryKey: ['/api/licenses'],\n  });\n\n  const { data: clients = [] } = useQuery({\n    queryKey: ['/api/clients'],\n  });\n\n  // Safe arrays for calculation\n  const safeLicenses = Array.isArray(licenses) ? licenses : [];\n  const safeClients = Array.isArray(clients) ? clients : [];\n  \n  // Calculate real-time alerts\n  const expiringToday = safeLicenses.filter(l => {\n    if (!l.expires_at && !l.expiryDate) return false;\n    const expiryDate = new Date(l.expires_at || l.expiryDate);\n    const today = new Date();\n    return expiryDate.toDateString() === today.toDateString();\n  }).length;\n\n  const expiredLicenses = safeLicenses.filter(l => {\n    if (!l.expires_at && !l.expiryDate) return false;\n    const expiryDate = new Date(l.expires_at || l.expiryDate);\n    return expiryDate < new Date() && l.status !== 'scaduta';\n  }).length;\n\n  const pendingClients = safeClients.filter(c => c.status === 'in_attesa').length;\n\n  const todayActivations = safeLicenses.filter(l => {\n    if (!l.activation_date && !l.activationDate) return false;\n    const activationDate = new Date(l.activation_date || l.activationDate);\n    const today = new Date();\n    return activationDate.toDateString() === today.toDateString();\n  }).length;\n\n  const alerts = [\n    {\n      type: 'warning',\n      title: `${expiringToday} licenze demo scadono oggi`,\n      description: 'Verificare rinnovi in sospeso',\n      icon: 'fas fa-exclamation-triangle',\n      color: 'text-amber-600',\n      bgColor: 'bg-amber-50',\n      show: expiringToday > 0\n    },\n    {\n      type: 'error',\n      title: `${expiredLicenses} licenze scadute`,\n      description: 'Contattare clienti per rinnovo',\n      icon: 'fas fa-times-circle',\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      show: expiredLicenses > 0\n    },\n    {\n      type: 'info',\n      title: `${pendingClients} nuovi clienti in attesa`,\n      description: 'Verifica documenti necessaria',\n      icon: 'fas fa-info-circle',\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      show: pendingClients > 0\n    }\n  ].filter(alert => alert.show);\n\n  const quickStats = [\n    { label: 'Attivazioni oggi', value: todayActivations.toString() },\n    { label: 'Conversioni demo', value: '0', color: 'text-green-600' },\n    { label: 'Rinnovi in scadenza', value: expiringToday.toString(), color: 'text-amber-600' },\n    { label: 'Licenze attive', value: safeLicenses.filter(l => l.status === 'attiva').length.toString() }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Alert Panel */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Avvisi Importanti\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"space-y-3\">\n            {alerts.length > 0 ? (\n              alerts.map((alert, index) => (\n                <div \n                  key={index}\n                  className={`flex items-start space-x-3 p-3 ${alert.bgColor} rounded-lg`}\n                >\n                  <i className={`${alert.icon} ${alert.color} mt-0.5`}></i>\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">{alert.title}</p>\n                    <p className=\"text-xs text-gray-600 mt-1\">{alert.description}</p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"flex items-center justify-center p-6 text-gray-500\">\n                <div className=\"text-center\">\n                  <i className=\"fas fa-check-circle text-green-500 text-2xl mb-2\"></i>\n                  <p className=\"text-sm\">Nessun avviso importante</p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Quick Stats */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"text-lg font-semibold text-gray-900\">\n            Statistiche Veloci\n          </CardTitle>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"space-y-4\">\n            {quickStats.map((stat, index) => (\n              <div key={index} className=\"flex items-center justify-between\">\n                <span className=\"text-sm text-gray-600\">{stat.label}</span>\n                <span className={`text-sm font-semibold ${stat.color || 'text-gray-900'}`}>\n                  {stat.value}\n                </span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4742},"client/src/components/layout/sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Menu, X } from \"lucide-react\";\nimport { useSidebar } from \"@/contexts/SidebarContext\";\n\ntype NavigationItem = {\n  id: string;\n  label: string;\n  icon: string;\n  route: string;\n  badge?: string;\n  separator?: boolean;\n};\n\nconst getNavigationItems = (userRole: string, activeLicensesCount: number): NavigationItem[] => {\n  const baseItems: NavigationItem[] = [\n    { id: 'dashboard', label: 'Dashboard', icon: 'fas fa-chart-dashboard', route: '/dashboard' },\n    { id: 'licenses', label: 'Licenze', icon: 'fas fa-key', badge: activeLicensesCount > 0 ? activeLicensesCount.toString() : undefined, route: '/licenses' },\n    { id: 'software-registrations', label: 'LmRegister', icon: 'fas fa-desktop', route: '/software-registrations' },\n    { id: 'companies', label: 'Aziende', icon: 'fas fa-building', route: '/companies' },\n    { id: 'clients', label: 'Clienti', icon: 'fas fa-users', route: '/clients' },\n    { id: 'products', label: 'Prodotti', icon: 'fas fa-box', route: '/products' },\n    { id: 'transactions', label: 'Transazioni', icon: 'fas fa-chart-line', route: '/transactions' },\n  ];\n\n  // Add wallet after transactions for admin/superadmin\n  if (userRole === 'superadmin' || userRole === 'admin') {\n    baseItems.push(\n      { id: 'wallet', label: 'Wallet Aziende', icon: 'fas fa-wallet', route: '/wallet' }\n    );\n  }\n\n  // User management with role-based permissions\n  if (userRole === 'superadmin' || userRole === 'admin') {\n    baseItems.push(\n      { id: 'users', label: 'Gestione Utenti', icon: 'fas fa-user-cog', route: '/users' }\n    );\n  }\n\n  // Only superadmin can access settings and logs\n  if (userRole === 'superadmin') {\n    baseItems.push(\n      { id: 'settings', label: 'Impostazioni', icon: 'fas fa-cog', separator: true, route: '/settings' },\n      { id: 'logs', label: 'Log Attivit√†', icon: 'fas fa-file-alt', route: '/logs' }\n    );\n  }\n\n  return baseItems;\n};\n\nexport default function Sidebar() {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const [activeRole, setActiveRole] = useState(user?.role || 'superadmin');\n  const { isCollapsed, setIsCollapsed, sidebarWidth } = useSidebar();\n\n  // Get active licenses count based on user profile\n  const { data: activeLicensesCount = 0 } = useQuery({\n    queryKey: ['/api/licenses/active/count'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses/active/count', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch active licenses count');\n      const data = await response.json();\n      return data.count;\n    },\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const navigationItems = getNavigationItems(user?.role || 'superadmin', activeLicensesCount);\n\n  // Determine active item based on current route\n  const getActiveItem = () => {\n    const currentPath = location;\n    const activeNavItem = navigationItems.find(item => item.route === currentPath);\n    return activeNavItem ? activeNavItem.id : 'dashboard';\n  };\n\n  const activeItem = getActiveItem();\n\n  const handleRoleChange = (role: string) => {\n    setActiveRole(role);\n    // TODO: Update user permissions based on role\n  };\n\n  const handleLogout = () => {\n    logout();\n  };\n\n  return (\n    <aside className={`${sidebarWidth} bg-white shadow-lg border-r border-gray-200 fixed h-full overflow-y-auto transition-all duration-300 ease-in-out`}>\n      {/* Header */}\n      <div className={`${isCollapsed ? 'p-3' : 'p-6'} border-b border-gray-200`}>\n        <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'justify-between'}`}>\n          {!isCollapsed && (\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center overflow-hidden\">\n                <img \n                  src=\"/cmh-logo.png\" \n                  alt=\"CMH Logo\" \n                  className=\"w-full h-full object-contain\"\n                  onError={(e) => {\n                    console.log('Logo load error, falling back to text');\n                    const target = e.currentTarget as HTMLImageElement;\n                    target.style.display = 'none';\n                    const fallback = target.parentElement?.querySelector('.logo-fallback') as HTMLElement;\n                    if (fallback) fallback.style.display = 'flex';\n                  }}\n                />\n                <div \n                  className=\"logo-fallback text-white font-bold text-sm w-full h-full items-center justify-center\"\n                  style={{ display: 'none' }}\n                >\n                  CMH\n                </div>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">LmPlatform</h1>\n                <p className=\"text-sm text-gray-500\">License Manager</p>\n              </div>\n            </div>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsCollapsed(!isCollapsed)}\n            className=\"p-2\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            {isCollapsed ? <Menu className=\"h-4 w-4\" /> : <X className=\"h-4 w-4\" />}\n          </Button>\n        </div>\n      </div>\n\n      {/* Company Info for non-superadmin users */}\n      {!isCollapsed && user?.role !== 'superadmin' && user?.company && (\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"text-sm text-gray-600 mb-1\">Azienda</div>\n          <div className=\"font-medium text-gray-900\">{user.company.name}</div>\n          <div className=\"text-xs text-gray-500 capitalize\">{user.role}</div>\n        </div>\n      )}\n\n      {/* Navigation Menu */}\n      <nav className={`${isCollapsed ? 'p-2' : 'p-4'} space-y-2`}>\n        {navigationItems.map((item) => (\n          <div key={item.id}>\n            {!isCollapsed && item.separator && <div className=\"pt-4 border-t border-gray-200\" />}\n            <button\n              onClick={() => setLocation(item.route)}\n              className={`flex items-center ${isCollapsed ? 'justify-center px-2' : 'space-x-3 px-3'} py-2 rounded-lg w-full text-left transition-colors ${\n                activeItem === item.id\n                  ? 'bg-primary text-white'\n                  : 'hover:bg-gray-100 text-gray-700'\n              }`}\n              title={isCollapsed ? item.label : ''}\n            >\n              <i className={`${item.icon} text-sm`}></i>\n              {!isCollapsed && (\n                <>\n                  <span className=\"font-medium flex-1\">{item.label}</span>\n                  {item.badge && (\n                    <span className=\"bg-secondary text-white text-xs px-2 py-1 rounded-full\">\n                      {item.badge}\n                    </span>\n                  )}\n                </>\n              )}\n            </button>\n          </div>\n        ))}\n      </nav>\n\n      {/* User Profile */}\n      <div className={`absolute bottom-0 left-0 right-0 ${isCollapsed ? 'p-2' : 'p-4'} border-t border-gray-200 bg-white`}>\n        <div className={`flex items-center ${isCollapsed ? 'justify-center' : 'space-x-3'}`}>\n          <div className=\"w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center\">\n            <i className=\"fas fa-user text-gray-600 text-sm\"></i>\n          </div>\n          {!isCollapsed && (\n            <>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-gray-900 truncate\">\n                  {user?.name}\n                </p>\n                <p className=\"text-xs text-gray-500 truncate\">\n                  {user?.company?.name || 'LmPlatform'}\n                </p>\n              </div>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleLogout}\n                className=\"text-gray-400 hover:text-gray-600 p-1\"\n              >\n                <i className=\"fas fa-sign-out-alt text-sm\"></i>\n              </Button>\n            </>\n          )}\n          {isCollapsed && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleLogout}\n              className=\"text-gray-400 hover:text-gray-600 p-1 absolute top-2 right-2\"\n              title=\"Logout\"\n            >\n              <i className=\"fas fa-sign-out-alt text-xs\"></i>\n            </Button>\n          )}\n        </div>\n      </div>\n    </aside>\n  );\n}","size_bytes":8864},"client/src/components/layout/topbar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function TopBar() {\n  const { user } = useAuth();\n\n  return (\n    <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <h2 className=\"text-lg font-semibold text-gray-900\">\n            Benvenuto, {user?.name}\n          </h2>\n          <span className=\"text-sm text-gray-500\">\n            {user?.role === 'superadmin' ? 'Superadmin' :\n             user?.role === 'rivenditore' ? 'Rivenditore' :\n             user?.role === 'agente' ? 'Agente' : 'Cliente'}\n          </span>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600\">\n            <i className=\"fas fa-bell\"></i>\n          </Button>\n          \n          <Button variant=\"ghost\" size=\"sm\" className=\"text-gray-600\">\n            <i className=\"fas fa-question-circle\"></i>\n          </Button>\n          \n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-white text-sm font-medium\">\n              {user?.name?.charAt(0).toUpperCase()}\n            </span>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}","size_bytes":1388},"client/src/components/license/activation-form.tsx":{"content":"\nimport { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function ActivationForm() {\n  const [activationKey, setActivationKey] = useState(\"\");\n  const [computerKey, setComputerKey] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const generateComputerKey = () => {\n    // Simula la generazione di una chiave computer\n    const key = `CK-${Date.now().toString().slice(-8)}-${Math.random().toString(36).substr(2, 8).toUpperCase()}`;\n    setComputerKey(key);\n    toast({\n      title: \"Chiave Computer Generata\",\n      description: \"La chiave del computer √® stata generata automaticamente.\",\n    });\n  };\n\n  const handleActivation = async () => {\n    if (!activationKey.trim()) {\n      toast({\n        title: \"Errore\",\n        description: \"Inserisci una chiave di attivazione valida.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    \n    try {\n      // Simula chiamata API\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      \n      toast({\n        title: \"Licenza Attivata\",\n        description: \"La licenza √® stata attivata con successo.\",\n      });\n      \n      setActivationKey(\"\");\n      setComputerKey(\"\");\n    } catch (error) {\n      toast({\n        title: \"Errore Attivazione\",\n        description: \"Si √® verificato un errore durante l'attivazione.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"h-fit\">\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center space-x-2 text-base\">\n          <i className=\"fas fa-key text-primary\"></i>\n          <span>Attivazione Licenza</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <div>\n          <Label htmlFor=\"activation-key\" className=\"text-sm\">Chiave di Attivazione</Label>\n          <Input\n            id=\"activation-key\"\n            value={activationKey}\n            onChange={(e) => setActivationKey(e.target.value)}\n            placeholder=\"Inserisci la chiave\"\n            className=\"font-mono text-sm mt-1\"\n          />\n        </div>\n\n        <div>\n          <Label htmlFor=\"computer-key\" className=\"text-sm\">Chiave Computer</Label>\n          <div className=\"flex space-x-2 mt-1\">\n            <Input\n              id=\"computer-key\"\n              value={computerKey}\n              onChange={(e) => setComputerKey(e.target.value)}\n              placeholder=\"Genera o inserisci\"\n              className=\"font-mono text-sm flex-1\"\n            />\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={generateComputerKey}\n              size=\"sm\"\n              className=\"px-3\"\n            >\n              <i className=\"fas fa-refresh text-xs\"></i>\n            </Button>\n          </div>\n        </div>\n\n        <div>\n          <Label htmlFor=\"activation-info\" className=\"text-sm\">Info Dispositivo</Label>\n          <Textarea\n            id=\"activation-info\"\n            placeholder=\"Informazioni aggiuntive (opzionale)\"\n            rows={2}\n            className=\"text-sm mt-1 resize-none\"\n          />\n        </div>\n\n        <div className=\"pt-2 space-y-2\">\n          <Button\n            onClick={handleActivation}\n            disabled={isLoading}\n            className=\"w-full bg-primary hover:bg-blue-700 text-sm\"\n          >\n            {isLoading ? (\n              <>\n                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-white mr-2\"></div>\n                Attivazione...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-check mr-2 text-xs\"></i>\n                Attiva Licenza\n              </>\n            )}\n          </Button>\n\n          <Button\n            variant=\"outline\"\n            className=\"w-full text-sm\"\n            onClick={() => {\n              setActivationKey(\"\");\n              setComputerKey(\"\");\n            }}\n          >\n            <i className=\"fas fa-times mr-2 text-xs\"></i>\n            Reset\n          </Button>\n        </div>\n\n        <div className=\"pt-3 border-t border-gray-200\">\n          <div className=\"space-y-2\">\n            <h4 className=\"text-xs font-medium text-gray-900\">Attivazione Offline</h4>\n            <p className=\"text-xs text-gray-500\">\n              Se non hai connessione internet, puoi attivare offline.\n            </p>\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full text-xs\">\n              <i className=\"fas fa-download mr-2\"></i>\n              Scarica File Offline\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5009},"client/src/components/license/expiring-licenses-list.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface ExpiringLicense {\n  id: string;\n  activationKey: string;\n  expiryDate: string;\n  licenseType: string;\n  client: {\n    name: string;\n    email: string;\n    company_id?: string;\n    companyId?: string;\n  };\n  product: {\n    name: string;\n    version: string;\n  };\n}\n\nexport default function ExpiringLicensesList() {\n  const { user } = useAuth();\n\n  const { data: expiringLicenses = [], isLoading } = useQuery({\n    queryKey: ['/api/licenses/expiring'],\n    enabled: !!user,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/licenses/expiring', {\n        headers: { 'Authorization': `Bearer ${token}` }\n      });\n      if (!response.ok) throw new Error('Failed to fetch expiring licenses');\n      const data = await response.json();\n      \n\n      return data;\n    },\n    refetchInterval: 5 * 60 * 1000, // Aggiorna ogni 5 minuti\n  });\n\n  const getDaysUntilExpiry = (expiryDate: string) => {\n    const today = new Date();\n    const expiry = new Date(expiryDate);\n    const diffTime = expiry.getTime() - today.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    return diffDays;\n  };\n\n  const getExpiryBadge = (expiryDate: string) => {\n    const days = getDaysUntilExpiry(expiryDate);\n\n    if (days < 0) {\n      return <Badge variant=\"destructive\">Scaduta</Badge>;\n    } else if (days <= 7) {\n      return <Badge variant=\"destructive\">Scade in {days} giorni</Badge>;\n    } else if (days <= 30) {\n      return <Badge variant=\"secondary\">Scade in {days} giorni</Badge>;\n    } else {\n      return <Badge variant=\"outline\">Scade in {days} giorni</Badge>;\n    }\n  };\n\n  const getLicenseTypeBadge = (licenseType: string) => {\n    const typeMap = {\n      'abbonamento_mensile': { label: 'Mensile', color: 'bg-blue-100 text-blue-800' },\n      'abbonamento_annuale': { label: 'Annuale', color: 'bg-green-100 text-green-800' },\n      'permanente': { label: 'Permanente', color: 'bg-gray-100 text-gray-800' },\n      'trial': { label: 'Trial', color: 'bg-yellow-100 text-yellow-800' }\n    };\n\n    const type = typeMap[licenseType as keyof typeof typeMap] || { label: licenseType, color: 'bg-gray-100 text-gray-800' };\n\n    return (\n      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${type.color}`}>\n        {type.label}\n      </span>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center py-8\">\n        <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  // Since the server already filters licenses by company hierarchy for admin users,\n  // we trust the server response like in the main licenses page\n  console.log(`Expiring licenses: User ${user?.username} (${user?.role}) has ${expiringLicenses.length} expiring licenses from server`);\n\n  if (expiringLicenses.length === 0) {\n    return (\n      <div className=\"text-center py-8\">\n        <div className=\"w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-3\">\n          <i className=\"fas fa-check text-green-600 text-xl\"></i>\n        </div>\n        <p className=\"text-gray-500\">Nessuna licenza in scadenza nei prossimi 30 giorni</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex gap-4 overflow-x-auto pb-4\" style={{ scrollbarWidth: 'thin' }}>\n        {expiringLicenses.slice(0, 10).map((license: ExpiringLicense) => (\n          <div key={license.id} className=\"flex-none w-80 p-4 border rounded-lg hover:bg-gray-50 bg-white shadow-sm\">\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"font-medium text-sm text-gray-900\">{license.client.name}</span>\n                {getLicenseTypeBadge(license.licenseType)}\n              </div>\n              \n              <div className=\"space-y-1\">\n                <div className=\"text-sm font-medium text-gray-700\">\n                  {license.product.name} {license.product.version}\n                </div>\n                <div className=\"text-xs text-gray-500 font-mono\">\n                  {license.activationKey}\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-between pt-2 border-t\">\n                <div>\n                  <div className=\"text-xs text-gray-500\">Scadenza</div>\n                  <div className=\"text-sm font-medium text-gray-900\">\n                    {new Date(license.expiryDate).toLocaleDateString('it-IT')}\n                  </div>\n                </div>\n                {getExpiryBadge(license.expiryDate)}\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {expiringLicenses.length > 10 && (\n        <div className=\"text-center pt-3\">\n          <Button variant=\"outline\" size=\"sm\">\n            Visualizza tutte ({expiringLicenses.length})\n          </Button>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":5218},"client/src/components/license/license-modal.tsx":{"content":"\nimport React, { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport type { LicenseWithDetails } from \"@/types\";\n\ninterface DeviceRegistration {\n  id: string;\n  partitaIva: string;\n  nomeSoftware: string;\n  versione: string;\n  ragioneSociale: string;\n  uidDispositivo: string;\n  sistemaOperativo: string;\n  computerKey: string;\n  status: string;\n  primaRegistrazione: string;\n  ultimaAttivita: string;\n  licenzaAssegnata?: string;\n}\n\ninterface DeviceKeysSectionProps {\n  licenseId: string;\n}\n\nfunction DeviceKeysSection({ licenseId }: DeviceKeysSectionProps) {\n  const { data: registrations = [], isLoading } = useQuery({\n    queryKey: ['/api/software/registrazioni', { licenseId }],\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/software/registrazioni', {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch registrations');\n      }\n      const data = await response.json();\n      return data.filter((reg: any) => \n        reg.licenzaAssegnata === licenseId && \n        reg.computerKey && \n        reg.computerKey.trim() !== ''\n      );\n    }\n  });\n\n  if (isLoading) {\n    return <div className=\"animate-pulse h-8 bg-gray-200 rounded\"></div>;\n  }\n\n  if (registrations.length === 0) {\n    return (\n      <div className=\"bg-yellow-50 border border-yellow-200 p-3 rounded-lg\">\n        <div className=\"flex items-center text-yellow-800\">\n          <i className=\"fas fa-exclamation-triangle mr-2\"></i>\n          <span className=\"text-sm font-medium\">Nessun Dispositivo Autorizzato</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"bg-green-50 border border-green-200 p-2 rounded-lg\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-green-800\">\n            <i className=\"fas fa-shield-alt mr-1\"></i>\n            {registrations.length} Dispositivo{registrations.length !== 1 ? 'i' : ''} Autorizzato{registrations.length !== 1 ? 'i' : ''}\n          </span>\n          <Badge variant=\"secondary\" className=\"text-xs\">Attivi</Badge>\n        </div>\n      </div>\n\n      <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n        {registrations.map((registration: DeviceRegistration, index: number) => (\n          <div key={registration.id} className=\"bg-white border border-gray-200 rounded p-2\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <div className=\"flex items-center gap-1\">\n                <i className=\"fas fa-desktop text-blue-500 text-xs\"></i>\n                <span className=\"font-medium text-xs\">Dispositivo #{index + 1}</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs py-0\">Attivo</Badge>\n            </div>\n            \n            <div className=\"text-xs text-gray-600 mb-1\">\n              <span className=\"font-medium\">{registration.ragioneSociale}</span> ‚Ä¢ \n              <span className=\"ml-1\">{registration.nomeSoftware} v{registration.versione}</span>\n            </div>\n\n            <div className=\"bg-gray-50 border rounded p-1\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs font-medium text-gray-700\">Computer Key:</span>\n                <button \n                  onClick={() => navigator.clipboard.writeText(registration.computerKey)}\n                  className=\"text-xs text-blue-600 hover:text-blue-800\"\n                  title=\"Copia Computer Key\"\n                >\n                  <i className=\"fas fa-copy\"></i>\n                </button>\n              </div>\n              <p className=\"text-xs font-mono text-gray-900 mt-0.5 break-all bg-white px-1 py-0.5 rounded border\">\n                {registration.computerKey}\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface LicenseModalProps {\n  license: LicenseWithDetails | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function LicenseModal({ license, isOpen, onClose }: LicenseModalProps) {\n\n  if (!license) return null;\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      'attiva': 'default',\n      'demo': 'secondary',\n      'scaduta': 'destructive',\n      'in_attesa_convalida': 'outline',\n      'sospesa': 'destructive'\n    } as const;\n\n    const labels = {\n      'attiva': 'Attiva',\n      'demo': 'Demo',\n      'scaduta': 'Scaduta',\n      'in_attesa_convalida': 'In Attesa',\n      'sospesa': 'Sospesa'\n    };\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || 'outline'}>\n        {labels[status as keyof typeof labels] || status}\n      </Badge>\n    );\n  };\n\n  const getLicenseTypeLabel = (type: string) => {\n    const labels = {\n      'permanente': 'Permanente',\n      'trial': 'Trial',\n      'abbonamento_mensile': 'Abbonamento Mensile',\n      'abbonamento_annuale': 'Abbonamento Annuale'\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"pb-2\">\n          <DialogTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <i className=\"fas fa-key text-blue-600\"></i>\n              Dettagli Licenza\n            </div>\n            {getStatusBadge(license.status)}\n          </DialogTitle>\n          <DialogDescription className=\"text-sm\">\n            Informazioni complete sulla licenza selezionata\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Chiave di Attivazione */}\n        <div className=\"bg-gray-50 p-2 rounded-lg text-center mb-3\">\n          <Label className=\"text-xs font-medium text-gray-700\">Chiave di Attivazione</Label>\n          <p className=\"text-lg font-mono font-semibold text-gray-900 mt-0.5 tracking-wider\">\n            {license.activationKey}\n          </p>\n        </div>\n\n        {/* Layout compatto a grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          \n          {/* Colonna Sinistra */}\n          <div className=\"space-y-4\">\n            \n            {/* Informazioni Generali */}\n            <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n              <h3 className=\"text-md font-semibold text-gray-900 mb-2 flex items-center\">\n                <i className=\"fas fa-info-circle text-blue-600 mr-2\"></i>\n                Informazioni Generali\n              </h3>\n              <div className=\"grid grid-cols-3 gap-3\">\n                {/* Cliente */}\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-user text-blue-500 text-sm mr-1\"></i>\n                    <h4 className=\"font-medium text-xs text-gray-900\">Cliente</h4>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <div>\n                      <p className=\"text-xs font-medium text-gray-900\">{license.client?.name || 'N/A'}</p>\n                      <p className=\"text-xs text-gray-600\">{license.client?.email || 'N/A'}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-xs font-medium text-blue-600\">{license.company?.name || 'N/A'}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Prodotto */}\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-box text-green-500 text-sm mr-1\"></i>\n                    <h4 className=\"font-medium text-xs text-gray-900\">Prodotto</h4>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <div>\n                      <p className=\"text-xs font-medium text-gray-900\">\n                        {license.product?.name} {license.product?.version}\n                      </p>\n                      <p className=\"text-xs text-gray-600\">\n                        {getLicenseTypeLabel(license.licenseType)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Prezzo e Limiti */}\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-tags text-purple-500 text-sm mr-1\"></i>\n                    <h4 className=\"font-medium text-xs text-gray-900\">Prezzo & Limiti</h4>\n                  </div>\n                  <div className=\"space-y-1\">\n                    <div>\n                      <p className=\"text-xs font-medium text-gray-900\">\n                        {license.priceType === 'prezzo' \n                          ? `‚Ç¨${parseFloat((license.price || 0).toString()).toFixed(2)}` \n                          : `${Math.round(parseFloat((license.price || 0).toString()))} crediti`}\n                        {license.discount && parseFloat((license.discount || 0).toString()) > 0 && (\n                          <span className=\"text-green-600 ml-1 text-xs\">\n                            (-{parseFloat((license.discount || 0).toString()).toFixed(1)}%)\n                          </span>\n                        )}\n                      </p>\n                    </div>\n                    <div className=\"flex gap-2 text-xs\">\n                      <span>{license.maxUsers || 1} utenti</span>\n                      <span>{license.maxDevices || 1} dispositivi</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Avviso */}\n              <div className=\"bg-blue-50 border border-blue-200 p-2 rounded mt-2\">\n                <p className=\"text-xs text-blue-800\">\n                  <i className=\"fas fa-info-circle mr-1\"></i>\n                  <strong>Configurazione Ereditata:</strong> Prezzo, sconto e limiti sono ereditati dal prodotto associato.\n                </p>\n              </div>\n            </div>\n\n            {/* Date e Status */}\n            <div className=\"bg-green-50 border border-green-200 rounded-lg p-3\">\n              <h3 className=\"text-md font-semibold text-gray-900 mb-2 flex items-center\">\n                <i className=\"fas fa-calendar-alt text-green-600 mr-2\"></i>\n                Date e Status\n              </h3>\n              <div className=\"grid grid-cols-2 gap-2\">\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-plus-circle text-blue-500 text-xs mr-1\"></i>\n                    <span className=\"text-xs text-gray-500 uppercase\">Creata il</span>\n                  </div>\n                  <p className=\"text-xs font-medium text-gray-900\">\n                    {license.createdAt \n                      ? new Date(license.createdAt).toLocaleDateString('it-IT')\n                      : 'N/A'\n                    }\n                  </p>\n                </div>\n\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-play-circle text-green-500 text-xs mr-1\"></i>\n                    <span className=\"text-xs text-gray-500 uppercase\">Attivata il</span>\n                  </div>\n                  <p className=\"text-xs font-medium text-gray-900\">\n                    {license.activationDate \n                      ? new Date(license.activationDate).toLocaleDateString('it-IT')\n                      : 'Non attivata'\n                    }\n                  </p>\n                </div>\n\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-stop-circle text-red-500 text-xs mr-1\"></i>\n                    <span className=\"text-xs text-gray-500 uppercase\">Scade il</span>\n                  </div>\n                  <p className={`text-xs font-medium ${\n                    license.expiryDate ? (\n                      new Date(license.expiryDate) < new Date() ? 'text-red-600' :\n                      new Date(license.expiryDate) < new Date(Date.now() + 30*24*60*60*1000) ? 'text-orange-600' :\n                      'text-green-600'\n                    ) : 'text-gray-900'\n                  }`}>\n                    {license.expiryDate \n                      ? new Date(license.expiryDate).toLocaleDateString('it-IT')\n                      : (license.licenseType === 'permanente' ? 'Permanente' : 'N/A')\n                    }\n                  </p>\n                </div>\n\n                <div className=\"bg-white rounded p-2\">\n                  <div className=\"flex items-center mb-1\">\n                    <i className=\"fas fa-sync-alt text-purple-500 text-xs mr-1\"></i>\n                    <span className=\"text-xs text-gray-500 uppercase\">Rinnovo Auto</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    {license.renewalEnabled ? (\n                      <span className=\"flex items-center text-green-600\">\n                        <i className=\"fas fa-check-circle mr-1 text-xs\"></i>\n                        <span className=\"text-xs font-medium\">\n                          {license.renewalPeriod === 'monthly' ? 'Mensile' : license.renewalPeriod === 'yearly' ? 'Annuale' : 'Attivo'}\n                        </span>\n                      </span>\n                    ) : (\n                      <span className=\"flex items-center text-red-600\">\n                        <i className=\"fas fa-times-circle mr-1 text-xs\"></i>\n                        <span className=\"text-xs font-medium\">Disattivo</span>\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            {/* Moduli Attivi */}\n            <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n              <h3 className=\"text-md font-semibold text-gray-900 mb-2 flex items-center\">\n                <i className=\"fas fa-puzzle-piece text-yellow-600 mr-2\"></i>\n                Moduli Attivi\n              </h3>\n              <div className=\"bg-white rounded p-2\">\n                <div className=\"flex flex-wrap gap-1\">\n                  {license.activeModules && license.activeModules.length > 0 ? (\n                    license.activeModules.map((module: string, index: number) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs px-2 py-0 bg-blue-50 border-blue-200 text-blue-700\">\n                        <i className=\"fas fa-cog mr-1\"></i>\n                        {module}\n                      </Badge>\n                    ))\n                  ) : (\n                    <div className=\"flex items-center text-gray-500\">\n                      <i className=\"fas fa-exclamation-circle mr-1\"></i>\n                      <span className=\"text-xs\">Nessun modulo attivo</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Colonna Destra */}\n          <div className=\"space-y-4\">\n            \n            {/* Dispositivi Autorizzati */}\n            <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-3\">\n              <h3 className=\"text-md font-semibold text-gray-900 mb-2 flex items-center\">\n                <i className=\"fas fa-desktop text-purple-600 mr-2\"></i>\n                Dispositivi Autorizzati\n              </h3>\n              <div className=\"bg-white rounded p-2\">\n                <DeviceKeysSection licenseId={license.id} />\n              </div>\n            </div>\n\n            {/* Info Gestione Dispositivi */}\n            <div className=\"bg-blue-50 border border-blue-200 p-2 rounded-lg\">\n              <div className=\"flex items-start\">\n                <i className=\"fas fa-info-circle text-blue-600 mt-0.5 mr-2 flex-shrink-0\"></i>\n                <p className=\"text-xs text-blue-800\">\n                  <strong>Gestione Dispositivi:</strong> Le Computer Key vengono assegnate tramite la sezione \n                  \"Qlm Register\" durante la classificazione delle registrazioni software.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex justify-end pt-2 border-t\">\n          <Button variant=\"outline\" onClick={onClose} size=\"sm\">\n            Chiudi\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":17296},"client/src/components/license/license-table.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\"\nimport { Label } from \"@/components/ui/label\"\nimport { Input } from \"@/components/ui/input\"\nimport { Textarea } from \"@/components/ui/textarea\"\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport React, { useState } from 'react';\nimport { format } from 'date-fns';\nimport { it } from 'date-fns/locale';\n\n// Helper functions for date comparisons (assuming these are defined elsewhere or should be included)\nconst isExpired = (expiryDate: string | Date): boolean => {\n  const expiry = new Date(expiryDate);\n  const now = new Date();\n  return expiry < now;\n};\n\nconst isExpiringSoon = (expiryDate: string | Date): boolean => {\n  const expiry = new Date(expiryDate);\n  const now = new Date();\n  const diffTime = expiry.getTime() - now.getTime();\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays >= 0 && diffDays <= 7; // Expiring within 7 days\n};\n\n\nfunction LicenseModal({ license, isOpen, onClose, onEdit }: { license: any, isOpen: boolean, onClose: () => void, onEdit?: () => void }) {\n  if (!license) {\n    return null;\n  }\n\n  // State for form inputs if editing\n  const [editedLicense, setEditedLicense] = useState(license);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { id, value } = e.target;\n    setEditedLicense(prev => ({ ...prev, [id]: value }));\n  };\n\n  const handleSelectChange = (value: string, field: string) => {\n    setEditedLicense(prev => ({ ...prev, [field]: value }));\n  };\n\n  const handleSave = () => {\n    // Here you would typically call an API to save the changes\n    console.log(\"Saving changes:\", editedLicense);\n    onEdit?.(); // Call the onEdit prop passed from parent if it exists\n    onClose();\n  };\n\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>{onEdit ? \"Modifica Licenza\" : \"Dettagli Licenza\"}</DialogTitle>\n          <DialogDescription>\n            {onEdit ? \"Apporta modifiche alla licenza.\" : \"Visualizza i dettagli completi della licenza.\"}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"activationKey\" className=\"text-right\">\n              Chiave Licenza\n            </Label>\n            <Input id=\"activationKey\" value={editedLicense.activationKey} className=\"col-span-3\" disabled={!onEdit} onChange={handleInputChange}/>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"productName\" className=\"text-right\">\n              Prodotto\n            </Label>\n            <Input id=\"productName\" value={editedLicense.product?.name || 'N/A'} className=\"col-span-3\" disabled={!onEdit} onChange={(e) => setEditedLicense(prev => ({ ...prev, product: { ...prev.product, name: e.target.value } }))}/>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"clientName\" className=\"text-right\">\n              Cliente\n            </Label>\n            <Input id=\"clientName\" value={editedLicense.client?.name || 'N/A'} className=\"col-span-3\" disabled={!onEdit} onChange={(e) => setEditedLicense(prev => ({ ...prev, client: { ...prev.client, name: e.target.value } }))}/>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"companyName\" className=\"text-right\">\n              Azienda\n            </Label>\n            <Input id=\"companyName\" value={editedLicense.company?.name || 'N/A'} className=\"col-span-3\" disabled={!onEdit} onChange={(e) => setEditedLicense(prev => ({ ...prev, company: { ...prev.company, name: e.target.value } }))}/>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"licenseType\" className=\"text-right\">\n              Tipo Licenza\n            </Label>\n            <Select onValueChange={(value) => handleSelectChange(value, 'licenseType')} disabled={!onEdit} value={editedLicense.licenseType}>\n              <SelectTrigger className=\"col-span-3\">\n                <SelectValue placeholder=\"Seleziona tipo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"permanent\">Permanente</SelectItem>\n                <SelectItem value=\"trial\">Trial</SelectItem>\n                <SelectItem value=\"subscription\">Abbonamento Mensile</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"status\" className=\"text-right\">\n              Stato\n            </Label>\n             <Select onValueChange={(value) => handleSelectChange(value, 'status')} disabled={!onEdit} value={editedLicense.status}>\n              <SelectTrigger className=\"col-span-3\">\n                <SelectValue placeholder=\"Seleziona stato\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"attiva\">Attiva</SelectItem>\n                <SelectItem value=\"scaduta\">Scaduta</SelectItem>\n                <SelectItem value=\"trial\">Trial</SelectItem>\n                <SelectItem value=\"sospesa\">Sospesa</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"expiryDate\" className=\"text-right\">\n              Scadenza\n            </Label>\n            <Input\n              id=\"expiryDate\"\n              type=\"date\" // Use type=\"date\" for native date picker\n              value={editedLicense.expiryDate ? new Date(editedLicense.expiryDate).toISOString().split('T')[0] : ''}\n              className=\"col-span-3\"\n              disabled={!onEdit || editedLicense.licenseType === 'permanent'} // Disable if not editing or if license is permanent\n              onChange={(e) => {\n                const newDate = e.target.value;\n                setEditedLicense(prev => ({ ...prev, expiryDate: newDate }));\n              }}\n            />\n          </div>\n           <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"price\" className=\"text-right\">\n              Prezzo\n            </Label>\n            <Input id=\"price\" value={editedLicense.price || ''} className=\"col-span-3\" disabled={!onEdit} onChange={handleInputChange}/>\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <Label htmlFor=\"priceType\" className=\"text-right\">\n              Tipologia Prezzo\n            </Label>\n            <Select onValueChange={(value) => handleSelectChange(value, 'priceType')} disabled={!onEdit} value={editedLicense.priceType}>\n              <SelectTrigger className=\"col-span-3\">\n                <SelectValue placeholder=\"Seleziona tipologia\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"mensile\">Mensile</SelectItem>\n                <SelectItem value=\"annuale\">Annuale</SelectItem>\n                <SelectItem value=\"una_tantum\">Una Tantum</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        {onEdit ? (\n          <Button type=\"submit\" onClick={handleSave}>Salva Modifiche</Button>\n        ) : (\n          <Button onClick={onEdit}>Modifica</Button>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function LicenseTable() {\n  const [, setLocation] = useLocation();\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [selectedLicense, setSelectedLicense] = useState(null);\n\n  // Filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n\n  const { data: licenses = [], isLoading } = useQuery({\n    queryKey: ['/api/licenses'],\n    refetchOnWindowFocus: false,\n    staleTime: 0,\n    queryFn: async () => {\n      const token = localStorage.getItem('token');\n      if (!token) {\n        throw new Error('No authentication token found');\n      }\n\n      const response = await fetch('/api/licenses', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log('Licenses data received:', data);\n      return data;\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    const variants = {\n      'attiva': 'default',\n      'scaduta': 'destructive',\n      'trial': 'outline',\n      'sospesa': 'secondary'\n    } as const;\n\n    return (\n      <Badge variant={variants[status as keyof typeof variants] || 'outline'}>\n        {status === 'attiva' ? 'Attiva' : \n         status === 'scaduta' ? 'Scaduta' : \n         status === 'trial' ? 'Trial' : \n         status === 'sospesa' ? 'Sospesa' : status}\n      </Badge>\n    );\n  };\n\n  const getTypeBadge = (type: string) => {\n    const colors = {\n      'permanent': 'bg-green-100 text-green-800',\n      'trial': 'bg-blue-100 text-blue-800', \n      'subscription': 'bg-purple-100 text-purple-800'\n    } as const;\n\n    return (\n      <span className={`px-2 py-1 text-xs rounded-full ${colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800'}`}>\n        {type === 'permanent' ? 'Permanente' : \n         type === 'trial' ? 'Trial' : \n         type === 'subscription' ? 'Abbonamento' : type}\n      </span>\n    );\n  };\n\n  const getLicenseTypeBadge = (type: string) => {\n    const colors = {\n      'permanente': 'bg-green-100 text-green-800',\n      'trial': 'bg-yellow-100 text-yellow-800',\n      'abbonamento_mensile': 'bg-blue-100 text-blue-800',\n      'abbonamento_annuale': 'bg-indigo-100 text-indigo-800'\n    };\n    return colors[type as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };\n\n  const getLicenseTypeLabel = (type: string) => {\n    const labels = {\n      'permanente': 'Permanente',\n      'trial': 'Trial',\n      'abbonamento_mensile': 'Mensile',\n      'abbonamento_annuale': 'Annuale'\n    };\n    return labels[type as keyof typeof labels] || type;\n  };\n\n  const openEditModal = async (license: any) => {\n    try {\n      const token = localStorage.getItem('token');\n      // Fetching detailed license data for editing\n      const response = await fetch(`/api/licenses/${license.id}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const detailedLicense = await response.json();\n        // Ensure the fetched data includes all fields needed for the modal,\n        // including price and priceType if they are not always present in the initial list.\n        setSelectedLicense(detailedLicense);\n        setModalOpen(true);\n      } else {\n        console.error('Failed to fetch license details, using provided license data instead.');\n        // Fallback to using the license data passed to the function\n        setSelectedLicense(license);\n        setModalOpen(true);\n      }\n    } catch (error) {\n      console.error('Error fetching license details:', error);\n      // Fallback to using the license data passed to the function\n      setSelectedLicense(license);\n      setModalOpen(true);\n    }\n  };\n\n  const closeModal = () => {\n    setSelectedLicense(null);\n    setModalOpen(false);\n  };\n\n  const handleLicenseAction = async (license: any, action: string) => {\n    try {\n      const token = localStorage.getItem('token');\n      const response = await fetch(`/api/licenses/${license.id}/${action}`, {\n        method: 'PATCH',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (response.ok) {\n        // Refresh licenses list by re-fetching\n        window.location.reload();\n      } else {\n        console.error(`Failed to ${action} license`);\n      }\n    } catch (error) {\n      console.error(`Error ${action} license:`, error);\n    }\n  };\n\n  const filteredLicenses = licenses.filter((license: any) => {\n    const searchTermMatch = \n      license.activationKey.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (license.product?.name.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||\n      (license.client?.name.toLowerCase().includes(searchTerm.toLowerCase()) ?? false) ||\n      (license.company?.name.toLowerCase().includes(searchTerm.toLowerCase()) ?? false);\n\n    const statusMatch = statusFilter === \"all\" || license.status === statusFilter;\n    const typeMatch = typeFilter === \"all\" || license.licenseType === typeFilter;\n\n    return searchTermMatch && statusMatch && typeMatch;\n  });\n\n\n  return (\n    <Card>\n      <CardHeader className=\"space-y-4\">\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <i className=\"fas fa-list text-green-500\"></i>\n            Elenco Licenze\n          </CardTitle>\n        </div>\n\n        {/* Filtri */}\n        <div className=\"flex flex-col gap-4\">\n          <Input\n            placeholder=\"Cerca per chiave licenza, cliente o prodotto...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"w-full\"\n          />\n\n          <div className=\"flex flex-col sm:flex-row gap-4\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Stato\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tutti gli stati</SelectItem>\n                <SelectItem value=\"attiva\">Attiva</SelectItem>\n                <SelectItem value=\"trial\">Trial</SelectItem>\n                <SelectItem value=\"demo\">Demo</SelectItem>\n                <SelectItem value=\"scaduta\">Scaduta</SelectItem>\n                <SelectItem value=\"sospesa\">Sospesa</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={typeFilter} onValueChange={setTypeFilter}>\n              <SelectTrigger className=\"w-full sm:w-48\">\n                <SelectValue placeholder=\"Tipo\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Tutti i tipi</SelectItem>\n                <SelectItem value=\"permanent\">Permanente</SelectItem>\n                <SelectItem value=\"trial\">Trial</SelectItem>\n                <SelectItem value=\"subscription\">Abbonamento</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\"\n              onClick={() => {\n                setSearchTerm(\"\");\n                setStatusFilter(\"all\");\n                setTypeFilter(\"all\");\n              }}\n              className=\"w-full sm:w-auto\"\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-0\">\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-48\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Chiave Licenza</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Prodotto</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Cliente</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Azienda</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Tipo</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Stato</th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase\">Scadenza</th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase\">Azioni</th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredLicenses.map((license: any) => (\n                  <tr key={license.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-mono text-gray-900\">\n                      {license.activationKey}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <button\n                        onClick={() => setLocation('/products')}\n                        className=\"flex items-center text-left hover:text-blue-600 hover:underline transition-colors\"\n                      >\n                        <i className=\"fas fa-box text-blue-500 mr-2\"></i>\n                        <div>\n                          <div className=\"font-medium\">{license.product?.name || 'N/A'}</div>\n                          <div className=\"text-xs text-gray-500\">{license.product?.version || ''}</div>\n                        </div>\n                      </button>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      <button\n                        onClick={() => setLocation('/clients')}\n                        className=\"flex items-center text-left hover:text-green-600 hover:underline transition-colors\"\n                      >\n                        <i className=\"fas fa-user text-green-500 mr-2\"></i>\n                        <div>\n                          <div className=\"font-medium\">{license.client?.name || 'N/A'}</div>\n                          <div className=\"text-xs text-gray-500\">{license.client?.email || ''}</div>\n                        </div>\n                      </button>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      <button\n                        onClick={() => setLocation('/companies')}\n                        className=\"flex items-center text-left hover:text-purple-600 hover:underline transition-colors\"\n                      >\n                        <i className=\"fas fa-building text-gray-400 mr-2\"></i>\n                        {license.company?.name || 'N/A'}\n                      </button>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getLicenseTypeBadge(license.licenseType)}`}>\n                        {getLicenseTypeLabel(license.licenseType)}</span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(license.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {license.expiryDate ? (\n                        <div className={\n                          isExpired(license.expiryDate) ? 'text-red-600 font-medium' :\n                          isExpiringSoon(license.expiryDate) ? 'text-orange-600 font-medium' :\n                          'text-green-600'\n                        }>\n                          {format(new Date(license.expiryDate), 'dd/MM/yyyy', { locale: it })}\n                          {isExpiringSoon(license.expiryDate) && !isExpired(license.expiryDate) && (\n                            <div className=\"text-xs text-orange-500\">In scadenza</div>\n                          )}\n                          {isExpired(license.expiryDate) && (\n                            <div className=\"text-xs text-red-500\">Scaduta</div>\n                          )}\n                        </div>\n                      ) : (\n                        <span className=\"text-muted-foreground\">Permanente</span>\n                      )}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <div className=\"flex justify-end space-x-2\">\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          onClick={() => openEditModal(license)}\n                          title=\"Visualizza/Modifica licenza\"\n                        >\n                          <i className=\"fas fa-edit text-green-600\"></i>\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\" \n                          className=\"text-red-600\"\n                          onClick={() => {\n                            const action = license.status === 'attiva' ? 'suspend' : 'activate';\n                            handleLicenseAction(license, action);\n                          }}\n                          title={license.status === 'attiva' ? 'Sospendi licenza' : 'Attiva licenza'}\n                        >\n                          <i className={license.status === 'attiva' ? 'fas fa-ban' : 'fas fa-check-circle'}></i>\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {filteredLicenses.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-key text-gray-400 text-2xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Nessuna licenza trovata</h3>\n                <p className=\"text-gray-500 mb-4\">Inizia creando la tua prima licenza</p>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n\n      <LicenseModal\n        license={selectedLicense}\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onEdit={() => handleLicenseAction(selectedLicense, 'update')} // Assuming 'update' is the correct action for saving edits\n      />\n    </Card>\n  );\n}","size_bytes":22919},"client/src/components/stats/stats-cards.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function StatsCards() {\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/dashboard/stats'],\n  });\n\n  const statsCards = [\n    {\n      title: 'Licenze Attive',\n      value: stats?.activeLicenses || 0,\n      change: '+12% questo mese',\n      icon: 'fas fa-key',\n      color: 'text-secondary',\n      bgColor: 'bg-secondary bg-opacity-10'\n    },\n    {\n      title: 'Licenze Demo',\n      value: stats?.demoLicenses || 0,\n      change: `${stats?.demoLicenses || 0} scadono oggi`,\n      icon: 'fas fa-clock',\n      color: 'text-accent',\n      bgColor: 'bg-accent bg-opacity-10'\n    },\n    {\n      title: 'Clienti Totali',\n      value: stats?.totalClients || 0,\n      change: '+8% questo mese',\n      icon: 'fas fa-users',\n      color: 'text-primary',\n      bgColor: 'bg-primary bg-opacity-10'\n    },\n    {\n      title: 'Crediti Generati',\n      value: `${Math.round(stats?.monthlyRevenue || 0)} crediti`,\n      change: '+18% vs scorso mese',\n      icon: 'fas fa-coins',\n      color: 'text-secondary',\n      bgColor: 'bg-secondary bg-opacity-10'\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {[1, 2, 3, 4].map((i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"h-20 bg-gray-200 rounded\"></div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {statsCards.map((card, index) => (\n        <Card key={index} className=\"shadow-sm border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">{card.title}</p>\n                <p className=\"text-3xl font-bold text-gray-900 mt-1\">{card.value}</p>\n                <p className={`text-sm mt-1 ${card.color}`}>\n                  {card.title !== 'Licenze Demo' && (\n                    <i className=\"fas fa-arrow-up text-xs mr-1\"></i>\n                  )}\n                  <span>{card.change}</span>\n                </p>\n              </div>\n              <div className={`w-12 h-12 ${card.bgColor} rounded-lg flex items-center justify-center`}>\n                <i className={`${card.icon} ${card.color} text-xl`}></i>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2645},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }","size_bytes":688},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}